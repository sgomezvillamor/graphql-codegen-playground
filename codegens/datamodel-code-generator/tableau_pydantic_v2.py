# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-01-14T14:25:40+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class QueryType(BaseModel):
    name: str


class Type1(BaseModel):
    kind: str
    name: str
    ofType: None


class Arg(BaseModel):
    name: str
    description: Optional[str] = None
    type: Type1
    defaultValue: Optional[str] = None
    isDeprecated: bool
    deprecationReason: None


class OfType2(BaseModel):
    kind: str
    name: str
    ofType: None


class OfType1(BaseModel):
    kind: str
    name: Optional[str] = None
    ofType: Optional[OfType2] = None


class OfType(BaseModel):
    kind: str
    name: Optional[str] = None
    ofType: Optional[OfType1] = None


class Type2(BaseModel):
    kind: str
    name: Optional[str] = None
    ofType: Optional[OfType] = None


class FieldModel(BaseModel):
    name: str
    description: Optional[str] = None
    args: List[Arg]
    type: Type2
    isDeprecated: bool
    deprecationReason: Optional[str] = None


class OfType3(BaseModel):
    kind: str
    name: str
    ofType: None


class Type3(BaseModel):
    kind: str
    name: Optional[str] = None
    ofType: Optional[OfType3] = None


class InputField(BaseModel):
    name: str
    description: str
    type: Type3
    defaultValue: None
    isDeprecated: bool
    deprecationReason: None


class Interface(BaseModel):
    kind: str
    name: str
    ofType: None


class EnumValue(BaseModel):
    name: str
    description: Optional[str] = None
    isDeprecated: bool
    deprecationReason: None


class PossibleType(BaseModel):
    kind: str
    name: str
    ofType: None


class Type(BaseModel):
    kind: str
    name: str
    description: str
    fields: Optional[List[FieldModel]] = None
    inputFields: Optional[List[InputField]] = None
    interfaces: Optional[List[Interface]] = None
    enumValues: Optional[List[EnumValue]] = None
    possibleTypes: Optional[List[PossibleType]] = None


class Type4(BaseModel):
    kind: str
    name: Optional[str] = None
    ofType: Optional[OfType3] = None


class Arg1(BaseModel):
    name: str
    description: str
    type: Type4
    defaultValue: Optional[str] = None
    isDeprecated: bool
    deprecationReason: None


class Directive(BaseModel):
    name: str
    description: str
    isRepeatable: bool
    locations: List[str]
    args: List[Arg1]


class FieldSchema(BaseModel):
    description: None
    queryType: QueryType
    mutationType: None
    subscriptionType: None
    types: List[Type]
    directives: List[Directive]


class Model(BaseModel):
    field__schema: FieldSchema = Field(..., alias='__schema')
