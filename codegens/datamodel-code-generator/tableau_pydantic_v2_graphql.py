# generated by datamodel-codegen:
#   filename:  schema.graphql
#   timestamp: 2025-01-14T14:25:44+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, TypeAlias

from pydantic import BaseModel, Field

Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


DateTime: TypeAlias = str
"""
An RFC-3339 compliant DateTime Scalar
"""


ID: TypeAlias = str
"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


class AnalyticsFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'


class AskDataExtensionOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'


class BinFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DATA_CATEGORY = 'DATA_CATEGORY'
    DATA_TYPE = 'DATA_TYPE'
    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    IS_HIDDEN = 'IS_HIDDEN'
    NAME = 'NAME'
    ROLE = 'ROLE'


class CalculatedFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DATA_CATEGORY = 'DATA_CATEGORY'
    DATA_TYPE = 'DATA_TYPE'
    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    IS_HIDDEN = 'IS_HIDDEN'
    NAME = 'NAME'
    ROLE = 'ROLE'


class CanHaveLabelsOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    LUID = 'LUID'


class CertifiableOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    LUID = 'LUID'


class CloudFileOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONNECTION_TYPE = 'CONNECTION_TYPE'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT = 'DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    IS_EMBEDDED = 'IS_EMBEDDED'
    LUID = 'LUID'
    NAME = 'NAME'
    PROJECT_NAME = 'PROJECT_NAME'


class ColumnFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DATA_CATEGORY = 'DATA_CATEGORY'
    DATA_TYPE = 'DATA_TYPE'
    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    ID = 'ID'
    IS_HIDDEN = 'IS_HIDDEN'
    NAME = 'NAME'
    ROLE = 'ROLE'


class ColumnOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DISPLAY_NAME = 'DISPLAY_NAME'
    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'


class CombinedFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    IS_HIDDEN = 'IS_HIDDEN'
    NAME = 'NAME'


class CombinedSetFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    IS_HIDDEN = 'IS_HIDDEN'
    NAME = 'NAME'


class CustomSQLTableOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    COLUMNS_COUNT = 'COLUMNS_COUNT'
    DOWNSTREAM_DASHBOARDS_COUNT = 'DOWNSTREAM_DASHBOARDS_COUNT'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    ID = 'ID'
    IS_UNSUPPORTED_CUSTOM_SQL = 'IS_UNSUPPORTED_CUSTOM_SQL'
    NAME = 'NAME'


class DashboardOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DOCUMENT_VIEW_ID = 'DOCUMENT_VIEW_ID'
    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'
    PATH = 'PATH'


class DataCloudOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONNECTION_TYPE = 'CONNECTION_TYPE'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT = 'DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    IS_EMBEDDED = 'IS_EMBEDDED'
    LUID = 'LUID'
    NAME = 'NAME'
    PROJECT_NAME = 'PROJECT_NAME'


class DataFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DATA_CATEGORY = 'DATA_CATEGORY'
    DATA_TYPE = 'DATA_TYPE'
    ID = 'ID'
    ROLE = 'ROLE'


class DataQualityCertificationOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CATEGORY = 'CATEGORY'
    ID = 'ID'
    IS_ACTIVE = 'IS_ACTIVE'
    IS_ELEVATED = 'IS_ELEVATED'
    LUID = 'LUID'
    VALUE = 'VALUE'


class DataQualityWarningOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CATEGORY = 'CATEGORY'
    ID = 'ID'
    IS_ACTIVE = 'IS_ACTIVE'
    IS_ELEVATED = 'IS_ELEVATED'
    IS_SEVERE = 'IS_SEVERE'
    LUID = 'LUID'
    VALUE = 'VALUE'
    WARNING_TYPE = 'WARNING_TYPE'


class DatabaseOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONNECTION_TYPE = 'CONNECTION_TYPE'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT = 'DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    IS_EMBEDDED = 'IS_EMBEDDED'
    LUID = 'LUID'
    NAME = 'NAME'
    PROJECT_NAME = 'PROJECT_NAME'


class DatabaseServerOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONNECTION_TYPE = 'CONNECTION_TYPE'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT = 'DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    HOST_NAME = 'HOST_NAME'
    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    IS_EMBEDDED = 'IS_EMBEDDED'
    LUID = 'LUID'
    NAME = 'NAME'
    PROJECT_NAME = 'PROJECT_NAME'


class DatabaseTableOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    COLUMNS_COUNT = 'COLUMNS_COUNT'
    CONNECTION_TYPE = 'CONNECTION_TYPE'
    DOWNSTREAM_DASHBOARDS_COUNT = 'DOWNSTREAM_DASHBOARDS_COUNT'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT = 'DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    FULL_NAME = 'FULL_NAME'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    IS_EMBEDDED = 'IS_EMBEDDED'
    LUID = 'LUID'
    NAME = 'NAME'
    PROJECT_NAME = 'PROJECT_NAME'
    SCHEMA = 'SCHEMA'


class DatasourceFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    ID = 'ID'
    IS_HIDDEN = 'IS_HIDDEN'
    NAME = 'NAME'


class DatasourceFilterOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'


class DatasourceOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONTAINS_UNSUPPORTED_CUSTOM_SQL = 'CONTAINS_UNSUPPORTED_CUSTOM_SQL'
    DOWNSTREAM_OWNERS_COUNT = 'DOWNSTREAM_OWNERS_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    NAME = 'NAME'


class EmbeddedDatasourceOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONTAINS_UNSUPPORTED_CUSTOM_SQL = 'CONTAINS_UNSUPPORTED_CUSTOM_SQL'
    DOWNSTREAM_OWNERS_COUNT = 'DOWNSTREAM_OWNERS_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    NAME = 'NAME'


class ExtractType(Enum):
    """
    Possible types of extract
    """

    FULL = 'FULL'
    INCREMENTAL = 'INCREMENTAL'


class FieldDataType(Enum):
    """
    Possible data types for a field.
    """

    BOOLEAN = 'BOOLEAN'
    DATE = 'DATE'
    DATETIME = 'DATETIME'
    INTEGER = 'INTEGER'
    REAL = 'REAL'
    SPATIAL = 'SPATIAL'
    STRING = 'STRING'
    TABLE = 'TABLE'
    TUPLE = 'TUPLE'
    UNKNOWN = 'UNKNOWN'


class FieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    ID = 'ID'
    IS_HIDDEN = 'IS_HIDDEN'
    NAME = 'NAME'


class FieldReferencingFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'


class FieldRole(Enum):
    """
    Possible roles of a field.
    """

    DIMENSION = 'DIMENSION'
    MEASURE = 'MEASURE'
    UNKNOWN = 'UNKNOWN'


class FieldRoleCategory(Enum):
    """
    Possible categories of a field role.
    """

    NOMINAL = 'NOMINAL'
    ORDINAL = 'ORDINAL'
    QUANTITATIVE = 'QUANTITATIVE'
    UNKNOWN = 'UNKNOWN'


class FileOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONNECTION_TYPE = 'CONNECTION_TYPE'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT = 'DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    IS_EMBEDDED = 'IS_EMBEDDED'
    LUID = 'LUID'
    NAME = 'NAME'
    PROJECT_NAME = 'PROJECT_NAME'


class FlowColumnInputFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    NAME = 'NAME'


class FlowColumnOutputFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    NAME = 'NAME'


class FlowFieldInputFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    NAME = 'NAME'


class FlowFieldOutputFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    NAME = 'NAME'


class FlowInputFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    NAME = 'NAME'


class FlowOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONTAINER_NAME = 'CONTAINER_NAME'
    CONTAINS_UNSUPPORTED_CUSTOM_SQL = 'CONTAINS_UNSUPPORTED_CUSTOM_SQL'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'
    PROJECT_NAME = 'PROJECT_NAME'
    VIZPORTAL_URL_ID = 'VIZPORTAL_URL_ID'


class FlowOutputFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    NAME = 'NAME'


class FlowOutputStepOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    NAME = 'NAME'


class GenericLabelOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CATEGORY = 'CATEGORY'
    ID = 'ID'
    IS_ACTIVE = 'IS_ACTIVE'
    IS_ELEVATED = 'IS_ELEVATED'
    LUID = 'LUID'
    VALUE = 'VALUE'


class GroupFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DATA_CATEGORY = 'DATA_CATEGORY'
    DATA_TYPE = 'DATA_TYPE'
    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    IS_HIDDEN = 'IS_HIDDEN'
    NAME = 'NAME'
    ROLE = 'ROLE'


class HierarchyFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    IS_HIDDEN = 'IS_HIDDEN'
    NAME = 'NAME'


class InheritanceType(Enum):
    """
    Method of selecting the objects (i.e., inheritance sources) to inherit from
    """

    FIRST = 'FIRST'


class LabelOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CATEGORY = 'CATEGORY'
    ID = 'ID'
    IS_ACTIVE = 'IS_ACTIVE'
    IS_ELEVATED = 'IS_ELEVATED'
    LUID = 'LUID'
    VALUE = 'VALUE'


class LensFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    NAME = 'NAME'


class LensOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'
    OWNER_COUNT = 'OWNER_COUNT'
    VIZPORTAL_URL_ID = 'VIZPORTAL_URL_ID'


class LinkedFlowOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'


class MetricDefinitionOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'


class MetricOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONTAINER_NAME = 'CONTAINER_NAME'
    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'
    OWNER_COUNT = 'OWNER_COUNT'
    PROJECT_NAME = 'PROJECT_NAME'
    VIZPORTAL_URL_ID = 'VIZPORTAL_URL_ID'


class NodeOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'


class OrderDirection(Enum):
    """
    General object for sorting
    """

    ASC = 'ASC'
    DESC = 'DESC'


class ParameterOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    NAME = 'NAME'
    PARENT_NAME = 'PARENT_NAME'


class PermissionMode(Enum):
    """
    Enum of the different ways to apply permissions.
    """

    FILTER_RESULTS = 'FILTER_RESULTS'
    OBFUSCATE_RESULTS = 'OBFUSCATE_RESULTS'


class PublishedDatasourceOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONTAINER_NAME = 'CONTAINER_NAME'
    CONTAINS_UNSUPPORTED_CUSTOM_SQL = 'CONTAINS_UNSUPPORTED_CUSTOM_SQL'
    DOWNSTREAM_OWNERS_COUNT = 'DOWNSTREAM_OWNERS_COUNT'
    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    FIELDS_COUNT = 'FIELDS_COUNT'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    LUID = 'LUID'
    NAME = 'NAME'
    OWNER_COUNT = 'OWNER_COUNT'
    PROJECT_NAME = 'PROJECT_NAME'
    VIZPORTAL_URL_ID = 'VIZPORTAL_URL_ID'


class RemoteType(Enum):
    """
    Possible types of remote types

    Types correspond to OLEDB types here: https://referencesource.microsoft.com/#system.data/System/Data/OleDb/OLEDB_Enum.cs,364"

    Types prefixed with 'WDC' correspond to Tableau's Web Data Connector types:
    https://tableau.github.io/webdataconnector/docs/api_ref.html#webdataconnectorapi.datatypeenum
    """

    ARRAY = 'ARRAY'
    BOOL = 'BOOL'
    BSTR = 'BSTR'
    BYREF = 'BYREF'
    BYTES = 'BYTES'
    CY = 'CY'
    DATE = 'DATE'
    DBDATE = 'DBDATE'
    DBTIME = 'DBTIME'
    DBTIMESTAMP = 'DBTIMESTAMP'
    DECIMAL = 'DECIMAL'
    EMPTY = 'EMPTY'
    ERROR = 'ERROR'
    FILETIME = 'FILETIME'
    GUID = 'GUID'
    HCHAPTER = 'HCHAPTER'
    I1 = 'I1'
    I2 = 'I2'
    I4 = 'I4'
    I8 = 'I8'
    IDISPATCH = 'IDISPATCH'
    IUNKNOWN = 'IUNKNOWN'
    NULL = 'NULL'
    NUMERIC = 'NUMERIC'
    PROPVARIANT = 'PROPVARIANT'
    R4 = 'R4'
    R8 = 'R8'
    RESERVED = 'RESERVED'
    STR = 'STR'
    UDT = 'UDT'
    UI1 = 'UI1'
    UI2 = 'UI2'
    UI4 = 'UI4'
    UI8 = 'UI8'
    VARIANT = 'VARIANT'
    VARNUMERIC = 'VARNUMERIC'
    VECTOR = 'VECTOR'
    WDC_BOOL = 'WDC_BOOL'
    WDC_DATE = 'WDC_DATE'
    WDC_DATETIME = 'WDC_DATETIME'
    WDC_FLOAT = 'WDC_FLOAT'
    WDC_GEOMETRY = 'WDC_GEOMETRY'
    WDC_INT = 'WDC_INT'
    WDC_STRING = 'WDC_STRING'
    WSTR = 'WSTR'


class SetFieldOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DOWNSTREAM_SHEETS_COUNT = 'DOWNSTREAM_SHEETS_COUNT'
    FIELDS_COUNT = 'FIELDS_COUNT'
    ID = 'ID'
    IS_HIDDEN = 'IS_HIDDEN'
    NAME = 'NAME'


class SheetOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DATASOURCE_FIELDS_COUNT = 'DATASOURCE_FIELDS_COUNT'
    DOCUMENT_VIEW_ID = 'DOCUMENT_VIEW_ID'
    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'
    PATH = 'PATH'
    SHEET_FIELD_INSTANCES_COUNT = 'SHEET_FIELD_INSTANCES_COUNT'
    WORKSHEET_FIELDS_COUNT = 'WORKSHEET_FIELDS_COUNT'


class TableAdditionalDetailsOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'


class TableOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    COLUMNS_COUNT = 'COLUMNS_COUNT'
    DOWNSTREAM_DASHBOARDS_COUNT = 'DOWNSTREAM_DASHBOARDS_COUNT'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    ID = 'ID'
    NAME = 'NAME'


class TableType(Enum):
    """
    Possible types of table.

    TableType is DATABASETABLE unless the object is a Salesforce Data Cloud object. A Salesforce Data Cloud object's TableType is DATAMODEL, DATALAKE, or CALCULATED INSIGHT.

    *Available in Tableau Cloud February 2024 / Server 2024.2 and later.*
    """

    CALCULATEDINSIGHT = 'CALCULATEDINSIGHT'
    DATABASETABLE = 'DATABASETABLE'
    DATALAKE = 'DATALAKE'
    DATAMODEL = 'DATAMODEL'


class TableauSiteOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'


class TableauUserOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DOMAIN = 'DOMAIN'
    EMAIL = 'EMAIL'
    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'
    USERNAME = 'USERNAME'


class TagOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    NAME = 'NAME'


class TaggableOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    ID = 'ID'
    LUID = 'LUID'


class ViewOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    DOCUMENT_VIEW_ID = 'DOCUMENT_VIEW_ID'
    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'
    PATH = 'PATH'


class VirtualConnectionOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONNECTION_TYPE = 'CONNECTION_TYPE'
    CONTAINER_NAME = 'CONTAINER_NAME'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    LUID = 'LUID'
    NAME = 'NAME'
    OWNER_COUNT = 'OWNER_COUNT'
    PROJECT_NAME = 'PROJECT_NAME'
    VIZPORTAL_URL_ID = 'VIZPORTAL_URL_ID'


class VirtualConnectionTableOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    COLUMNS_COUNT = 'COLUMNS_COUNT'
    CONTAINS_UNSUPPORTED_CUSTOM_SQL = 'CONTAINS_UNSUPPORTED_CUSTOM_SQL'
    DOWNSTREAM_DASHBOARDS_COUNT = 'DOWNSTREAM_DASHBOARDS_COUNT'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    EXTRACT_LAST_REFRESHED_AT = 'EXTRACT_LAST_REFRESHED_AT'
    EXTRACT_LAST_REFRESH_TYPE = 'EXTRACT_LAST_REFRESH_TYPE'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    IS_EXTRACTED = 'IS_EXTRACTED'
    LUID = 'LUID'
    NAME = 'NAME'
    OWNER_COUNT = 'OWNER_COUNT'
    VIZPORTAL_URL_ID = 'VIZPORTAL_URL_ID'


class WarnableOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    LUID = 'LUID'


class WebDataConnectorOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONNECTION_TYPE = 'CONNECTION_TYPE'
    DOWNSTREAM_DATASOURCES_COUNT = 'DOWNSTREAM_DATASOURCES_COUNT'
    DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT = 'DOWNSTREAM_VIRTUAL_CONNECTIONS_COUNT'
    DOWNSTREAM_WORKBOOKS_COUNT = 'DOWNSTREAM_WORKBOOKS_COUNT'
    HAS_ACTIVE_WARNING = 'HAS_ACTIVE_WARNING'
    ID = 'ID'
    IS_CERTIFIED = 'IS_CERTIFIED'
    IS_EMBEDDED = 'IS_EMBEDDED'
    LUID = 'LUID'
    NAME = 'NAME'
    PROJECT_NAME = 'PROJECT_NAME'


class WorkbookOrderField(Enum):
    """
    Enum for fields that can be used for sorting
    """

    CONTAINER_NAME = 'CONTAINER_NAME'
    CONTAINS_UNSUPPORTED_CUSTOM_SQL = 'CONTAINS_UNSUPPORTED_CUSTOM_SQL'
    DASHBOARDS_COUNT = 'DASHBOARDS_COUNT'
    EMBEDDED_DATASOURCES_COUNT = 'EMBEDDED_DATASOURCES_COUNT'
    ID = 'ID'
    LUID = 'LUID'
    NAME = 'NAME'
    OWNER_COUNT = 'OWNER_COUNT'
    PROJECT_LUID = 'PROJECT_LUID'
    PROJECT_NAME = 'PROJECT_NAME'
    SHEETS_COUNT = 'SHEETS_COUNT'
    VIEWS_COUNT = 'VIEWS_COUNT'
    VIZPORTAL_URL_ID = 'VIZPORTAL_URL_ID'


class AnalyticsField(BaseModel):
    """
    Base GraphQL type for a field containing analytics metadata
    """

    aggregation: Optional[String] = Field(
        None,
        description="Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs",
    )
    aggregationParam: Optional[String] = Field(
        None, description='For the percentile aggregation, the percentile number'
    )
    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    defaultFormat: Optional[String] = Field(
        None, description='Default format for number or date'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    semanticRole: Optional[String] = Field(
        None,
        description='For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html',
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    typename__: Optional[Literal['AnalyticsField']] = Field(
        'AnalyticsField', alias='__typename'
    )


class CanHaveLabels(BaseModel):
    """
    A content item that can have labels.
    *Available in Tableau Cloud March 2023 / Server 2023.1 and later.*
    """

    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a content item. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a content item. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='The name of the asset')
    typename__: Optional[Literal['CanHaveLabels']] = Field(
        'CanHaveLabels', alias='__typename'
    )


class Certifiable(BaseModel):
    """
    A content item that can be certified
    """

    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a content item'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(None, description='The data quality certifications on a content item')
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this content item contains an active data quality certification',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='The name of the asset')
    typename__: Optional[Literal['Certifiable']] = Field(
        'Certifiable', alias='__typename'
    )


class DataField(BaseModel):
    """
    Base GraphQL type for a field containing data. Most types of Fields will implement this interface with exceptions like HierarchyField.
    """

    dataCategory: Optional[FieldRoleCategory] = Field(
        None, description='Data category of the field'
    )
    dataType: Optional[FieldDataType] = Field(
        None,
        description='Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html',
    )
    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    role: Optional[FieldRole] = Field(
        None, description="Role of the field: 'dimension', 'measure' or 'unknown'"
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    typename__: Optional[Literal['DataField']] = Field('DataField', alias='__typename')


class Database(BaseModel):
    """
    A database containing tables
    """

    certificationNote: Optional[String] = Field(
        None, description='Notes related to this database being marked as certified'
    )
    certifier: Optional[TableauUser] = Field(
        None, description='User who marked this database as certified'
    )
    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    contact: Optional[TableauUser] = Field(
        None, description='Contact for this database'
    )
    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a database'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(None, description='The data quality certifications on a database')
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on a database'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a database'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a database'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this database'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected to the database'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected to the database'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this database'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this database'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources connected to the database'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources connected to the database'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this database'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this database'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses connected to the database'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected to the database'
    )
    downstreamMetricDefinitions: List[Optional[MetricDefinition]] = Field(
        ..., description='Metric definitions downstream from this database.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this database.')
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics connected to the database'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected to the database'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners connected to the database'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners connected to the database'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected to the database'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected to the database'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this database'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this database'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this database')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables downstream of this database')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks connected to the database'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected to the database'
    )
    hasActiveWarning: Boolean = Field(
        ..., description='True if the database has an active data quality warning'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this database contains an active data quality certification',
    )
    isControlledPermissionsEnabled: Optional[Boolean] = Field(
        None, description='True if this database has its permission locked'
    )
    isEmbedded: Optional[Boolean] = Field(
        None,
        description='True if this database is embedded in Tableau content, e.g., a packaged workbook',
    )
    isGrouped: Optional[Boolean] = Field(
        None, description='True if this database has been grouped with other databases'
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    referencedByQueries: Optional[List[Optional[CustomSQLTable]]] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    referencedByQueriesConnection: Optional[CustomSQLTablesConnection] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    tables: Optional[List[Optional[DatabaseTable]]] = Field(
        None, description='Tables belonging to this database'
    )
    tablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables belonging to this database'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the database')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the database'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this database'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this database')
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this database'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this database'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this database'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this database'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows upstream of this database'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this database'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this database'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this database'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this database')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables upstream of this database')
    )
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this database, for use in client-to-server communications',
    )
    typename__: Optional[Literal['Database']] = Field('Database', alias='__typename')


class Datasource(BaseModel):
    """
    Root GraphQL type for embedded and published data sources

    Data sources are a way to represent how Tableau Desktop and Tableau Server model and connect to data. Data sources can be published separately, as a published data source, or may be contained in a workbook as an embedded data source.

    See https://onlinehelp.tableau.com/current/server/en-us/datasource.htm
    """

    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    createdAt: Optional[DateTime] = Field(
        None,
        description='Time the datasource was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    datasourceFilters: List[DatasourceFilter] = Field(
        ..., description='Data source filters contained in this data source'
    )
    datasourceFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='Data source filters contained in this data source'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards downstream from this data source'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards downstream from this data source'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Workbook owners downstream from this data source'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Workbook owners downstream from this data source'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets downstream from this data source'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets downstream from this data source'
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks downstream from this data source'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks downstream from this data source'
    )
    extractLastIncrementalUpdateTime: Optional[DateTime] = Field(
        None, description='Time an extract was last incrementally updated'
    )
    extractLastRefreshTime: Optional[DateTime] = Field(
        None, description='Time an extract was last fully refreshed'
    )
    extractLastUpdateTime: Optional[DateTime] = Field(
        None,
        description='Time an extract was last updated by either a full refresh, incremental update, or creation',
    )
    fields: List[Field] = Field(
        ..., description='Fields usable in workbooks connected to this data source'
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='Fields usable in workbooks connected to this data source'
    )
    hasExtracts: Optional[Boolean] = Field(
        None, description='True if datasource contains extracted data'
    )
    hasUserReference: Optional[Boolean] = Field(
        None,
        description='True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)',
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    lenses: Optional[List[Optional[Lens]]] = Field(
        None, description='The lenses derived from this datasource'
    )
    lensesConnection: Optional[LensesConnection] = Field(
        None, description='The lenses derived from this datasource'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    updatedAt: Optional[DateTime] = Field(
        None,
        description='Time the datasource was last updated. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream from this data source'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream from this data source'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream from this data source'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream from this data source'
    )
    typename__: Optional[Literal['Datasource']] = Field(
        'Datasource', alias='__typename'
    )


class FieldModel(BaseModel):
    """
    Base GraphQL type for a field
    """

    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    description: Optional[String] = Field(
        None, description='Description of field shown in server and desktop clients'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream of this field'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream of this field'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this field'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this field'
    )
    downstreamDatasources: Optional[List[PublishedDatasource]] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamFields: List[Field] = Field(
        ..., description='Downstream fields that reference this field'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='Downstream fields that reference this field'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this field'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this field'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this field.')
    )
    downstreamMetrics: Optional[List[Metric]] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamOwners: Optional[List[TableauUser]] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected downstream from the field'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected downstream from the field'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this field'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this field'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this field'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this field')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this field'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this field')
    )
    downstreamWorkbooks: Optional[List[Workbook]] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    folderName: Optional[String] = Field(
        None,
        description='Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize',
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    name: Optional[String] = Field(None, description='Name shown in server')
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this field references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this field references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this field'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this field'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this field'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this field'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this field')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this field'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this field')
    )
    typename__: Optional[Literal['Field']] = Field('Field', alias='__typename')


class FieldReferencingField(BaseModel):
    """
    Base GraphQL type for a field that references another field. For example, a CalculatedField can reference a ColumnField in its formula.
    """

    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    fields: List[Field] = Field(..., description='Fields referenced by this field')
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='Fields referenced by this field'
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    typename__: Optional[Literal['FieldReferencingField']] = Field(
        'FieldReferencingField', alias='__typename'
    )


class FlowInputField(BaseModel):
    """
    A wrapper for an input field contained in a published flow.
    """

    childFields: List[FlowOutputField] = Field(
        ..., description='Fields that are children of this field'
    )
    childFieldsConnection: Optional[FlowOutputFieldsConnection] = Field(
        None, description='Fields that are children of this field'
    )
    flow: Optional[Flow] = Field(None, description='A flow to which these fields input')
    id: ID = Field(..., description='Unique identifier used by the metadata API')
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases that are upstream from this inputField.'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are upstream from this inputField.'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Flows that are upstream from this inputField.'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Flows that are upstream from this inputField.'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows that are upstream from this inputField.'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are upstream from this inputField.'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are upstream of this field.'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are upstream of this field.'
    )
    typename__: Optional[Literal['FlowInputField']] = Field(
        'FlowInputField', alias='__typename'
    )


class FlowOutputField(BaseModel):
    """
    A wrapper for an output field contained in a published flow.
    """

    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards that are downstream from this outputField'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards that are downstream from this outputField'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases that are downstream from this outputField'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are downstream from this outputField'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources that are downstream from this outputField'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources that are downstream from this outputField'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows that are downstream from this outputField'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are downstream from this outputField'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses that are downstream from this outputField'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses that are downstream from this outputField'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this flow output field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(
            None,
            description='Metric definitions downstream from this flow output field.',
        )
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics that are downstream from this outputField'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics that are downstream from this outputField'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners that are downstream from this outputField'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners that are downstream from this outputField'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets that are downstream from this outputField'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that are downstream from this outputField'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are downstream from this outputField'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are downstream from this outputField'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ...,
        description='VirtualConnectionTables that are downstream of this outputField',
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None,
        description='VirtualConnectionTables that are downstream of this outputField',
    )
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='VirtualConnections that are downstream of this outputField'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(
            None,
            description='VirtualConnections that are downstream of this outputField',
        )
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks that are downstream from this outputField'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks that are downstream from this outputField'
    )
    flow: Optional[List[Optional[Flow]]] = Field(
        None, description='The flow that outputs these fields'
    )
    flowConnection: Optional[FlowsConnection] = Field(
        None, description='The flow that outputs these fields'
    )
    flowOutputStep: Optional[FlowOutputStep] = Field(
        None, description='The flow output step that contains this field'
    )
    id: ID = Field(..., description='Unique identifier used by the metadata API')
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    parentFields: List[FlowInputField] = Field(
        ..., description='Fields that are parents of this field'
    )
    parentFieldsConnection: Optional[FlowInputFieldsConnection] = Field(
        None, description='Fields that are parents of this field'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases that are upstream from this outputField'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are upstream from this outputField'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources that are upstream from this outputField'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources that are upstream from this outputField'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows that are upstream from this outputField.'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are upstream from this outputField.'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are upstream from this outputField'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are upstream from this outputField'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='VirtualConnectionTables that are upstream of this outputField'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None,
        description='VirtualConnectionTables that are upstream of this outputField',
    )
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='VirtualConnections that are upstream of this outputField'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(
            None, description='VirtualConnections that are upstream of this outputField'
        )
    )
    typename__: Optional[Literal['FlowOutputField']] = Field(
        'FlowOutputField', alias='__typename'
    )


class Label(BaseModel):
    """
    A label that can be attached to assets.
    *Available in Tableau Cloud March 2023 / Server 2023.1 and later.*
    """

    asset: Optional[CanHaveLabels] = Field(
        None, description='The asset that contains the label'
    )
    author: Optional[TableauUser] = Field(
        None, description='User who last updated this label'
    )
    authorDisplayName: Optional[String] = Field(
        None, description='Name of the user who last updated this label'
    )
    category: String = Field(..., description='Category of the label')
    createdAt: DateTime = Field(..., description='Time the label was created')
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    isActive: Boolean = Field(..., description='True if the label is active')
    isElevated: Boolean = Field(..., description='True if the label is elevated')
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    message: Optional[String] = Field(None, description='Message of the label')
    updatedAt: DateTime = Field(..., description='Time the label was last updated')
    value: String = Field(..., description='Value of the label')
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this label, for use in client-to-server communications',
    )
    typename__: Optional[Literal['Label']] = Field('Label', alias='__typename')


class Node(BaseModel):
    """
    Inheritance target
    """

    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    typename__: Optional[Literal['Node']] = Field('Node', alias='__typename')


class Table(BaseModel):
    """
    A table containing columns
    """

    columns: List[Column] = Field(..., description='Columns contained in this table')
    columnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns contained in this table'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this table'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected to the table'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected to the table'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this table'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this table'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources connected to the table'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources connected to the table'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this table'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this table'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses connected downstream from the table'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from the table'
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics connected to the table'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected to the table'
    )
    downstreamOwners: List[TableauUser] = Field(
        ...,
        description='Owners of workbooks and published datasources connected to the table',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Owners of workbooks and published datasources connected to the table',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected to the table'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected to the table'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this table'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this table'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this table'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this table')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection downstream of this table'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection downstream of this table')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks connected to the table'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected to the table'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isEmbedded: Optional[Boolean] = Field(
        None,
        description='True if this table is embedded in Tableau content, e.g., a packaged workbook',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this table'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this table'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this table'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this table'
    )
    upstreamFlows: List[Flow] = Field(..., description='Flows upstream of this table')
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this table'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this table'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this table'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this table'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this table')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this table'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this table')
    )
    typename__: Optional[Literal['Table']] = Field('Table', alias='__typename')


class Taggable(BaseModel):
    """
    A content item that has a list of tags
    """

    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='The name of the asset')
    tags: List[Tag] = Field(..., description='Tags associated with the content item')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the content item'
    )
    typename__: Optional[Literal['Taggable']] = Field('Taggable', alias='__typename')


class View(BaseModel):
    """
    A view contained in a published workbook. Views can be sheets or dashboards.
    """

    createdAt: DateTime = Field(..., description='Time the view was created')
    documentViewId: Optional[String] = Field(
        None,
        description='Unique ID for the view generated for and stored within the workbook, survives renames, and is used for internal processes',
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    index: Optional[Int] = Field(
        None, description='Index of view; the order it appears in the workbook'
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server (Blank if sheet is hidden in Workbook)',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    path: Optional[String] = Field(None, description='Server path to view')
    referencedByMetrics: Optional[List[Optional[Metric]]] = Field(
        None, description='The Metrics that reference this View'
    )
    referencedByMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='The Metrics that reference this View'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the view')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the view'
    )
    updatedAt: DateTime = Field(..., description='Time the view was updated')
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this view'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this view')
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this view. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this view. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    workbook: Optional[Workbook] = Field(
        None, description='The workbook that contains this view'
    )
    typename__: Optional[Literal['View']] = Field('View', alias='__typename')


class Warnable(BaseModel):
    """
    A content item that can have data quality warnings
    """

    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on a content item'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a content item'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a content item'
    )
    hasActiveWarning: Boolean = Field(
        ..., description='True if the content has an active data quality warning'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='The name of the asset')
    typename__: Optional[Literal['Warnable']] = Field('Warnable', alias='__typename')


class AnalyticsFieldsConnection(BaseModel):
    """
    Connection Type for AnalyticsField
    """

    nodes: List[AnalyticsField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['AnalyticsFieldsConnection']] = Field(
        'AnalyticsFieldsConnection', alias='__typename'
    )


class AskDataExtension(BaseModel):
    """
    AskDataExtensions to base Tableau functionality.
    """

    dashboard: Optional[Dashboard] = Field(
        None, description='The dashboard that contains this askData extension'
    )
    id: ID = Field(..., description='Unique identifier used by the metadata API')
    lens: Optional[Lens] = Field(
        None, description='Lens configured for the askData extension'
    )
    typename__: Optional[Literal['AskDataExtension']] = Field(
        'AskDataExtension', alias='__typename'
    )


class AskDataExtensionsConnection(BaseModel):
    """
    Connection Type for AskDataExtension
    """

    nodes: List[AskDataExtension] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['AskDataExtensionsConnection']] = Field(
        'AskDataExtensionsConnection', alias='__typename'
    )


class BinField(DataField, FieldModel, FieldReferencingField, Node):
    """
    GraphQL type for a binned continuous measure field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_bins.html
    """

    binSize: Optional[String] = Field(None, description='Size of the bin')
    dataCategory: Optional[FieldRoleCategory] = Field(
        None, description='Data category of the field'
    )
    dataType: Optional[FieldDataType] = Field(
        None,
        description='Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html',
    )
    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    description: Optional[String] = Field(
        None, description='Description of field shown in server and desktop clients'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream of this field'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream of this field'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this field'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this field'
    )
    downstreamDatasources: Optional[List[PublishedDatasource]] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamFields: List[Field] = Field(
        ..., description='downstream fields that reference this field'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='downstream fields that reference this field'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this field'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this field'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this field.')
    )
    downstreamMetrics: Optional[List[Metric]] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamOwners: Optional[List[TableauUser]] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected downstream from the field'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected downstream from the field'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this field'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this field'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this field'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this field')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this field'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this field')
    )
    downstreamWorkbooks: Optional[List[Workbook]] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    fields: List[Field] = Field(
        ..., description='List of fields, if any, that this field references'
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='List of fields, if any, that this field references'
    )
    folderName: Optional[String] = Field(
        None,
        description='Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize',
    )
    formula: Optional[String] = Field(
        None, description='Formula of the calculated field'
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    parameters: List[Parameter] = Field(
        ..., description='List of parameters, if any, used in this field'
    )
    parametersConnection: Optional[ParametersConnection] = Field(
        None, description='List of parameters, if any, used in this field'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    role: Optional[FieldRole] = Field(
        None, description="Role of the field: 'dimension', 'measure' or 'unknown'"
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this field references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this field references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources connected upstream from the field'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected upstream from the field'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this field'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this field'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this field')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this field'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this field')
    )
    typename__: Optional[Literal['BinField']] = Field('BinField', alias='__typename')


class BinFieldsConnection(BaseModel):
    """
    Connection Type for BinField
    """

    nodes: List[BinField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['BinFieldsConnection']] = Field(
        'BinFieldsConnection', alias='__typename'
    )


class CalculatedField(
    AnalyticsField, DataField, FieldModel, FieldReferencingField, Node
):
    """
    GraphQL type for a calculated field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_calculatedfields.html
    """

    aggregation: Optional[String] = Field(
        None,
        description="Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs",
    )
    aggregationParam: Optional[String] = Field(
        None, description='For the percentile aggregation, the percentile number'
    )
    dataCategory: Optional[FieldRoleCategory] = Field(
        None, description='Data category of the field'
    )
    dataType: Optional[FieldDataType] = Field(
        None,
        description='Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html',
    )
    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    defaultFormat: Optional[String] = Field(
        None, description='Default format for number or date'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    description: Optional[String] = Field(
        None, description='Description of field shown in server and desktop clients'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream of this field'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream of this field'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this field'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this field'
    )
    downstreamDatasources: Optional[List[PublishedDatasource]] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamFields: List[Field] = Field(
        ..., description='downstream fields that reference this field'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='downstream fields that reference this field'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this field'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this field'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this field.')
    )
    downstreamMetrics: Optional[List[Metric]] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamOwners: Optional[List[TableauUser]] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected downstream from the field'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected downstream from the field'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this field'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this field'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this field'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this field')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this field'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this field')
    )
    downstreamWorkbooks: Optional[List[Workbook]] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    fields: List[Field] = Field(
        ..., description='List of fields, if any, that this field references'
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='List of fields, if any, that this field references'
    )
    folderName: Optional[String] = Field(
        None,
        description='Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize',
    )
    formula: Optional[String] = Field(
        None, description='Formula of the calculated field'
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    hasUserReference: Optional[Boolean] = Field(
        None,
        description='True if field formula that involves a user function (for example, USERNAME or ISMEMBEROF)',
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isAutoGenerated: Optional[Boolean] = Field(
        None,
        description='True if Tableau automatically created this field. A list of autogenerated fields are here: https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_understanddatawindow.html#AutoFields',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    parameters: List[Parameter] = Field(
        ..., description='List of parameters, if any, used in this field'
    )
    parametersConnection: Optional[ParametersConnection] = Field(
        None, description='List of parameters, if any, used in this field'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    role: Optional[FieldRole] = Field(
        None, description="Role of the field: 'dimension', 'measure' or 'unknown'"
    )
    semanticRole: Optional[String] = Field(
        None,
        description='For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html',
    )
    sheet: Optional[Sheet] = Field(
        None, description='Sheet that contains this calculated field'
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this field references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this field references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources connected upstream from the field'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected upstream from the field'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this field'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this field'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this field')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this field'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this field')
    )
    typename__: Optional[Literal['CalculatedField']] = Field(
        'CalculatedField', alias='__typename'
    )


class CalculatedFieldsConnection(BaseModel):
    """
    Connection Type for CalculatedField
    """

    nodes: List[CalculatedField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['CalculatedFieldsConnection']] = Field(
        'CalculatedFieldsConnection', alias='__typename'
    )


class CanHaveLabelsesConnection(BaseModel):
    """
    Connection Type for CanHaveLabels
    """

    nodes: List[CanHaveLabels] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['CanHaveLabelsesConnection']] = Field(
        'CanHaveLabelsesConnection', alias='__typename'
    )


class CertifiablesConnection(BaseModel):
    """
    Connection Type for Certifiable
    """

    nodes: List[Certifiable] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['CertifiablesConnection']] = Field(
        'CertifiablesConnection', alias='__typename'
    )


class CloudFile(CanHaveLabels, Certifiable, Database, Taggable, Warnable):
    """
    A cloud file connection
    """

    certificationNote: Optional[String] = Field(
        None, description='Notes related to this database being marked as certified'
    )
    certifier: Optional[TableauUser] = Field(
        None, description='User who marked this database as certified'
    )
    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    contact: Optional[TableauUser] = Field(
        None, description='Contact for this database'
    )
    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a database'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(None, description='The data quality certifications on a database')
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on a database'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a database'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a database'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this database'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected to the database'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected to the database'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this database'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this database'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources connected to the database'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources connected to the database'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this database'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this database'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses connected to the database'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected to the database'
    )
    downstreamMetricDefinitions: List[Optional[MetricDefinition]] = Field(
        ..., description='Metric definitions downstream from this database.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this database.')
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics connected to the database'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected to the database'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners connected to the database'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners connected to the database'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected to the database'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected to the database'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this database'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this database'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this database')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables downstream of this database')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks connected to the database'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected to the database'
    )
    fileExtension: Optional[String] = Field(None, description='The file extension')
    fileId: Optional[String] = Field(
        None,
        description='The ID used by the provider for the cloud file. Each provider uses IDs in a different format.',
    )
    hasActiveWarning: Boolean = Field(
        ..., description='True if the database has an active data quality warning'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this database contains an active data quality certification',
    )
    isControlledPermissionsEnabled: Optional[Boolean] = Field(
        None, description='True if this database has its permission locked'
    )
    isEmbedded: Optional[Boolean] = Field(
        None,
        description='True if this file is embedded in Tableau content, e.g., a packaged workbook',
    )
    isGrouped: Optional[Boolean] = Field(
        None, description='True if this database has been grouped with other databases'
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    mimeType: Optional[String] = Field(None, description='The MIME type')
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    provider: Optional[String] = Field(
        None,
        description='The provider of the cloud file, e.g., onedrive, google-sheets, dropbox, and box',
    )
    referencedByQueries: Optional[List[Optional[CustomSQLTable]]] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    referencedByQueriesConnection: Optional[CustomSQLTablesConnection] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    requestUrl: Optional[String] = Field(
        None, description='URL for requesting the cloud file'
    )
    tables: Optional[List[Optional[DatabaseTable]]] = Field(
        None, description='Tables belonging to this database'
    )
    tablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables belonging to this database'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the database')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the database'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this database'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this database')
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this database'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this database'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this database'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this database'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows upstream of this database'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this database'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this database'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this database'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this database')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables upstream of this database')
    )
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this database, for use in client-to-server communications',
    )
    typename__: Optional[Literal['CloudFile']] = Field('CloudFile', alias='__typename')


class CloudFilesConnection(BaseModel):
    """
    Connection Type for CloudFile
    """

    nodes: List[CloudFile] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['CloudFilesConnection']] = Field(
        'CloudFilesConnection', alias='__typename'
    )


class Column(CanHaveLabels, Node, Taggable, Warnable):
    """
    GraphQL type for a table column
    """

    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on this column.'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ...,
        description='The data quality warnings on this column. Available in Tableau Cloud October 2022 / Server 2022.3 and later.',
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None,
        description='The data quality warnings on this column. Available in Tableau Cloud October 2022 / Server 2022.3 and later.',
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this column'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    displayName: Optional[String] = Field(
        None, description='Optional display name for column'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream from the column'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream from the column'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards downstream from the column'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards downstream from the column'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream from the column'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream from the column'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources downstream from the column'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources downstream from the column'
    )
    downstreamFields: List[Field] = Field(
        ..., description='Fields downstream from the column'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='Fields downstream from the column'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream from the column'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream from the column'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses downstream from the column'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses downstream from the column'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from the column.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from the column.')
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics downstream from the column'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics downstream from the column'
    )
    downstreamOwners: List[TableauUser] = Field(
        ...,
        description='Owners of workbooks and published datasources downstream from the column',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Owners of workbooks and published datasources downstream from the column',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets downstream from the column'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets downstream from the column'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream from the column'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream from the column'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream from the column'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream from the column')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream from the column'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream from the column')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks downstream from the column'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks downstream from the column'
    )
    hasActiveWarning: Boolean = Field(
        ...,
        description='True if this column has an active data quality warning. Available in Tableau Cloud October 2022 / Server 2022.3 and later.',
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isNullable: Optional[Boolean] = Field(
        None, description='True if this column may contain null values'
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on this column.  Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on this column.  Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='Name of column')
    referencedByFields: Optional[List[Optional[ColumnField]]] = Field(
        None, description='The column field that references this column'
    )
    referencedByFieldsConnection: Optional[ColumnFieldsConnection] = Field(
        None, description='The column field that references this column'
    )
    referencedByFlowColumnInputField: Optional[List[Optional[FlowColumnInputField]]] = (
        Field(None, description='A flow input field that wraps this column')
    )
    referencedByFlowColumnInputFieldConnection: Optional[
        FlowColumnInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this column')
    referencedByFlowColumnOutputField: Optional[
        List[Optional[FlowColumnOutputField]]
    ] = Field(None, description='A flow output field that wraps this column')
    referencedByFlowColumnOutputFieldConnection: Optional[
        FlowColumnOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this column')
    referencedByRemoteColumn: Optional[List[Optional[Column]]] = Field(
        None, description='A column that logically represents this column.'
    )
    referencedByRemoteColumnConnection: Optional[ColumnsConnection] = Field(
        None, description='A column that logically represents this column.'
    )
    remoteColumn: Optional[Column] = Field(
        None, description='A column that this column logically represents.'
    )
    remoteType: RemoteType = Field(
        ...,
        description='Remote type on the database. Types correspond to OLEDB types here: https://referencesource.microsoft.com/#system.data/System/Data/OleDb/OLEDB_Enum.cs,364',
    )
    table: Optional[Table] = Field(
        None, description='The table that this column belongs to'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the column')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the column'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this column references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this column references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream from the Table'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream from the Table'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream from this column'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream from this column'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this column'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this column'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the column'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the column'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream from the column'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream from the column'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream from the column'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream from the column')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream from the column'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream from the column')
    )
    vizportalId: Optional[String] = Field(
        None,
        description='Vizportal ID of this column, for use in client-to-server communications',
    )
    typename__: Optional[Literal['Column']] = Field('Column', alias='__typename')


class ColumnField(AnalyticsField, DataField, FieldModel, Node):
    """
    ColumnFields are a type of field which directly connects to a column in some type of table.
    """

    aggregation: Optional[String] = Field(
        None,
        description="Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs",
    )
    aggregationParam: Optional[String] = Field(
        None, description='For the percentile aggregation, the percentile number'
    )
    columns: List[Column] = Field(
        ..., description='List of columns, if any, that this field references'
    )
    columnsConnection: Optional[ColumnsConnection] = Field(
        None, description='List of columns, if any, that this field references'
    )
    dataCategory: Optional[FieldRoleCategory] = Field(
        None, description='Data category of the field'
    )
    dataType: Optional[FieldDataType] = Field(
        None,
        description='Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html',
    )
    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    defaultFormat: Optional[String] = Field(
        None, description='Default format for number or date'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    description: Optional[String] = Field(
        None, description='Description of field shown in server and desktop clients'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream of this field'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream of this field'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this field'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this field'
    )
    downstreamDatasources: Optional[List[PublishedDatasource]] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamFields: List[Field] = Field(
        ..., description='downstream fields that reference this field'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='downstream fields that reference this field'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this field'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this field'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this field.')
    )
    downstreamMetrics: Optional[List[Metric]] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamOwners: Optional[List[TableauUser]] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected downstream from the field'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected downstream from the field'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this field'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this field'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this field'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this field')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this field'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this field')
    )
    downstreamWorkbooks: Optional[List[Workbook]] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    folderName: Optional[String] = Field(
        None,
        description='Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize',
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    role: Optional[FieldRole] = Field(
        None, description="Role of the field: 'dimension', 'measure' or 'unknown'"
    )
    semanticRole: Optional[String] = Field(
        None,
        description='For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html',
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this field references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this field references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources connected upstream from the field'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected upstream from the field'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this field'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this field'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this field')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this field'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this field')
    )
    typename__: Optional[Literal['ColumnField']] = Field(
        'ColumnField', alias='__typename'
    )


class ColumnFieldsConnection(BaseModel):
    """
    Connection Type for ColumnField
    """

    nodes: List[ColumnField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['ColumnFieldsConnection']] = Field(
        'ColumnFieldsConnection', alias='__typename'
    )


class ColumnsConnection(BaseModel):
    """
    Connection Type for Column
    """

    nodes: List[Column] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['ColumnsConnection']] = Field(
        'ColumnsConnection', alias='__typename'
    )


class CombinedField(FieldModel, FieldReferencingField, Node):
    """
    GraphQL type for a combined field. Combined fields concatanate fields together into one string.
    """

    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    description: Optional[String] = Field(
        None, description='Description of field shown in server and desktop clients'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream of this field'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream of this field'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this field'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this field'
    )
    downstreamDatasources: Optional[List[PublishedDatasource]] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamFields: List[Field] = Field(
        ..., description='downstream fields that reference this field'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='downstream fields that reference this field'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this field'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this field'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this field.')
    )
    downstreamMetrics: Optional[List[Metric]] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamOwners: Optional[List[TableauUser]] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected downstream from the field'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected downstream from the field'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this field'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this field'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this field'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this field')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this field'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this field')
    )
    downstreamWorkbooks: Optional[List[Workbook]] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    fields: List[Field] = Field(
        ..., description='List of fields, if any, that this field references'
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='List of fields, if any, that this field references'
    )
    folderName: Optional[String] = Field(
        None,
        description='Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize',
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this field references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this field references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources connected upstream from the field'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected upstream from the field'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this field'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this field'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this field')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this field'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this field')
    )
    typename__: Optional[Literal['CombinedField']] = Field(
        'CombinedField', alias='__typename'
    )


class CombinedFieldsConnection(BaseModel):
    """
    Connection Type for CombinedField
    """

    nodes: List[CombinedField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['CombinedFieldsConnection']] = Field(
        'CombinedFieldsConnection', alias='__typename'
    )


class CombinedSetField(FieldModel, FieldReferencingField, Node):
    """
    GraphQL type for a combined set field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_sets_create.html#Combine
    """

    combinationType: Optional[String] = Field(
        None,
        description="How the sets are combined. 'All Members in Both Sets', 'Shared Members in Both Sets', or 'Except Shared Members'",
    )
    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    delimiter: Optional[String] = Field(
        None,
        description="Delimiter used to separate members of the two sets. Usually ',' or ';'",
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    description: Optional[String] = Field(
        None, description='Description of field shown in server and desktop clients'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream of this field'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream of this field'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this field'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this field'
    )
    downstreamDatasources: Optional[List[PublishedDatasource]] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamFields: List[Field] = Field(
        ..., description='downstream fields that reference this field'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='downstream fields that reference this field'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this field'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this field'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this field.')
    )
    downstreamMetrics: Optional[List[Metric]] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamOwners: Optional[List[TableauUser]] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected downstream from the field'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected downstream from the field'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this field'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this field'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this field'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this field')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this field'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this field')
    )
    downstreamWorkbooks: Optional[List[Workbook]] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    fields: List[Field] = Field(
        ..., description='List of fields, if any, that this field references'
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='List of fields, if any, that this field references'
    )
    folderName: Optional[String] = Field(
        None,
        description='Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize',
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this field references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this field references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources connected upstream from the field'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected upstream from the field'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this field'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this field'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this field')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this field'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this field')
    )
    typename__: Optional[Literal['CombinedSetField']] = Field(
        'CombinedSetField', alias='__typename'
    )


class CombinedSetFieldsConnection(BaseModel):
    """
    Connection Type for CombinedSetField
    """

    nodes: List[CombinedSetField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['CombinedSetFieldsConnection']] = Field(
        'CombinedSetFieldsConnection', alias='__typename'
    )


class CustomSQLTable(Table):
    """
    A table that represents the result of evaluating a custom SQL query. These "tables" are owned by the Tableau data source (embedded or published) which contains the SQL query, so they only exist within that data source.
    """

    columns: List[Column] = Field(..., description='Columns contained in this table')
    columnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns contained in this table'
    )
    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    database: Optional[Database] = Field(
        None, description='Database this query is executed on'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this table'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected to the table'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected to the table'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this table'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this table'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources connected to the table'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources connected to the table'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this table'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this table'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses connected downstream from the table'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from the table'
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics connected downstream from the table'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the table'
    )
    downstreamOwners: List[TableauUser] = Field(
        ...,
        description='Owners of workbooks and published datasources connected to the table',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Owners of workbooks and published datasources connected to the table',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected to the table'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected to the table'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this table'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this table'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this table'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this table')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection downstream of this table'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection downstream of this table')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks connected to the table'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected to the table'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isEmbedded: Optional[Boolean] = Field(
        None, description='A custom SQL tables is always embedded in Tableau content'
    )
    isUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the query is unsupported by Tableau Catalog, in which case lineage may be incomplete',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    query: Optional[String] = Field(None, description='Text of the query')
    tables: List[DatabaseTable] = Field(
        ..., description='Actual tables that this query references.'
    )
    tablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Actual tables that this query references.'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this table'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this table'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this table'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this table'
    )
    upstreamFlows: List[Flow] = Field(..., description='Flows upstream of this table')
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this table'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this table'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this table'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this table'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this table')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables upstream of this table'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables upstream of this table')
    )
    typename__: Optional[Literal['CustomSQLTable']] = Field(
        'CustomSQLTable', alias='__typename'
    )


class CustomSQLTablesConnection(BaseModel):
    """
    Connection Type for CustomSQLTable
    """

    nodes: List[CustomSQLTable] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['CustomSQLTablesConnection']] = Field(
        'CustomSQLTablesConnection', alias='__typename'
    )


class Dashboard(Taggable, View):
    """
    A dashboard contained in a published workbook.
    """

    askDataExtensions: List[AskDataExtension] = Field(
        ..., description='AskDataExtensions that are added into this dashboard'
    )
    askDataExtensionsConnection: Optional[AskDataExtensionsConnection] = Field(
        None, description='AskDataExtensions that are added into this dashboard'
    )
    createdAt: DateTime = Field(..., description='Time the dashboard was created')
    documentViewId: Optional[String] = Field(
        None,
        description='Unique ID for the dashboard generated for and stored within the workbook, survives renames, and is used for internal processes',
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    index: Optional[Int] = Field(
        None, description='Index of view; the order it appears in the workbook'
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    path: Optional[String] = Field(None, description='Server path to dashboard')
    referencedByMetrics: Optional[List[Optional[Metric]]] = Field(
        None, description='The Metrics that reference this View'
    )
    referencedByMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='The Metrics that reference this View'
    )
    sheets: List[Sheet] = Field(..., description='Sheets referenced by this dashboard')
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets referenced by this dashboard'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the view')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the view'
    )
    updatedAt: DateTime = Field(..., description='Time the dashboard was updated')
    upstreamColumns: Optional[List[Optional[Column]]] = Field(
        None, description='The columns that are upstream of this dashboard'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='The columns that are upstream of this dashboard'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this dashboard'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this dashboard')
    )
    upstreamDatabases: Optional[List[Optional[Database]]] = Field(
        None, description='The databases that are upstream of this dashboard'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='The databases that are upstream of this dashboard'
    )
    upstreamDatasources: Optional[List[Optional[Datasource]]] = Field(
        None, description='The data sources that are upstream of this dashboard'
    )
    upstreamDatasourcesConnection: Optional[DatasourcesConnection] = Field(
        None, description='The data sources that are upstream of this dashboard'
    )
    upstreamFields: Optional[List[Optional[Field]]] = Field(
        None, description='The fields that are upstream of this dashboard'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='The fields that are upstream of this dashboard'
    )
    upstreamFlows: Optional[List[Optional[Flow]]] = Field(
        None, description='The flows that are upstream of this dashboard'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='The flows that are upstream of this dashboard'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this dashboard Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this dashboard Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLenses: Optional[List[Optional[Lens]]] = Field(
        None, description='The Lenses that are upstream of this dashboard'
    )
    upstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='The Lenses that are upstream of this dashboard'
    )
    upstreamSheetFieldInstances: Optional[List[Optional[Field]]] = Field(
        None,
        description='Sheet field instances used by the sheets referenced by this dashboard',
    )
    upstreamSheetFieldInstancesConnection: Optional[FieldsConnection] = Field(
        None,
        description='Sheet field instances used by the sheets referenced by this dashboard',
    )
    upstreamTables: Optional[List[Optional[Table]]] = Field(
        None, description='The tables that are upstream of this dashboard'
    )
    upstreamTablesConnection: Optional[TablesConnection] = Field(
        None, description='The tables that are upstream of this dashboard'
    )
    workbook: Optional[Workbook] = Field(
        None, description='The workbook that contains this view'
    )
    typename__: Optional[Literal['Dashboard']] = Field('Dashboard', alias='__typename')


class DashboardsConnection(BaseModel):
    """
    Connection Type for Dashboard
    """

    nodes: List[Dashboard] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DashboardsConnection']] = Field(
        'DashboardsConnection', alias='__typename'
    )


class DataCloud(CanHaveLabels, Certifiable, Database, Taggable, Warnable):
    """
    A Data Cloud connection
    *Available in Tableau Cloud February 2024 / Server 2024.2 and later.*
    """

    certificationNote: Optional[String] = Field(
        None, description='Notes related to this database being marked as certified'
    )
    certifier: Optional[TableauUser] = Field(
        None, description='User who marked this database as certified'
    )
    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    contact: Optional[TableauUser] = Field(
        None, description='Contact for this database'
    )
    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a database'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(None, description='The data quality certifications on a database')
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on a database'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a database'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a database'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this database'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected to the database'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected to the database'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this database'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this database'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources connected to the database'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources connected to the database'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this database'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this database'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses connected to the database'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected to the database'
    )
    downstreamMetricDefinitions: List[Optional[MetricDefinition]] = Field(
        ..., description='Metric definitions downstream from this database.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this database.')
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics connected to the database'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected to the database'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners connected to the database'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners connected to the database'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected to the database'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected to the database'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this database'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this database'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this database')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables downstream of this database')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks connected to the database'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected to the database'
    )
    hasActiveWarning: Boolean = Field(
        ..., description='True if the database has an active data quality warning'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used with the Metadata API.  Not the same as the locally unique identifier used with the REST API.',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this database contains an active data quality certification',
    )
    isControlledPermissionsEnabled: Optional[Boolean] = Field(
        None, description='True if this database has its permission locked'
    )
    isEmbedded: Optional[Boolean] = Field(
        None,
        description='True if this database is embedded in Tableau content, e.g., a packaged workbook',
    )
    isGrouped: Optional[Boolean] = Field(
        None, description='True if this database has been grouped with other databases'
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ..., description='Locally unique identifier used with the REST API.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    referencedByQueries: Optional[List[Optional[CustomSQLTable]]] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    referencedByQueriesConnection: Optional[CustomSQLTablesConnection] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    tables: Optional[List[Optional[DatabaseTable]]] = Field(
        None, description='Tables belonging to this database'
    )
    tablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables belonging to this database'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the database')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the database'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this database'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this database')
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this database'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this database'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this database'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this database'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows upstream of this database'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this database'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this database'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this database'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this database')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables upstream of this database')
    )
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this database, for use in client-to-server communications',
    )
    typename__: Optional[Literal['DataCloud']] = Field('DataCloud', alias='__typename')


class DataCloudsConnection(BaseModel):
    """
    Connection Type for DataCloud
    """

    nodes: List[DataCloud] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DataCloudsConnection']] = Field(
        'DataCloudsConnection', alias='__typename'
    )


class DataFieldsConnection(BaseModel):
    """
    Connection Type for DataField
    """

    nodes: List[DataField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DataFieldsConnection']] = Field(
        'DataFieldsConnection', alias='__typename'
    )


class DataQualityCertification(Label):
    """
    A data quality certification associated with a content item
    """

    asset: Optional[CanHaveLabels] = Field(
        None, description='The asset that contains the data quality certification'
    )
    author: Optional[TableauUser] = Field(
        None, description='User who last updated this data quality certification'
    )
    authorDisplayName: Optional[String] = Field(
        None,
        description='Name of the user who last updated this data quality certification',
    )
    category: String = Field(..., description='Category of the label')
    createdAt: DateTime = Field(
        ..., description='Time the data quality certification was created'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    isActive: Boolean = Field(
        ..., description='True if the data quality certification is active'
    )
    isElevated: Boolean = Field(
        ..., description='True if the data quality certification is elevated'
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    message: Optional[String] = Field(
        None, description='Message of the data quality certification'
    )
    updatedAt: DateTime = Field(
        ..., description='Time the data quality certification was last updated'
    )
    value: String = Field(..., description='Value of the label')
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this data quality certifcation, for use in client-to-server communications',
    )
    typename__: Optional[Literal['DataQualityCertification']] = Field(
        'DataQualityCertification', alias='__typename'
    )


class DataQualityCertificationsConnection(BaseModel):
    """
    Connection Type for DataQualityCertification
    """

    nodes: List[DataQualityCertification] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DataQualityCertificationsConnection']] = Field(
        'DataQualityCertificationsConnection', alias='__typename'
    )


class DataQualityWarning(Label):
    """
    A data quality warning associated with a content item
    """

    asset: Optional[CanHaveLabels] = Field(
        None, description='The asset that contains the data quality warning'
    )
    author: Optional[TableauUser] = Field(
        None, description='User who last updated this data quality warning'
    )
    authorDisplayName: Optional[String] = Field(
        None, description='Name of the user who last updated this data quality warning'
    )
    category: String = Field(..., description='Category of the label')
    createdAt: DateTime = Field(
        ..., description='Time the data quality warning was created'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    isActive: Boolean = Field(
        ..., description='True if the data quality warning is active'
    )
    isElevated: Boolean = Field(
        ..., description='True if the data quality warning is elevated'
    )
    isSevere: Boolean = Field(..., description='Synonymous with isElevated')
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    message: Optional[String] = Field(
        None, description='Message of the data quality warning'
    )
    updatedAt: DateTime = Field(
        ..., description='Time the data quality warning was last updated'
    )
    value: String = Field(..., description='Value of the label')
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this data quality warning, for use in client-to-server communications',
    )
    warningType: String = Field(..., description='Synonymous with value')
    typename__: Optional[Literal['DataQualityWarning']] = Field(
        'DataQualityWarning', alias='__typename'
    )


class DataQualityWarningsConnection(BaseModel):
    """
    Connection Type for DataQualityWarning
    """

    nodes: List[DataQualityWarning] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DataQualityWarningsConnection']] = Field(
        'DataQualityWarningsConnection', alias='__typename'
    )


class DatabaseServer(CanHaveLabels, Certifiable, Database, Taggable, Warnable):
    """
    A database server connection
    """

    certificationNote: Optional[String] = Field(
        None, description='Notes related to this database being marked as certified'
    )
    certifier: Optional[TableauUser] = Field(
        None, description='User who marked this database as certified'
    )
    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    contact: Optional[TableauUser] = Field(
        None, description='Contact for this database'
    )
    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a database'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(None, description='The data quality certifications on a database')
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on a database'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a database'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a database'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this database'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected to the database'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected to the database'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this database'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this database'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources connected to the database'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources connected to the database'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this database'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this database'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses connected to the database'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected to the database'
    )
    downstreamMetricDefinitions: List[Optional[MetricDefinition]] = Field(
        ..., description='Metric definitions downstream from this database.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this database.')
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics connected to the database'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected to the database'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners connected to the database'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners connected to the database'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected to the database'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected to the database'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this database'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this database'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this database')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables downstream of this database')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks connected to the database'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected to the database'
    )
    extendedConnectionType: Optional[String] = Field(
        None,
        description='optional Extended Connection info for specific connection types, eg hive for Cloudera Hadoop',
    )
    hasActiveWarning: Boolean = Field(
        ..., description='True if the database has an active data quality warning'
    )
    hostName: Optional[String] = Field(None, description='Hostname of the database')
    id: ID = Field(
        ...,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this database contains an active data quality certification',
    )
    isControlledPermissionsEnabled: Optional[Boolean] = Field(
        None, description='True if this database has its permission locked'
    )
    isEmbedded: Optional[Boolean] = Field(
        None, description='A database server is never embedded in Tableau content'
    )
    isGrouped: Optional[Boolean] = Field(
        None, description='True if this database has been grouped with other databases'
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    port: Optional[Int] = Field(
        None, description='Port number of the database connection'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    referencedByQueries: Optional[List[Optional[CustomSQLTable]]] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    referencedByQueriesConnection: Optional[CustomSQLTablesConnection] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    service: Optional[String] = Field(
        None, description='service string for certain datasources eg Oracle'
    )
    tables: Optional[List[Optional[DatabaseTable]]] = Field(
        None, description='Tables belonging to this database'
    )
    tablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables belonging to this database'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the database')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the database'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this database'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this database')
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this database'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this database'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this database'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this database'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows upstream of this database'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this database'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this database'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this database'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this database')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables upstream of this database')
    )
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this database, for use in client-to-server communications',
    )
    typename__: Optional[Literal['DatabaseServer']] = Field(
        'DatabaseServer', alias='__typename'
    )


class DatabaseServersConnection(BaseModel):
    """
    Connection Type for DatabaseServer
    """

    nodes: List[DatabaseServer] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DatabaseServersConnection']] = Field(
        'DatabaseServersConnection', alias='__typename'
    )


class DatabaseTable(CanHaveLabels, Certifiable, Table, Taggable, Warnable):
    """
    A table that is contained in a database
    """

    additionalDetails: Optional[TableAdditionalDetails] = Field(
        None, description='Additional details regarding this table'
    )
    certificationNote: Optional[String] = Field(
        None,
        description='Notes related to the database table being marked as certified',
    )
    certifier: Optional[TableauUser] = Field(
        None, description='User who marked this table as certified'
    )
    columns: List[Column] = Field(..., description='Columns contained in this table')
    columnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns contained in this table'
    )
    connectionType: Optional[String] = Field(
        None, description='Connection type of parent database'
    )
    contact: Optional[TableauUser] = Field(None, description='Contact for this table')
    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a table'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(None, description='The data quality certifications on a table')
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on a table'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a table'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a table'
    )
    database: Optional[Database] = Field(
        None, description='The database to which this table belongs'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this table'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the table'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the table'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this table'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this table'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources connected to the table'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources connected to the table'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this table'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this table'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses connected downstream from the table'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from the table'
    )
    downstreamMetricDefinitions: List[Optional[MetricDefinition]] = Field(
        ..., description='Metric definitions downstream from this databaseTable.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(
            None, description='Metric definitions downstream from this databaseTable.'
        )
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics connected downstream from the table'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the table'
    )
    downstreamOwners: List[TableauUser] = Field(
        ...,
        description='Owners of workbooks and published datasources connected to the table',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Owners of workbooks and published datasources connected to the table',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected to the table'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected to the table'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this table'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this table'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream from this table'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream from this table')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream from this table'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream from this table')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks connected to the table'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected to the table'
    )
    fullName: Optional[String] = Field(None, description='Fully qualified table name')
    hasActiveWarning: Boolean = Field(
        ..., description='True if the table has an active data quality warning'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this table contains an active data quality certification',
    )
    isEmbedded: Optional[Boolean] = Field(
        None, description='True if this table is embedded in Tableau content'
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a table. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a table. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the table is visible. Will be empty if the table is not in a project.',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the table is visible. Will be empty if the table is not in a project.',
    )
    referencedByQueries: Optional[List[Optional[CustomSQLTable]]] = Field(
        None, description='The custom SQL queries that reference this table'
    )
    referencedByQueriesConnection: Optional[CustomSQLTablesConnection] = Field(
        None, description='The custom SQL queries that reference this table'
    )
    schema_: Optional[String] = Field(
        None,
        alias='schema',
        description='Name of table schema.\n    \nNote: For some databases, such as Amazon Athena and Exasol, the schema attribute may not return the correct schema name for the table. For more information, see https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_model.html#schema_attribute.',
    )
    tableType: TableType = Field(..., description='Type of the table')
    tags: List[Tag] = Field(..., description='Tags associated with the table')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the table'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this table'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this table')
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this table'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this table'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this table'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this table'
    )
    upstreamFlows: List[Flow] = Field(..., description='Flows upstream of this table')
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this table'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this table. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this table. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this table'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this table'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream from this table'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream from this table')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream from this table'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream from this table')
    )
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this table, for use in client-to-server communications',
    )
    typename__: Optional[Literal['DatabaseTable']] = Field(
        'DatabaseTable', alias='__typename'
    )


class DatabaseTablesConnection(BaseModel):
    """
    Connection Type for DatabaseTable
    """

    nodes: List[DatabaseTable] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DatabaseTablesConnection']] = Field(
        'DatabaseTablesConnection', alias='__typename'
    )


class DatabasesConnection(BaseModel):
    """
    Connection Type for Database
    """

    nodes: List[Database] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DatabasesConnection']] = Field(
        'DatabasesConnection', alias='__typename'
    )


class DatasourceField(FieldModel, Node):
    """
    GraphQL type for a data source field. Data source fields can only exist in embedded data sources which connect to a published data source. A data source field is an embedded data source's 'layered' representation of a field that already exists in the published data source and is mostly a copy of the field in the published data source. Data source fields can get their own descriptions and renames local to the embedded data source, but cannot otherwise be modified in the embedded data source.
    """

    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    description: Optional[String] = Field(
        None, description='Description of field shown in server and desktop clients'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream of this field'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream of this field'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this field'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this field'
    )
    downstreamDatasources: Optional[List[PublishedDatasource]] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamFields: List[Field] = Field(
        ..., description='downstream fields that reference this field'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='downstream fields that reference this field'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this field'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this field'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this field.')
    )
    downstreamMetrics: Optional[List[Metric]] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamOwners: Optional[List[TableauUser]] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected downstream from the field'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected downstream from the field'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this field'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this field'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this field'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this field')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this field'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this field')
    )
    downstreamWorkbooks: Optional[List[Workbook]] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    folderName: Optional[String] = Field(
        None,
        description='Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize',
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    remoteField: Optional[Field] = Field(
        None,
        description='Reference to a field from a published data source. This property only exists on Fields that are in an embedded data source with a connection to a published data source.',
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this field references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this field references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources connected upstream from the field'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected upstream from the field'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this field'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this field'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this field')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this field'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this field')
    )
    typename__: Optional[Literal['DatasourceField']] = Field(
        'DatasourceField', alias='__typename'
    )


class DatasourceFieldsConnection(BaseModel):
    """
    Connection Type for DatasourceField
    """

    nodes: List[DatasourceField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DatasourceFieldsConnection']] = Field(
        'DatasourceFieldsConnection', alias='__typename'
    )


class DatasourceFilter(BaseModel):
    """
    Data source filters include/exclude certain values from a single field to filter out rows of data from this data source. For data security reasons, we don't track the values used in the filter in this schema, but you can see the field used in the filter.

    See https://onlinehelp.tableau.com/current/pro/desktop/en-us/filtering_datasource.html
    """

    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this datasource filter'
    )
    field: Field = Field(..., description='Field used by this filter.')
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    typename__: Optional[Literal['DatasourceFilter']] = Field(
        'DatasourceFilter', alias='__typename'
    )


class DatasourceFiltersConnection(BaseModel):
    """
    Connection Type for DatasourceFilter
    """

    nodes: List[DatasourceFilter] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DatasourceFiltersConnection']] = Field(
        'DatasourceFiltersConnection', alias='__typename'
    )


class DatasourcesConnection(BaseModel):
    """
    Connection Type for Datasource
    """

    nodes: List[Datasource] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['DatasourcesConnection']] = Field(
        'DatasourcesConnection', alias='__typename'
    )


class EmbeddedDatasource(Datasource):
    """
    A data source embedded in a workbook
    """

    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    createdAt: Optional[DateTime] = Field(
        None,
        description='Time the datasource was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    datasourceFilters: List[DatasourceFilter] = Field(
        ..., description='Data source filters contained in this data source'
    )
    datasourceFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='Data source filters contained in this data source'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards downstream from this data source'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards downstream from this data source'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream from this data source'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream from this data source'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Workbook owners downstream from this data source'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Workbook owners downstream from this data source'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets downstream from this data source'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets downstream from this data source'
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks downstream from this data source'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks downstream from this data source'
    )
    extractLastIncrementalUpdateTime: Optional[DateTime] = Field(
        None, description='Time an extract was last incrementally updated'
    )
    extractLastRefreshTime: Optional[DateTime] = Field(
        None, description='Time an extract was last fully refreshed'
    )
    extractLastUpdateTime: Optional[DateTime] = Field(
        None,
        description='Time an extract was last updated by either a full refresh, incremental update, or creation',
    )
    fields: List[Field] = Field(
        ...,
        description='Fields, usually measures or dimensions, contained in the data source',
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None,
        description='Fields, usually measures or dimensions, contained in the data source',
    )
    hasExtracts: Optional[Boolean] = Field(
        None, description='True if datasource contains extracted data'
    )
    hasUserReference: Optional[Boolean] = Field(
        None,
        description='True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)',
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    lenses: Optional[List[Optional[Lens]]] = Field(
        None, description='The lenses derived from this datasource'
    )
    lensesConnection: Optional[LensesConnection] = Field(
        None, description='The lenses derived from this datasource'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    parentPublishedDatasources: List[PublishedDatasource] = Field(
        ..., description='Parent published data sources of this embedded data source'
    )
    parentPublishedDatasourcesConnection: Optional[PublishedDatasourcesConnection] = (
        Field(
            None,
            description='Parent published data sources of this embedded data source',
        )
    )
    updatedAt: Optional[DateTime] = Field(
        None,
        description='Time the datasource was last updated. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this data source'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this data source')
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream from this data source'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream from this data source'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream from this data source'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream from this data source'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows upstream from this data source'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream from this data source'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this data source. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this data source. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream from this data source'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream from this data source'
    )
    workbook: Optional[Workbook] = Field(
        None, description='Workbook that contains these embedded datasources'
    )
    typename__: Optional[Literal['EmbeddedDatasource']] = Field(
        'EmbeddedDatasource', alias='__typename'
    )


class EmbeddedDatasourcesConnection(BaseModel):
    """
    Connection Type for EmbeddedDatasource
    """

    nodes: List[EmbeddedDatasource] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['EmbeddedDatasourcesConnection']] = Field(
        'EmbeddedDatasourcesConnection', alias='__typename'
    )


class FieldReferencingFieldsConnection(BaseModel):
    """
    Connection Type for FieldReferencingField
    """

    nodes: List[FieldReferencingField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FieldReferencingFieldsConnection']] = Field(
        'FieldReferencingFieldsConnection', alias='__typename'
    )


class FieldsConnection(BaseModel):
    """
    Connection Type for Field
    """

    nodes: List[Field] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FieldsConnection']] = Field(
        'FieldsConnection', alias='__typename'
    )


class File(CanHaveLabels, Certifiable, Database, Taggable, Warnable):
    """
    A file connection
    """

    certificationNote: Optional[String] = Field(
        None, description='Notes related to this database being marked as certified'
    )
    certifier: Optional[TableauUser] = Field(
        None, description='User who marked this database as certified'
    )
    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    contact: Optional[TableauUser] = Field(
        None, description='Contact for this database'
    )
    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a database'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(None, description='The data quality certifications on a database')
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on a database'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a database'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a database'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this database'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected to the database'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected to the database'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this database'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this database'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources connected to the database'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources connected to the database'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this database'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this database'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses connected to the database'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected to the database'
    )
    downstreamMetricDefinitions: List[Optional[MetricDefinition]] = Field(
        ..., description='Metric definitions downstream from this database.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this database.')
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics connected to the database'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected to the database'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners connected to the database'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners connected to the database'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected to the database'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected to the database'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this database'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this database'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this database')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables downstream of this database')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks connected to the database'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected to the database'
    )
    filePath: Optional[String] = Field(None, description='Path to file')
    hasActiveWarning: Boolean = Field(
        ..., description='True if the database has an active data quality warning'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this database contains an active data quality certification',
    )
    isControlledPermissionsEnabled: Optional[Boolean] = Field(
        None, description='True if this database has its permission locked'
    )
    isEmbedded: Optional[Boolean] = Field(
        None,
        description='True if this file is embedded in Tableau content, e.g., a packaged workbook',
    )
    isGrouped: Optional[Boolean] = Field(
        None, description='True if this database has been grouped with other databases'
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    referencedByQueries: Optional[List[Optional[CustomSQLTable]]] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    referencedByQueriesConnection: Optional[CustomSQLTablesConnection] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    tables: Optional[List[Optional[DatabaseTable]]] = Field(
        None, description='Tables belonging to this database'
    )
    tablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables belonging to this database'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the database')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the database'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this database'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this database')
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this database'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this database'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this database'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this database'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows upstream of this database'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this database'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this database'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this database'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this database')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables upstream of this database')
    )
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this database, for use in client-to-server communications',
    )
    typename__: Optional[Literal['File']] = Field('File', alias='__typename')


class FilesConnection(BaseModel):
    """
    Connection Type for File
    """

    nodes: List[File] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FilesConnection']] = Field(
        'FilesConnection', alias='__typename'
    )


class Flow(CanHaveLabels, Taggable, Warnable):
    """
    Flows are used to prepare data, which can include aggregation, cleaning, preprocessing, etc.
    """

    containerName: Optional[String] = Field(
        None,
        description='The name of the container in which the flow is visible and usable. Either a personal space or project.',
    )
    containerType: String = Field(
        ...,
        description='The type of the container in which the flow is visible and usable. Either personal space or project.',
    )
    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the flow contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    createdAt: Optional[DateTime] = Field(
        None,
        description='Time the flow was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on a flow'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a flow'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a flow'
    )
    description: Optional[String] = Field(None, description='Description of the flow')
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards that are downstream from this flow'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards that are downstream from this flow'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases that are downstream from this flow.'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are downstream from this flow.'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published Data Sources that are downstream from this flow.'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published Data Sources that are downstream from this flow.'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows that are downstream from this flow.'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are downstream from this flow.'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses that are downstream from this flow'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses that are downstream from this flow'
    )
    downstreamLinkedFlows: List[LinkedFlow] = Field(
        ..., description='Linked flows that are downstream from this flow.'
    )
    downstreamLinkedFlowsConnection: Optional[LinkedFlowsConnection] = Field(
        None, description='Linked flows that are downstream from this flow.'
    )
    downstreamMetricDefinitions: List[Optional[MetricDefinition]] = Field(
        ..., description='Metric definitions downstream from this flow.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this flow.')
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics that are downstream from this flow'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics that are downstream from this flow'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners that are downstream from this flow'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners that are downstream from this flow'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets that are downstream from this flow'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that are downstream from this flow'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are downstream from this flow.'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are downstream from this flow.'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='VirtualConnectionTables that are downstream of this flow'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None, description='VirtualConnectionTables that are downstream of this flow'
    )
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='VirtualConnections that are downstream of this flow'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='VirtualConnections that are downstream of this flow')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks that are downstream from this flow'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks that are downstream from this flow'
    )
    hasActiveWarning: Boolean = Field(
        ..., description='True if the flow has an active data quality warning'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    inputFields: List[FlowInputField] = Field(
        ..., description='Fields that are inputs to this flow'
    )
    inputFieldsConnection: Optional[FlowInputFieldsConnection] = Field(
        None, description='Fields that are inputs to this flow'
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a flow. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a flow. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nextDownstreamFlows: List[Flow] = Field(
        ..., description='Flows that are next immediate downstream from this flow.'
    )
    nextDownstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are next immediate downstream from this flow.'
    )
    nextUpstreamFlows: List[Optional[Flow]] = Field(
        ..., description='Flows that are next immediate upstream from this flow.'
    )
    nextUpstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are next immediate upstream from this flow.'
    )
    outputFields: List[FlowOutputField] = Field(
        ..., description='Fields that are outputs of this flow'
    )
    outputFieldsConnection: Optional[FlowOutputFieldsConnection] = Field(
        None, description='Fields that are outputs of this flow'
    )
    outputSteps: List[FlowOutputStep] = Field(
        ..., description='Output steps for this flow'
    )
    outputStepsConnection: Optional[FlowOutputStepsConnection] = Field(
        None, description='Output steps for this flow'
    )
    owner: Optional[TableauUser] = Field(None, description='User who owns this flow')
    personalSpaceUrlLink: Optional[String] = Field(
        None,
        description='The link to the personal space in which the flow is visible and usable. Will be null if the flow is not in a personal space.',
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the flow is visible and usable',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the flow is visible and usable. Will be null if the flow is not in a project.',
    )
    site: Optional[TableauSite] = Field(
        None, description='The site in which the flow is visible and usable'
    )
    tags: List[Tag] = Field(..., description='Tags associated with a flow')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with a flow'
    )
    updatedAt: Optional[DateTime] = Field(
        None,
        description='Time the flow was updated. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this flow'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this flow')
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases that are upstream from this flow.'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are upstream from this flow.'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources that are upstream from this flow.'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources that are upstream from this flow.'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows that are upstream from this flow.'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are upstream from this flow.'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this flow. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this flow. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLinkedFlows: List[LinkedFlow] = Field(
        ..., description='Linked flows that are upstream from this flow.'
    )
    upstreamLinkedFlowsConnection: Optional[LinkedFlowsConnection] = Field(
        None, description='Linked flows that are upstream from this flow.'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are upstream from this flow.'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are upstream from this flow.'
    )
    upstreamVirtualConnectionTables: List[Optional[VirtualConnectionTable]] = Field(
        ..., description='The virtual connection table upstream to this Flow'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='The virtual connection table upstream to this Flow')
    upstreamVirtualConnections: Optional[List[Optional[VirtualConnection]]] = Field(
        None, description='The virtual connection upstream to this Flow'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='The virtual connection upstream to this Flow')
    )
    uri: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    vizportalUrlId: String = Field(
        ..., description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['Flow']] = Field('Flow', alias='__typename')


class FlowColumnInputField(FlowInputField):
    """
    Column input field implementation
    """

    childFields: List[FlowOutputField] = Field(
        ..., description='Fields that are children of this field'
    )
    childFieldsConnection: Optional[FlowOutputFieldsConnection] = Field(
        None, description='Fields that are children of this field'
    )
    column: Optional[Column] = Field(None, description='The underlying wrapped column')
    fieldId: Optional[String] = Field(None, description='Identifier internal to flow')
    flow: Optional[Flow] = Field(None, description='A flow to which these fields input')
    id: ID = Field(..., description='Unique identifier used by the metadata API')
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases that are upstream from this outputField.'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are upstream from this outputField.'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='PublishedDatasources that are upstream from this outputField.'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None,
        description='PublishedDatasources that are upstream from this outputField.',
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows that are upstream from this outputField.'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are upstream from this outputField.'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are upstream of this field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are upstream of this field'
    )
    typename__: Optional[Literal['FlowColumnInputField']] = Field(
        'FlowColumnInputField', alias='__typename'
    )


class FlowColumnInputFieldsConnection(BaseModel):
    """
    Connection Type for FlowColumnInputField
    """

    nodes: List[FlowColumnInputField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FlowColumnInputFieldsConnection']] = Field(
        'FlowColumnInputFieldsConnection', alias='__typename'
    )


class FlowColumnOutputField(FlowOutputField):
    """
    Column output field implementation
    """

    column: Optional[Column] = Field(None, description='The underlying wrapped column')
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards that are downstream from this outputField'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards that are downstream from this outputField'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases that are downstream from this outputField'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are downstream from this outputField'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources that are downstream from this outputField'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources that are downstream from this outputField'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows that are downstream from this outputField'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are downstream from this outputField'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses that are downstream from this outputField'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses that are downstream from this outputField'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this flow output field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(
            None,
            description='Metric definitions downstream from this flow output field.',
        )
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics that are downstream from this outputField'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics that are downstream from this outputField'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners that are downstream from this outputField'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners that are downstream from this outputField'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets that are downstream from this outputField'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that are downstream from this outputField'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are downstream from this outputField'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are downstream from this outputField'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ...,
        description='VirtualConnectionTables that are downstream of this outputField',
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None,
        description='VirtualConnectionTables that are downstream of this outputField',
    )
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='VirtualConnections that are downstream of this outputField'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(
            None,
            description='VirtualConnections that are downstream of this outputField',
        )
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks that are downstream from this outputField'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks that are downstream from this outputField'
    )
    fieldId: Optional[String] = Field(None, description='Identifier internal to flow')
    flow: Optional[List[Optional[Flow]]] = Field(
        None, description='The flow that outputs these fields'
    )
    flowConnection: Optional[FlowsConnection] = Field(
        None, description='The flow that outputs these fields'
    )
    flowOutputStep: Optional[FlowOutputStep] = Field(
        None, description='The flow output step that contains this field'
    )
    id: ID = Field(..., description='Unique identifier used by the metadata API')
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    parentFields: List[FlowInputField] = Field(
        ..., description='Fields that are parents of this field'
    )
    parentFieldsConnection: Optional[FlowInputFieldsConnection] = Field(
        None, description='Fields that are parents of this field'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases that are upstream from this outputField'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are upstream from this outputField'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources that are upstream from this flow.'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources that are upstream from this flow.'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows that are upstream from this flow'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are upstream from this flow'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are upstream from this outputField'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are upstream from this outputField'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='VirtualConnectionTables that are upstream of this outputField'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None,
        description='VirtualConnectionTables that are upstream of this outputField',
    )
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='VirtualConnections that are upstream of this outputField'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(
            None, description='VirtualConnections that are upstream of this outputField'
        )
    )
    typename__: Optional[Literal['FlowColumnOutputField']] = Field(
        'FlowColumnOutputField', alias='__typename'
    )


class FlowColumnOutputFieldsConnection(BaseModel):
    """
    Connection Type for FlowColumnOutputField
    """

    nodes: List[FlowColumnOutputField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FlowColumnOutputFieldsConnection']] = Field(
        'FlowColumnOutputFieldsConnection', alias='__typename'
    )


class FlowFieldInputField(FlowInputField):
    """
    Field input field implementation
    """

    childFields: List[FlowOutputField] = Field(
        ..., description='Fields that are children of this field'
    )
    childFieldsConnection: Optional[FlowOutputFieldsConnection] = Field(
        None, description='Fields that are children of this field'
    )
    field: Optional[Field] = Field(None, description='The underlying wrapped field')
    fieldId: Optional[String] = Field(None, description='Identifier internal to flow')
    flow: Optional[Flow] = Field(None, description='A flow to which these fields input')
    id: ID = Field(..., description='Unique identifier used by the metadata API')
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases that are upstream from this outputField.'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are upstream from this outputField.'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources that are upstream from this outputField.'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources that are upstream from this outputField.'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows that are upstream from this outputField.'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are upstream from this outputField.'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are upstream of this field.'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are upstream of this field.'
    )
    typename__: Optional[Literal['FlowFieldInputField']] = Field(
        'FlowFieldInputField', alias='__typename'
    )


class FlowFieldInputFieldsConnection(BaseModel):
    """
    Connection Type for FlowFieldInputField
    """

    nodes: List[FlowFieldInputField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FlowFieldInputFieldsConnection']] = Field(
        'FlowFieldInputFieldsConnection', alias='__typename'
    )


class FlowFieldOutputField(FlowOutputField):
    """
    Field output field implementation
    """

    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards that are downstream from this outputField'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards that are downstream from this outputField'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases that are downstream from this outputField'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are downstream from this outputField'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources that are downstream from this outputField'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources that are downstream from this outputField'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows that are downstream from this outputField'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are downstream from this outputField'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses that are downstream from this outputField'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses that are downstream from this outputField'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this flow output field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(
            None,
            description='Metric definitions downstream from this flow output field.',
        )
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics that are downstream from this outputField'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics that are downstream from this outputField'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners that are downstream from this outputField'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners that are downstream from this outputField'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets that are downstream from this outputField'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that are downstream from this outputField'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are downstream from this outputField'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are downstream from this outputField'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ...,
        description='VirtualConnectionTables that are downstream of this outputField',
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None,
        description='VirtualConnectionTables that are downstream of this outputField',
    )
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='VirtualConnections that are downstream of this outputField'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(
            None,
            description='VirtualConnections that are downstream of this outputField',
        )
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks that are downstream from this outputField'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks that are downstream from this outputField'
    )
    field: Optional[Field] = Field(None, description='The underlying wrapped field')
    fieldId: Optional[String] = Field(None, description='Identifier internal to flow')
    flow: Optional[List[Optional[Flow]]] = Field(
        None, description='The flow that outputs these fields'
    )
    flowConnection: Optional[FlowsConnection] = Field(
        None, description='The flow that outputs these fields'
    )
    flowOutputStep: Optional[FlowOutputStep] = Field(
        None, description='The flow output step that contains this field'
    )
    id: ID = Field(..., description='Unique identifier used by the metadata API')
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    parentFields: List[FlowInputField] = Field(
        ..., description='Fields that are parents of this field'
    )
    parentFieldsConnection: Optional[FlowInputFieldsConnection] = Field(
        None, description='Fields that are parents of this field'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases that are upstream from this outputField'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are upstream from this outputField'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources that are upstream from this output field.'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources that are upstream from this output field.'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows that are upstream from this flow.'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows that are upstream from this flow.'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables that are upstream from this outputField'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables that are upstream from this outputField'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='VirtualConnectionTables that are upstream of this outputField'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None,
        description='VirtualConnectionTables that are upstream of this outputField',
    )
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='VirtualConnections that are upstream of this outputField'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(
            None, description='VirtualConnections that are upstream of this outputField'
        )
    )
    typename__: Optional[Literal['FlowFieldOutputField']] = Field(
        'FlowFieldOutputField', alias='__typename'
    )


class FlowFieldOutputFieldsConnection(BaseModel):
    """
    Connection Type for FlowFieldOutputField
    """

    nodes: List[FlowFieldOutputField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FlowFieldOutputFieldsConnection']] = Field(
        'FlowFieldOutputFieldsConnection', alias='__typename'
    )


class FlowInputFieldsConnection(BaseModel):
    """
    Connection Type for FlowInputField
    """

    nodes: List[FlowInputField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FlowInputFieldsConnection']] = Field(
        'FlowInputFieldsConnection', alias='__typename'
    )


class FlowOutputFieldsConnection(BaseModel):
    """
    Connection Type for FlowOutputField
    """

    nodes: List[FlowOutputField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FlowOutputFieldsConnection']] = Field(
        'FlowOutputFieldsConnection', alias='__typename'
    )


class FlowOutputStep(BaseModel):
    """
    A flow output step
    """

    flow: Optional[Flow] = Field(
        None, description='The flow that contains this output step'
    )
    id: ID = Field(..., description='Unique identifier used by the metadata API')
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    outputFields: List[FlowOutputField] = Field(
        ..., description='Fields output by this step'
    )
    outputFieldsConnection: Optional[FlowOutputFieldsConnection] = Field(
        None, description='Fields output by this step'
    )
    stepId: Optional[String] = Field(None, description='Identifier internal to flow')
    typename__: Optional[Literal['FlowOutputStep']] = Field(
        'FlowOutputStep', alias='__typename'
    )


class FlowOutputStepsConnection(BaseModel):
    """
    Connection Type for FlowOutputStep
    """

    nodes: List[FlowOutputStep] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FlowOutputStepsConnection']] = Field(
        'FlowOutputStepsConnection', alias='__typename'
    )


class FlowsConnection(BaseModel):
    """
    Connection Type for Flow
    """

    nodes: List[Flow] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['FlowsConnection']] = Field(
        'FlowsConnection', alias='__typename'
    )


class GenericLabel(Label):
    """
    A label that can be attached to assets.
    *Available in Tableau Cloud March 2023 / Server 2023.1 and later.*
    """

    asset: Optional[CanHaveLabels] = Field(
        None, description='The asset that contains the label'
    )
    author: Optional[TableauUser] = Field(
        None, description='User who last updated this label'
    )
    authorDisplayName: Optional[String] = Field(
        None, description='Name of the user who last updated this label'
    )
    category: String = Field(..., description='Category of the label')
    createdAt: DateTime = Field(..., description='Time the label was created')
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    isActive: Boolean = Field(..., description='True if the label is active')
    isElevated: Boolean = Field(..., description='True if the label is elevated')
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    message: Optional[String] = Field(None, description='Message of the label')
    updatedAt: DateTime = Field(..., description='Time the label was last updated')
    value: String = Field(..., description='Value of the label')
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this label, for use in client-to-server communications',
    )
    typename__: Optional[Literal['GenericLabel']] = Field(
        'GenericLabel', alias='__typename'
    )


class GenericLabelsConnection(BaseModel):
    """
    Connection Type for GenericLabel
    """

    nodes: List[GenericLabel] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['GenericLabelsConnection']] = Field(
        'GenericLabelsConnection', alias='__typename'
    )


class GroupField(DataField, FieldModel, FieldReferencingField, Node):
    """
    GraphQL type for a group field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_groups_creating.html
    """

    dataCategory: Optional[FieldRoleCategory] = Field(
        None, description='Data category of the field'
    )
    dataType: Optional[FieldDataType] = Field(
        None,
        description='Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html',
    )
    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    description: Optional[String] = Field(
        None, description='Description of field shown in server and desktop clients'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream of this field'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream of this field'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this field'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this field'
    )
    downstreamDatasources: Optional[List[PublishedDatasource]] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamFields: List[Field] = Field(
        ..., description='downstream fields that reference this field'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='downstream fields that reference this field'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this field'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this field'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this field.')
    )
    downstreamMetrics: Optional[List[Metric]] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamOwners: Optional[List[TableauUser]] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected downstream from the field'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected downstream from the field'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this field'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this field'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this field'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this field')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this field'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this field')
    )
    downstreamWorkbooks: Optional[List[Workbook]] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    fields: List[Field] = Field(
        ..., description='List of fields, if any, that this field references'
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='List of fields, if any, that this field references'
    )
    folderName: Optional[String] = Field(
        None,
        description='Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize',
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    hasOther: Optional[Boolean] = Field(
        None,
        description="Field has an 'Other' group. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_groups_creating.html#Include",
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    role: Optional[FieldRole] = Field(
        None, description="Role of the field: 'dimension', 'measure' or 'unknown'"
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this field references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this field references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources connected upstream from the field'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected upstream from the field'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this field'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this field'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this field')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this field'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this field')
    )
    typename__: Optional[Literal['GroupField']] = Field(
        'GroupField', alias='__typename'
    )


class GroupFieldsConnection(BaseModel):
    """
    Connection Type for GroupField
    """

    nodes: List[GroupField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['GroupFieldsConnection']] = Field(
        'GroupFieldsConnection', alias='__typename'
    )


class HierarchyField(FieldModel, FieldReferencingField, Node):
    """
    GraphQL type for a hierarchy. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/qs_hierarchies.html
    """

    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    description: Optional[String] = Field(
        None, description='Description of field shown in server and desktop clients'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream of this field'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream of this field'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this field'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this field'
    )
    downstreamDatasources: Optional[List[PublishedDatasource]] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamFields: List[Field] = Field(
        ..., description='downstream fields that reference this field'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='downstream fields that reference this field'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this field'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this field'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this field.')
    )
    downstreamMetrics: Optional[List[Metric]] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamOwners: Optional[List[TableauUser]] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected downstream from the field'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected downstream from the field'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this field'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this field'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this field'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this field')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this field'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this field')
    )
    downstreamWorkbooks: Optional[List[Workbook]] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    fields: List[Field] = Field(
        ..., description='List of fields, if any, that this field references'
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='List of fields, if any, that this field references'
    )
    folderName: Optional[String] = Field(
        None,
        description='Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize',
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this field references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this field references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources connected upstream from the field'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected upstream from the field'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this field'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this field'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this field')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this field'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this field')
    )
    typename__: Optional[Literal['HierarchyField']] = Field(
        'HierarchyField', alias='__typename'
    )


class HierarchyFieldsConnection(BaseModel):
    """
    Connection Type for HierarchyField
    """

    nodes: List[HierarchyField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['HierarchyFieldsConnection']] = Field(
        'HierarchyFieldsConnection', alias='__typename'
    )


class InheritedStringResult(BaseModel):
    """
    Wrapper type containing the inherited result
    """

    asset: Optional[Node] = Field(
        None,
        description='The object (i.e., inheritance source) where the attribute was inherited from',
    )
    assetId: String = Field(
        ...,
        description='Unique identifier of the object (i.e., inheritance source) that is providing the inherited attribute',
    )
    attribute: String = Field(
        ..., description='Name of the property that is being inherited'
    )
    distance: Optional[Int] = Field(
        None,
        description='Number of edges in between the inheritance source and inheritance target',
    )
    edges: Optional[List[String]] = Field(
        None, description='The edges between inheritance source and inheritance target'
    )
    value: Optional[String] = Field(None, description='Inherited value')
    typename__: Optional[Literal['InheritedStringResult']] = Field(
        'InheritedStringResult', alias='__typename'
    )


class LabelsConnection(BaseModel):
    """
    Connection Type for Label
    """

    nodes: List[Label] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['LabelsConnection']] = Field(
        'LabelsConnection', alias='__typename'
    )


class Lens(BaseModel):
    """
    Lenses are curated, embeddable Ask Data experiences.
    *Introduced in Tableau Cloud June 2022 / Server 2022.3.*
    *Retired in Tableau Cloud February 2024 / Server 2024.2.*
    """

    askDataExtensions: Optional[List[Optional[AskDataExtension]]] = Field(
        None, description='The lens configured in askData extension'
    )
    askDataExtensionsConnection: Optional[AskDataExtensionsConnection] = Field(
        None, description='The lens configured in askData extension'
    )
    createdAt: DateTime = Field(..., description='Time the Lens was created')
    datasource: Datasource = Field(
        ..., description='Datasource this lens is derived from'
    )
    description: Optional[String] = Field(None, description='Description of the Lens')
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='"Dashboards connected to the Lens"'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = None
    downstreamMetrics: List[Metric] = Field(
        ..., description='"Metrics connected to the Lens"'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = None
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners of contents connected to the Lens'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners of contents connected to the Lens'
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='"Workbooks connected to the Lens"'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = None
    fields: List[LensField] = Field(..., description='The list of fields')
    fieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='The list of fields'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='Name shown in server')
    owner: TableauUser = Field(..., description='User who owns this Lens')
    projectVizportalUrlId: String = Field(
        ...,
        description='The ID of the project in which the Lens is visible and usable.',
    )
    site: TableauSite = Field(
        ..., description='The site in which the Lens is visible and usable'
    )
    updatedAt: DateTime = Field(..., description='Time the Lens was last updated')
    upstreamDatabases: Optional[List[Optional[Database]]] = Field(
        None, description='The Databases that are upstream to this Lens'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='The Databases that are upstream to this Lens'
    )
    upstreamDatasources: Optional[List[Optional[PublishedDatasource]]] = Field(
        None, description='The datasource that are upstream of this lens'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='The datasource that are upstream of this lens'
    )
    upstreamFields: Optional[List[Optional[Field]]] = Field(
        None, description='The fields that are upstream of this lens'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='The fields that are upstream of this lens'
    )
    upstreamFlows: Optional[List[Optional[Flow]]] = Field(
        None, description='The flows that are upstream of this Lens'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='The flows that are upstream of this Lens'
    )
    upstreamTables: List[Table] = Field(
        ..., description='Tables that are upstream of this Lens'
    )
    upstreamTablesConnection: Optional[TablesConnection] = Field(
        None, description='Tables that are upstream of this Lens'
    )
    upstreamVirtualConnectionTables: Optional[
        List[Optional[VirtualConnectionTable]]
    ] = Field(None, description='The virtual connection table upstream to this Lens')
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='The virtual connection table upstream to this Lens')
    upstreamVirtualConnections: Optional[List[Optional[VirtualConnection]]] = Field(
        None, description='The virtual connection upstream to this Lens'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='The virtual connection upstream to this Lens')
    )
    vizportalUrlId: String = Field(
        ..., description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['Lens']] = Field('Lens', alias='__typename')


class LensField(BaseModel):
    """
    Lens Fields contain extra information based on an underlying datasource field
    """

    containingLens: Optional[Lens] = Field(
        None, description='The Lens which contains this lens field'
    )
    datasourceField: Field = Field(
        ..., description='Underlying datasource field this lens field is based on'
    )
    description: Optional[String] = Field(
        None,
        description='Description of field shown in Ask Data. If null or empty, use description inherited from datasource field.',
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None,
        description='Name of field shown locally in Ask Data. If null or empty, use name inherited from datasource field.',
    )
    typename__: Optional[Literal['LensField']] = Field('LensField', alias='__typename')


class LensFieldsConnection(BaseModel):
    """
    Connection Type for LensField
    """

    nodes: List[LensField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['LensFieldsConnection']] = Field(
        'LensFieldsConnection', alias='__typename'
    )


class LensesConnection(BaseModel):
    """
    Connection Type for Lens
    """

    nodes: List[Lens] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['LensesConnection']] = Field(
        'LensesConnection', alias='__typename'
    )


class LinkedFlow(BaseModel):
    """
    Wrapper type including edge information
    """

    asset: Flow = Field(..., description='Object in this linked flow')
    assetId: String = Field(
        ..., description='Unique identifier of the object in this linked flow'
    )
    fromEdges: Optional[List[String]] = Field(
        None, description='The nodes preceding this node'
    )
    toEdges: Optional[List[String]] = Field(
        None, description='The nodes following this node'
    )
    typename__: Optional[Literal['LinkedFlow']] = Field(
        'LinkedFlow', alias='__typename'
    )


class LinkedFlowsConnection(BaseModel):
    """
    Connection Type for LinkedFlow
    """

    nodes: List[LinkedFlow] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['LinkedFlowsConnection']] = Field(
        'LinkedFlowsConnection', alias='__typename'
    )


class Metric(Taggable):
    """
    Metrics are time series data constructed from fields contained in views.
    *Retired in Tableau Cloud February 2024 / Server 2024.2.*
    """

    containerName: Optional[String] = Field(
        None,
        description='The name of the container in which the metric is visible and usable. This is always a project.',
    )
    containerType: String = Field(
        ...,
        description='The type of the container in which the metric is visible and usable. This is always a project.',
    )
    createdAt: DateTime = Field(..., description='Time the Metric was created')
    description: Optional[String] = Field(None, description='Description of the Metric')
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    owner: TableauUser = Field(..., description='User who owns this Metric')
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the Metric is visible and usable.',
    )
    projectVizportalUrlId: String = Field(
        ...,
        description='The ID of the project in which the Metric is visible and usable.',
    )
    site: TableauSite = Field(
        ..., description='The site in which the Metric is visible and usable'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the Metric')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the Metric'
    )
    underlyingView: Optional[View] = Field(
        None, description='The original View off of which the Metric is based'
    )
    updatedAt: DateTime = Field(..., description='Time the Metric was last updated')
    upstreamColumns: Optional[List[Optional[Column]]] = Field(
        None, description='Columns that are upstream of this metric'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns that are upstream of this metric'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this Metric'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this Metric')
    )
    upstreamDatabases: Optional[List[Optional[Database]]] = Field(
        None, description='Databases that are upstream of this metric'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases that are upstream of this metric'
    )
    upstreamDatasources: Optional[List[Optional[PublishedDatasource]]] = Field(
        None, description='The Published Datasources that are upstream to this Metric'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='The Published Datasources that are upstream to this Metric'
    )
    upstreamFields: Optional[List[Optional[Field]]] = Field(
        None, description='fields that are upstream of this metric'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this metric'
    )
    upstreamFlowColumnOutputFields: Optional[List[Optional[FlowColumnOutputField]]] = (
        Field(None, description='OutputFields that are upstream of this Metric')
    )
    upstreamFlowColumnOutputFieldsConnection: Optional[
        FlowColumnOutputFieldsConnection
    ] = Field(None, description='OutputFields that are upstream of this Metric')
    upstreamFlowFieldOutputFields: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='OutputFields that are upstream of this Metric')
    )
    upstreamFlowFieldOutputFieldsConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='OutputFields that are upstream of this Metric')
    upstreamFlowOutputFields: Optional[List[Optional[FlowOutputField]]] = Field(
        None, description='OutputFields that are upstream of this Metric'
    )
    upstreamFlowOutputFieldsConnection: Optional[FlowOutputFieldsConnection] = Field(
        None, description='OutputFields that are upstream of this Metric'
    )
    upstreamFlows: Optional[List[Optional[Flow]]] = Field(
        None, description='The flows that are upstream of this metric'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='The flows that are upstream of this metric'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this Metric. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this Metric. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLenses: Optional[List[Optional[Lens]]] = Field(
        None, description='The Lenses that are upstream of this workbook'
    )
    upstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='The Lenses that are upstream of this workbook'
    )
    upstreamTables: List[Optional[DatabaseTable]] = Field(
        ..., description='tables that are upstream of this metric'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='tables that are upstream of this metric'
    )
    upstreamWorkbooks: Optional[List[Optional[Workbook]]] = Field(
        None, description='Workbooks that are upstream of this metric'
    )
    upstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks that are upstream of this metric'
    )
    vizportalUrlId: String = Field(
        ..., description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['Metric']] = Field('Metric', alias='__typename')


class MetricDefinition(BaseModel):
    """
    A Tableau Pulse metric definition.
    *Available in Tableau Cloud June 2024 and later. Tableau Pulse is not available in Tableau Server.*
    """

    fields: List[Field] = Field(
        ..., description='Fields contained in the metric definition'
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='Fields contained in the metric definition'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the Metadata API. Not the same as the locally unique identifier used with the REST API.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server.',
    )
    name: String = Field(..., description='Name of the metric definition.')
    site: TableauSite = Field(
        ..., description='The site which contains the metric definition.'
    )
    upstreamColumns: List[Column] = Field(
        ..., description='Columns upstream from the metric definition.'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns upstream from the metric definition.'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream from the metric definition'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream from the metric definition'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Data sources upstream from the metric definition.'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Data sources upstream from the metric definition.'
    )
    upstreamFields: List[Field] = Field(
        ..., description='Fields upstream from the metric definition.'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='Fields upstream from the metric definition.'
    )
    upstreamFlowOutputFields: List[FlowOutputField] = Field(
        ..., description='Flow output fields upstream from the metric definition.'
    )
    upstreamFlowOutputFieldsConnection: Optional[FlowOutputFieldsConnection] = Field(
        None, description='Flow output fields upstream from the metric definition.'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows upstream from the metric definition.'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream from the metric definition.'
    )
    upstreamLabels: List[Label] = Field(
        ..., description='Labels upstream from the metric definition.'
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None, description='Labels upstream from the metric definition.'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream from the metric definition.'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream from the metric definition.'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ...,
        description='Virtual connection tables upstream from the metric definition.',
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None,
        description='Virtual connection tables upstream from the metric definition.',
    )
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream from the metric definition.'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(
            None, description='Virtual connections upstream from the metric definition.'
        )
    )
    typename__: Optional[Literal['MetricDefinition']] = Field(
        'MetricDefinition', alias='__typename'
    )


class MetricDefinitionsConnection(BaseModel):
    """
    Connection Type for MetricDefinition
    """

    nodes: List[MetricDefinition] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['MetricDefinitionsConnection']] = Field(
        'MetricDefinitionsConnection', alias='__typename'
    )


class MetricsConnection(BaseModel):
    """
    Connection Type for Metric
    """

    nodes: List[Metric] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['MetricsConnection']] = Field(
        'MetricsConnection', alias='__typename'
    )


class NodesConnection(BaseModel):
    """
    Connection Type for Node
    """

    nodes: List[Node] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['NodesConnection']] = Field(
        'NodesConnection', alias='__typename'
    )


class PageInfo(BaseModel):
    """
    Information about pagination in a connection
    """

    endCursor: Optional[String] = Field(
        None,
        description='Cursor to use in subsequent query to fetch next page of objects',
    )
    hasNextPage: Boolean = Field(
        ..., description='Indicates if there are more objects to fetch'
    )
    typename__: Optional[Literal['PageInfo']] = Field('PageInfo', alias='__typename')


class Parameter(BaseModel):
    """
    Tableau Parameter. For more info see https://onlinehelp.tableau.com/current/pro/desktop/en-us/parameters_create.html
    """

    datasource: Optional[PublishedDatasource] = Field(
        None, description='Published data source that contains this parameter'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(None, description='Name of parameter')
    parentName: Optional[String] = Field(
        None, description="Name of the parameter's parent"
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this parameter'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this parameter'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this parameter'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this parameter'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this parameter references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this parameter references'
    )
    workbook: Optional[Workbook] = Field(
        None, description='Workbook that contains this parameter'
    )
    typename__: Optional[Literal['Parameter']] = Field('Parameter', alias='__typename')


class ParametersConnection(BaseModel):
    """
    Connection Type for Parameter
    """

    nodes: List[Parameter] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['ParametersConnection']] = Field(
        'ParametersConnection', alias='__typename'
    )


class PublishedDatasource(CanHaveLabels, Certifiable, Datasource, Taggable, Warnable):
    """
    A Tableau data source that has been published separately to Tableau Server. It can be used by multiple workbooks.
    """

    certificationNote: Optional[String] = Field(
        None, description='Notes related to the data source being marked as certified'
    )
    certifier: Optional[TableauUser] = Field(
        None, description='User who marked this data source as certified'
    )
    certifierDisplayName: Optional[String] = Field(
        None, description='Name of the user who marked this data source as certified'
    )
    containerName: Optional[String] = Field(
        None,
        description='The name of the container in which the published data source is visible and usable. Either a personal space or project.',
    )
    containerType: String = Field(
        ...,
        description='The type of the container in which the published data source is visible and usable. Either personal space or project.',
    )
    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    createdAt: Optional[DateTime] = Field(
        None,
        description='Time the datasource was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a published datasource'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(
        None, description='The data quality certifications on a published datasource'
    )
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on a published datasource'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a published datasource'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a published datasource'
    )
    datasourceFilters: List[DatasourceFilter] = Field(
        ..., description='Data source filters contained in this data source'
    )
    datasourceFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='Data source filters contained in this data source'
    )
    description: Optional[String] = Field(
        None, description='Description of the datasource'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream from this data source'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream from this data source'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources downstream from this data source'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources downstream from this data source'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream from this data source'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream from this data source'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: List[Optional[MetricDefinition]] = Field(
        ..., description='Metric definitions downstream from the data source.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from the data source.')
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics downstream from this data source'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics downstream from this data source'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Workbook owners downstream from this data source'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Workbook owners downstream from this data source'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets downstream from this data source'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets downstream from this data source'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream from this data source'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream from this data source'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this data source'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None, description='Virtual connection tables downstream of this data source'
    )
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream from this data source'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream from this data source')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks downstream from this data source'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks downstream from this data source'
    )
    extractLastIncrementalUpdateTime: Optional[DateTime] = Field(
        None, description='Time an extract was last incrementally updated'
    )
    extractLastRefreshTime: Optional[DateTime] = Field(
        None, description='Time an extract was last fully refreshed'
    )
    extractLastUpdateTime: Optional[DateTime] = Field(
        None,
        description='Time an extract was last updated by either a full refresh, incremental update, or creation',
    )
    fields: List[Field] = Field(
        ..., description='Fields usable in workbooks connected to this data source'
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='Fields usable in workbooks connected to this data source'
    )
    hasActiveWarning: Boolean = Field(
        ..., description='True if the data source has an active data quality warning'
    )
    hasExtracts: Optional[Boolean] = Field(
        None, description='True if datasource contains extracted data'
    )
    hasUserReference: Optional[Boolean] = Field(
        None,
        description='True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)',
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this data source contains an active data quality certification',
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a published datasource. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a published datasource. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    lenses: Optional[List[Optional[Lens]]] = Field(
        None, description='The lenses derived from this datasource'
    )
    lensesConnection: Optional[LensesConnection] = Field(
        None, description='The lenses derived from this datasource'
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    owner: TableauUser = Field(..., description='User who owns this data source')
    parameters: List[Parameter] = Field(
        ..., description='List of parameters, if any, used in this data source'
    )
    parametersConnection: Optional[ParametersConnection] = Field(
        None, description='List of parameters, if any, used in this data source'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project that contains this published data source.',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the published data source is visible and usable. Will return null if the published data source is not in a project.',
    )
    site: TableauSite = Field(
        ..., description='The site which contains this published data source'
    )
    tags: List[Tag] = Field(
        ..., description='Tags associated with the published datasource'
    )
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the published datasource'
    )
    updatedAt: Optional[DateTime] = Field(
        None,
        description='Time the datasource was last updated. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this data source'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this data source')
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream from this data source'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream from this data source'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream from this data source'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream from this data source'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows upstream from this data source'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream from this data source'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this data source. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this data source. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream from this data source'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream from this data source'
    )
    upstreamVirtualConnectionTables: List[Optional[VirtualConnectionTable]] = Field(
        ..., description='The virtual connection table upstream to this Datasource'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None, description='The virtual connection table upstream to this Datasource'
    )
    upstreamVirtualConnections: List[Optional[VirtualConnection]] = Field(
        ..., description='The virtual connection upstream to this Datasource'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='The virtual connection upstream to this Datasource')
    )
    uri: Optional[String] = Field(None, description='Uri of the datasource')
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this published datasource, for use in client-to-server communications',
    )
    vizportalUrlId: String = Field(
        ..., description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['PublishedDatasource']] = Field(
        'PublishedDatasource', alias='__typename'
    )


class PublishedDatasourcesConnection(BaseModel):
    """
    Connection Type for PublishedDatasource
    """

    nodes: List[PublishedDatasource] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['PublishedDatasourcesConnection']] = Field(
        'PublishedDatasourcesConnection', alias='__typename'
    )


class SetField(FieldModel, FieldReferencingField, Node):
    """
    GraphQL type for a set field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_sets_create.html
    """

    datasource: Optional[Datasource] = Field(
        None, description='Data source that contains this field'
    )
    derivedLensFields: Optional[List[Optional[LensField]]] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    derivedLensFieldsConnection: Optional[LensFieldsConnection] = Field(
        None, description='List of lens fields which are derived from this field'
    )
    description: Optional[String] = Field(
        None, description='Description of field shown in server and desktop clients'
    )
    descriptionInherited: Optional[List[Optional[InheritedStringResult]]] = Field(
        None, description='description that is shown in the Tableau UI'
    )
    directSheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this field'
    )
    directSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this field'
    )
    downstreamColumns: List[Column] = Field(
        ..., description='Columns downstream of this field'
    )
    downstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns downstream of this field'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected downstream from the field'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected downstream from the field'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this field'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this field'
    )
    downstreamDatasources: Optional[List[PublishedDatasource]] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected downstream from this field'
    )
    downstreamFields: List[Field] = Field(
        ..., description='downstream fields that reference this field'
    )
    downstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='downstream fields that reference this field'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this field'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this field'
    )
    downstreamLenses: Optional[List[Lens]] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected downstream from this field'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this field.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this field.')
    )
    downstreamMetrics: Optional[List[Metric]] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected downstream from the field'
    )
    downstreamOwners: Optional[List[TableauUser]] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Workbook owners (authors) connected downstream from the field',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected downstream from the field'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected downstream from the field'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this field'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this field'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this field'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this field')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this field'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this field')
    )
    downstreamWorkbooks: Optional[List[Workbook]] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected downstream from the field'
    )
    fields: List[Field] = Field(
        ..., description='List of fields, if any, that this field references'
    )
    fieldsConnection: Optional[FieldsConnection] = Field(
        None, description='List of fields, if any, that this field references'
    )
    folderName: Optional[String] = Field(
        None,
        description='Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize',
    )
    fullyQualifiedName: Optional[String] = Field(
        None, description='Name internally used to uniquely identify fields'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that reference this data source field.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    parameters: List[Parameter] = Field(
        ..., description='List of parameters, if any, used in this field'
    )
    parametersConnection: Optional[ParametersConnection] = Field(
        None, description='List of parameters, if any, used in this field'
    )
    referencedByBins: Optional[List[Optional[BinField]]] = Field(
        None, description='The bin field that references this field'
    )
    referencedByBinsConnection: Optional[BinFieldsConnection] = Field(
        None, description='The bin field that references this field'
    )
    referencedByCalculations: Optional[List[Optional[CalculatedField]]] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCalculationsConnection: Optional[CalculatedFieldsConnection] = Field(
        None, description='The calculated field that references this field'
    )
    referencedByCombinedFields: Optional[List[Optional[CombinedField]]] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedFieldsConnection: Optional[CombinedFieldsConnection] = Field(
        None, description='The combined field that references this field'
    )
    referencedByCombinedSets: Optional[List[Optional[CombinedSetField]]] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByCombinedSetsConnection: Optional[CombinedSetFieldsConnection] = Field(
        None, description='Thie combined set field that references this field'
    )
    referencedByFields: Optional[List[Optional[FieldReferencingField]]] = Field(
        None, description='The field that references this field'
    )
    referencedByFieldsConnection: Optional[FieldReferencingFieldsConnection] = Field(
        None, description='The field that references this field'
    )
    referencedByFilters: Optional[List[Optional[DatasourceFilter]]] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFiltersConnection: Optional[DatasourceFiltersConnection] = Field(
        None, description='The data source filters that include this field'
    )
    referencedByFlowFieldInputField: Optional[List[Optional[FlowFieldInputField]]] = (
        Field(None, description='A flow input field that wraps this field')
    )
    referencedByFlowFieldInputFieldConnection: Optional[
        FlowFieldInputFieldsConnection
    ] = Field(None, description='A flow input field that wraps this field')
    referencedByFlowFieldOutputField: Optional[List[Optional[FlowFieldOutputField]]] = (
        Field(None, description='A flow output field that wraps this field')
    )
    referencedByFlowFieldOutputFieldConnection: Optional[
        FlowFieldOutputFieldsConnection
    ] = Field(None, description='A flow output field that wraps this field')
    referencedByGroups: Optional[List[Optional[GroupField]]] = Field(
        None, description='The group field that references this field'
    )
    referencedByGroupsConnection: Optional[GroupFieldsConnection] = Field(
        None, description='The group field that references this field'
    )
    referencedByHierarchies: Optional[List[Optional[HierarchyField]]] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByHierarchiesConnection: Optional[HierarchyFieldsConnection] = Field(
        None, description='The hierarchy field that references this field'
    )
    referencedByRemoteFields: Optional[List[Optional[DatasourceField]]] = Field(
        None, description='The field that references this remote field'
    )
    referencedByRemoteFieldsConnection: Optional[DatasourceFieldsConnection] = Field(
        None, description='The field that references this remote field'
    )
    referencedBySets: Optional[List[Optional[SetField]]] = Field(
        None, description='The set field that this field references'
    )
    referencedBySetsConnection: Optional[SetFieldsConnection] = Field(
        None, description='The set field that this field references'
    )
    sheets: Optional[List[Optional[Sheet]]] = Field(
        None, description='Sheets that reference this data source field'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets that reference this data source field'
    )
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='All upstream columns this field references'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='All upstream columns this field references'
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases connected upstream from the field'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases connected upstream from the field'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources connected upstream from the field'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources connected upstream from the field'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='fields that are upstream of this field'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='fields that are upstream of this field'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows connected upstream from the field'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows connected upstream from the field'
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables connected upstream from the field'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables connected upstream from the field'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this field'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this field')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this field'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this field')
    )
    typename__: Optional[Literal['SetField']] = Field('SetField', alias='__typename')


class SetFieldsConnection(BaseModel):
    """
    Connection Type for SetField
    """

    nodes: List[SetField] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['SetFieldsConnection']] = Field(
        'SetFieldsConnection', alias='__typename'
    )


class Sheet(Taggable, View):
    """
    A sheet contained in a published workbook.
    """

    containedInDashboards: Optional[List[Optional[Dashboard]]] = Field(
        None, description='Dashboards that contain this sheet'
    )
    containedInDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards that contain this sheet'
    )
    createdAt: DateTime = Field(..., description='Time the sheet was created')
    datasourceFields: Optional[List[Optional[Field]]] = Field(
        None,
        description='Fields that are contained in an embedded data source and are also referenced by the worksheet. If a worksheet uses calculated fields (or any other FieldReferencingField), this list will also include all of the referenced fields.',
    )
    datasourceFieldsConnection: Optional[FieldsConnection] = Field(
        None,
        description='Fields that are contained in an embedded data source and are also referenced by the worksheet. If a worksheet uses calculated fields (or any other FieldReferencingField), this list will also include all of the referenced fields.',
    )
    documentViewId: Optional[String] = Field(
        None,
        description='Unique ID for the sheet generated for and stored within the workbook, survives renames, and is used for internal processes',
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    index: Optional[Int] = Field(
        None, description='Index of view; the order it appears in the workbook'
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    parentEmbeddedDatasources: List[EmbeddedDatasource] = Field(
        ..., description='Parent embedded data source of this sheet'
    )
    parentEmbeddedDatasourcesConnection: Optional[EmbeddedDatasourcesConnection] = (
        Field(None, description='Parent embedded data source of this sheet')
    )
    path: Optional[String] = Field(None, description='Server path to sheet')
    referencedByMetrics: Optional[List[Optional[Metric]]] = Field(
        None, description='The Metrics that reference this View'
    )
    referencedByMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='The Metrics that reference this View'
    )
    sheetFieldInstances: Optional[List[Optional[Field]]] = Field(
        None,
        description='All fields in the collection worksheetFields as well as the fields in datasourceFields used directly by this sheet. If the worksheet uses calculated fields this list will not include referenced fields that are not directly used by the sheet.',
    )
    sheetFieldInstancesConnection: Optional[FieldsConnection] = Field(
        None,
        description='All fields in the collection worksheetFields as well as the fields in datasourceFields used directly by this sheet. If the worksheet uses calculated fields this list will not include referenced fields that are not directly used by the sheet.',
    )
    tags: List[Tag] = Field(..., description='Tags associated with the view')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the view'
    )
    updatedAt: DateTime = Field(..., description='Time the sheet was updated')
    upstreamColumns: List[Optional[Column]] = Field(
        ..., description='The columns that are upstream of this sheet'
    )
    upstreamColumnsConnection: Optional[ColumnsConnection] = Field(
        None, description='The columns that are upstream of this sheet'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this sheet'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this sheet')
    )
    upstreamDatabases: Optional[List[Optional[Database]]] = Field(
        None, description='The databases that are upstream of this sheet'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='The databases that are upstream of this sheet'
    )
    upstreamDatasources: Optional[List[Optional[Datasource]]] = Field(
        None, description='The data sources that are upstream of this sheet'
    )
    upstreamDatasourcesConnection: Optional[DatasourcesConnection] = Field(
        None, description='The data sources that are upstream of this sheet'
    )
    upstreamFields: List[Optional[Field]] = Field(
        ..., description='The fields that are upstream of this sheet'
    )
    upstreamFieldsConnection: Optional[FieldsConnection] = Field(
        None, description='The fields that are upstream of this sheet'
    )
    upstreamFlows: Optional[List[Optional[Flow]]] = Field(
        None, description='The flows that are upstream of this sheet'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='The flows that are upstream of this sheet'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this sheet. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this sheet. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: Optional[List[Optional[Table]]] = Field(
        None, description='The tables that are upstream of this sheet'
    )
    upstreamTablesConnection: Optional[TablesConnection] = Field(
        None, description='The tables that are upstream of this sheet'
    )
    workbook: Optional[Workbook] = Field(
        None, description='The workbook that contains this view'
    )
    worksheetFields: Optional[List[Optional[CalculatedField]]] = Field(
        None,
        description='Calculated fields which were created on this sheet, e.g. in the rows or columns shelves and which may not be used on other sheets that use this embedded data source',
    )
    worksheetFieldsConnection: Optional[CalculatedFieldsConnection] = Field(
        None,
        description='Calculated fields which were created on this sheet, e.g. in the rows or columns shelves and which may not be used on other sheets that use this embedded data source',
    )
    typename__: Optional[Literal['Sheet']] = Field('Sheet', alias='__typename')


class SheetsConnection(BaseModel):
    """
    Connection Type for Sheet
    """

    nodes: List[Sheet] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['SheetsConnection']] = Field(
        'SheetsConnection', alias='__typename'
    )


class TableAdditionalDetails(BaseModel):
    """
    Additional details for the DatabaseTable type

    *Available in Tableau Cloud February 2024 / Server 2024.2 and later.*
    """

    category: Optional[String] = Field(
        None, description='Category of the Data Cloud object'
    )
    cdpInternalId: Optional[String] = Field(
        None, description='Internal ID of the Data Cloud object'
    )
    createdBy: Optional[String] = Field(
        None, description='The Data Cloud user who created this object'
    )
    dataCloudApiName: Optional[String] = Field(
        None, description='API name of the Data Cloud object'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used with the Metadata API.  Not the same as the locally unique identifier used with the REST API.',
    )
    table: Optional[List[Optional[DatabaseTable]]] = Field(
        None, description='The tables that this additional detail is for'
    )
    tableConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='The tables that this additional detail is for'
    )
    typename__: Optional[Literal['TableAdditionalDetails']] = Field(
        'TableAdditionalDetails', alias='__typename'
    )


class TableAdditionalDetailsesConnection(BaseModel):
    """
    Connection Type for TableAdditionalDetails
    """

    nodes: List[TableAdditionalDetails] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['TableAdditionalDetailsesConnection']] = Field(
        'TableAdditionalDetailsesConnection', alias='__typename'
    )


class TableauSite(BaseModel):
    """
    Site on Tableau server
    """

    createdAt: Optional[DateTime] = Field(
        None,
        description='Time the site was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    flows: Optional[List[Optional[Flow]]] = Field(
        None, description='The flows that are part of this site'
    )
    flowsConnection: Optional[FlowsConnection] = Field(
        None, description='The flows that are part of this site'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    lenses: Optional[List[Optional[Lens]]] = Field(
        None, description='The Lenses that are part of this site'
    )
    lensesConnection: Optional[LensesConnection] = Field(
        None, description='The Lenses that are part of this site'
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    metricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions that are part of this site.'
    )
    metricDefinitionsConnection: Optional[MetricDefinitionsConnection] = Field(
        None, description='Metric definitions that are part of this site.'
    )
    metrics: Optional[List[Optional[Metric]]] = Field(
        None, description='The Metrics that are part of this site'
    )
    metricsConnection: Optional[MetricsConnection] = Field(
        None, description='The Metrics that are part of this site'
    )
    name: String = Field(..., description='Name shown in server')
    publishedDatasources: Optional[List[Optional[PublishedDatasource]]] = Field(
        None, description='The published data sources that are part of this site'
    )
    publishedDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='The published data sources that are part of this site'
    )
    uri: String = Field(..., description="URI of this site, e.g., 'sites/4'")
    virtualConnections: Optional[List[Optional[VirtualConnection]]] = Field(
        None, description='The virtual connections that are part of this site'
    )
    virtualConnectionsConnection: Optional[VirtualConnectionsConnection] = Field(
        None, description='The virtual connections that are part of this site'
    )
    workbooks: Optional[List[Optional[Workbook]]] = Field(
        None, description='The workbooks that are part of this site'
    )
    workbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='The workbooks that are part of this site'
    )
    typename__: Optional[Literal['TableauSite']] = Field(
        'TableauSite', alias='__typename'
    )


class TableauSitesConnection(BaseModel):
    """
    Connection Type for TableauSite
    """

    nodes: List[TableauSite] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['TableauSitesConnection']] = Field(
        'TableauSitesConnection', alias='__typename'
    )


class TableauUser(BaseModel):
    """
    User on a site on Tableau server
    """

    authoredDataQualityCertifications: Optional[
        List[Optional[DataQualityCertification]]
    ] = Field(
        None, description='The data quality certifications this user has authored'
    )
    authoredDataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(
        None, description='The data quality certifications this user has authored'
    )
    authoredDataQualityWarnings: Optional[List[Optional[DataQualityWarning]]] = Field(
        None, description='The data quality warnings this user has authored'
    )
    authoredDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='The data quality warnings this user has authored')
    )
    authoredLabels: Optional[List[Optional[Label]]] = Field(
        None, description='The labels this user has authored'
    )
    authoredLabelsConnection: Optional[LabelsConnection] = Field(
        None, description='The labels this user has authored'
    )
    certifiedDatabases: Optional[List[Optional[Database]]] = Field(
        None, description='The databases that this user has certified'
    )
    certifiedDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='The databases that this user has certified'
    )
    certifiedDatasources: Optional[List[Optional[PublishedDatasource]]] = Field(
        None, description='The published data sources that this user has certified'
    )
    certifiedDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='The published data sources that this user has certified'
    )
    certifiedTables: Optional[List[Optional[DatabaseTable]]] = Field(
        None, description='The tables that this user has certified'
    )
    certifiedTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='The tables that this user has certified'
    )
    contactForDatabases: Optional[List[Optional[Database]]] = Field(
        None, description='The databases that this user is the contact for'
    )
    contactForDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='The databases that this user is the contact for'
    )
    contactForTables: Optional[List[Optional[DatabaseTable]]] = Field(
        None, description='The tables that this user is the contact for'
    )
    contactForTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='The tables that this user is the contact for'
    )
    domain: Optional[String] = Field(None, description='Domain this user belongs to')
    email: Optional[String] = Field(None, description='Email address of this user')
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='Display name of this user')
    ownedDatasources: Optional[List[Optional[PublishedDatasource]]] = Field(
        None, description='The published data sources that belong to this user'
    )
    ownedDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='The published data sources that belong to this user'
    )
    ownedFlows: Optional[List[Optional[Flow]]] = Field(
        None, description='The flows that belong to this user'
    )
    ownedFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='The flows that belong to this user'
    )
    ownedLenses: Optional[List[Optional[Lens]]] = Field(
        None, description='The Lenses that belong to this user'
    )
    ownedLensesConnection: Optional[LensesConnection] = Field(
        None, description='The Lenses that belong to this user'
    )
    ownedMetrics: Optional[List[Optional[Metric]]] = Field(
        None, description='The Metrics that belong to this user'
    )
    ownedMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='The Metrics that belong to this user'
    )
    ownedVirtualConnectionTables: Optional[List[Optional[VirtualConnectionTable]]] = (
        Field(
            None, description='The virtual connection tables that belong to this user'
        )
    )
    ownedVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None, description='The virtual connection tables that belong to this user'
    )
    ownedVirtualConnections: Optional[List[Optional[VirtualConnection]]] = Field(
        None, description='The virtual connections that belong to this user'
    )
    ownedVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = Field(
        None, description='The virtual connections that belong to this user'
    )
    ownedWorkbooks: Optional[List[Optional[Workbook]]] = Field(
        None, description='The workbooks that belong to this user'
    )
    ownedWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='The workbooks that belong to this user'
    )
    uri: String = Field(..., description="URI of this user, e.g., 'sites/1/users/1396'")
    username: Optional[String] = Field(None, description='Username of this user')
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this user, for use in client-to-server communications',
    )
    typename__: Optional[Literal['TableauUser']] = Field(
        'TableauUser', alias='__typename'
    )


class TableauUsersConnection(BaseModel):
    """
    Connection Type for TableauUser
    """

    nodes: List[TableauUser] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['TableauUsersConnection']] = Field(
        'TableauUsersConnection', alias='__typename'
    )


class TablesConnection(BaseModel):
    """
    Connection Type for Table
    """

    nodes: List[Table] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['TablesConnection']] = Field(
        'TablesConnection', alias='__typename'
    )


class Tag(BaseModel):
    """
    A tag associated with content items
    """

    assets: Optional[List[Optional[Taggable]]] = Field(
        None, description='The assets that are associated with this tag'
    )
    assetsConnection: Optional[TaggablesConnection] = Field(
        None, description='The assets that are associated with this tag'
    )
    columns: Optional[List[Optional[Column]]] = Field(
        None, description='The columns that are associated with this tag'
    )
    columnsConnection: Optional[ColumnsConnection] = Field(
        None, description='The columns that are associated with this tag'
    )
    databaseTables: Optional[List[Optional[DatabaseTable]]] = Field(
        None, description='The tables that are associated with this tag'
    )
    databaseTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='The tables that are associated with this tag'
    )
    databases: Optional[List[Optional[Database]]] = Field(
        None, description='The databases that are associated with this tag'
    )
    databasesConnection: Optional[DatabasesConnection] = Field(
        None, description='The databases that are associated with this tag'
    )
    flows: Optional[List[Optional[Flow]]] = Field(
        None, description='The flows that are associated with this tag'
    )
    flowsConnection: Optional[FlowsConnection] = Field(
        None, description='The flows that are associated with this tag'
    )
    id: ID = Field(..., description='Unique identifier used by the metadata API.')
    metrics: Optional[List[Optional[Metric]]] = Field(
        None, description='The Metrics that are associated with this tag'
    )
    metricsConnection: Optional[MetricsConnection] = Field(
        None, description='The Metrics that are associated with this tag'
    )
    name: Optional[String] = Field(None, description='The name of the tag')
    publishedDatasources: Optional[List[Optional[PublishedDatasource]]] = Field(
        None, description='The published datasources that are associated with this tag'
    )
    publishedDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='The published datasources that are associated with this tag'
    )
    views: Optional[List[Optional[View]]] = Field(
        None, description='The views that are associated with this tag'
    )
    viewsConnection: Optional[ViewsConnection] = Field(
        None, description='The views that are associated with this tag'
    )
    virtualConnectionTables: Optional[List[Optional[VirtualConnectionTable]]] = Field(
        None,
        description='The virtual connection tables that are associated with this tag',
    )
    virtualConnectionTablesConnection: Optional[VirtualConnectionTablesConnection] = (
        Field(
            None,
            description='The virtual connection tables that are associated with this tag',
        )
    )
    virtualConnections: Optional[List[Optional[VirtualConnection]]] = Field(
        None, description='The virtual connections that are associated with this tag'
    )
    virtualConnectionsConnection: Optional[VirtualConnectionsConnection] = Field(
        None, description='The virtual connections that are associated with this tag'
    )
    workbooks: Optional[List[Optional[Workbook]]] = Field(
        None, description='The workbooks that are associated with this tag'
    )
    workbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='The workbooks that are associated with this tag'
    )
    typename__: Optional[Literal['Tag']] = Field('Tag', alias='__typename')


class TaggablesConnection(BaseModel):
    """
    Connection Type for Taggable
    """

    nodes: List[Taggable] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['TaggablesConnection']] = Field(
        'TaggablesConnection', alias='__typename'
    )


class TagsConnection(BaseModel):
    """
    Connection Type for Tag
    """

    nodes: List[Tag] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['TagsConnection']] = Field(
        'TagsConnection', alias='__typename'
    )


class ViewsConnection(BaseModel):
    """
    Connection Type for View
    """

    nodes: List[View] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['ViewsConnection']] = Field(
        'ViewsConnection', alias='__typename'
    )


class VirtualConnection(CanHaveLabels, Certifiable, Taggable, Warnable):
    """
    A virtual connection.
    *Available in Tableau Cloud March 2022 / Server 2022.1 and later.*
    """

    connectionType: Optional[String] = Field(
        None, description='Connection type of this virtual connection'
    )
    containerName: Optional[String] = Field(
        None,
        description='The name of the container in which the virtual connection is visible and usable. Either a personal space or project.',
    )
    containerType: String = Field(
        ...,
        description='The type of the container in which the virtual connection is visible and usable. Either personal space or project.',
    )
    createdAt: Optional[DateTime] = Field(
        None,
        description='Time the Virtual Connection was created. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a virtual connection'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(
        None, description='The data quality certifications on a virtual connection'
    )
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None,
        description='Singular data quality warning, deprecated but required to implement @warnable',
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a virtual connection'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a virtual connection'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this virtual connection'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards downstream of this virtual connection'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards downstream of this virtual connection'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published Data Sources downstream of this virtual connection'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published Data Sources downstream of this virtual connection'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this virtual connection'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this virtual connection'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses downstream of this published connection'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses downstream of this published connection'
    )
    downstreamMetricDefinitions: Optional[List[Optional[MetricDefinition]]] = Field(
        None, description='Metric definitions downstream from this VirtualConnection.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(
            None,
            description='Metric definitions downstream from this VirtualConnection.',
        )
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics downstream of this virtual connection'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics downstream of this virtual connection'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners connected to the database'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners connected to the database'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets downstream of this virtual connection'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets downstream of this virtual connection'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='VirtualConnectionTables downstream of this virtual connection'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None,
        description='VirtualConnectionTables downstream of this virtual connection',
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks downstream of this virtual connection'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks downstream of this virtual connection'
    )
    hasActiveWarning: Boolean = Field(
        ...,
        description='True if the virtual connection has an active data quality warning',
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this virtual connection contains an active data quality certification',
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a virtual connection. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a virtual connection. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    owner: TableauUser = Field(..., description='User who owns this virtual connection')
    projectName: Optional[String] = Field(
        None,
        description='The name of the project that contains this virtual connection.',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the virtual connection is visible and usable. Will return null if the published virtual connection is not in a project.',
    )
    site: TableauSite = Field(
        ..., description='The site which contains this virtual connection'
    )
    tables: List[VirtualConnectionTable] = Field(
        ..., description='The tables exposed by this virtual connection'
    )
    tablesConnection: Optional[VirtualConnectionTablesConnection] = Field(
        None, description='The tables exposed by this virtual connection'
    )
    tags: List[Tag] = Field(
        ..., description='Tags associated with the virtual connection'
    )
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the virtual connection'
    )
    updatedAt: Optional[DateTime] = Field(
        None,
        description='Time the Virtual Connection was last updated. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this virtual connection'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(
            None,
            description='Data quality warnings upstream from this virtual connection',
        )
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this virtual connection'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this virtual connection'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this virtual connection'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this virtual connection'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows upstream of this virtual connection'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this virtual connection'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this virtual connection. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this virtual connection. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this virtual connection'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this virtual connection'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ...,
        description='The virtual connection tables that are upstream to this virtual connection',
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None,
        description='The virtual connection tables that are upstream to this virtual connection',
    )
    uri: Optional[String] = Field(None, description='Uri of the virtual connection')
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this table, for use in client-to-server communications',
    )
    vizportalUrlId: String = Field(
        ..., description='Vizportal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['VirtualConnection']] = Field(
        'VirtualConnection', alias='__typename'
    )


class VirtualConnectionTable(CanHaveLabels, Certifiable, Table, Taggable, Warnable):
    """
    A table in a virtual connection.
    *Available in Tableau Cloud March 2022 / Server 2022.1 and later.*
    """

    columns: List[Column] = Field(..., description='Columns contained by this table')
    columnsConnection: Optional[ColumnsConnection] = Field(
        None, description='Columns contained by this table'
    )
    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a virtual connection table'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(
        None,
        description='The data quality certifications on a virtual connection table',
    )
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None,
        description='Singular data quality warning, deprecated but required to implement @warnable',
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a virtual connection table'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a virtual connection table'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this table'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected to the table'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected to the table'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this table'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this table'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources connected to the table'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources connected to the table'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this table'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this table'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses connected to the table'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected to the table'
    )
    downstreamMetricDefinitions: List[Optional[MetricDefinition]] = Field(
        ...,
        description='Metric definitions downstream from this virtualConnectionTable.',
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(
            None,
            description='Metric definitions downstream from this virtualConnectionTable.',
        )
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics downstream of this table'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics downstream of this table'
    )
    downstreamOwners: List[TableauUser] = Field(
        ...,
        description='Owners of workbooks and published datasources connected to the table',
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None,
        description='Owners of workbooks and published datasources connected to the table',
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected to the table'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected to the table'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this table'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this table'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this table'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this table')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections downstream of this table'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections downstream of this table')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks connected to the table'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected to the table'
    )
    extractLastRefreshType: Optional[ExtractType] = Field(
        None,
        description="The type of this table's last extract refresh (incremental or full).",
    )
    extractLastRefreshedAt: Optional[DateTime] = Field(
        None, description="The time the data for this table's extract was refreshed."
    )
    hasActiveWarning: Boolean = Field(
        ..., description='True if the table has an active data quality warning'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this virtual connection table contains an active data quality certification',
    )
    isEmbedded: Optional[Boolean] = Field(
        None,
        description='True if this table is embedded in Tableau content, e.g., a packaged workbook',
    )
    isExtracted: Optional[Boolean] = Field(
        None, description='Whether or not queries to this table are using an extract.'
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a virtual connection table. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a virtual connection table. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    owner: TableauUser = Field(
        ..., description='User who owns this virtual connection table'
    )
    tags: List[Tag] = Field(..., description='Tags associated with this table')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with this table'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this virtual connection'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(
            None,
            description='Data quality warnings upstream from this virtual connection',
        )
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this table'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this table'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this table'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this table'
    )
    upstreamFlows: List[Flow] = Field(..., description='Flows upstream of this table')
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this table'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this virtual connection. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this virtual connection. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this table'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this table'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this table'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this table')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connections upstream of this table'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connections upstream of this table')
    )
    uri: Optional[String] = Field(
        None, description='Uri of the virtual connection table'
    )
    virtualConnection: Optional[VirtualConnection] = Field(
        None, description='The parent virtual connection for this table'
    )
    vizportalId: Optional[String] = Field(
        None,
        description='Vizportal ID of this column, for use in client-to-server communications',
    )
    vizportalUrlId: String = Field(
        ..., description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['VirtualConnectionTable']] = Field(
        'VirtualConnectionTable', alias='__typename'
    )


class VirtualConnectionTablesConnection(BaseModel):
    """
    Connection Type for VirtualConnectionTable
    """

    nodes: List[VirtualConnectionTable] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['VirtualConnectionTablesConnection']] = Field(
        'VirtualConnectionTablesConnection', alias='__typename'
    )


class VirtualConnectionsConnection(BaseModel):
    """
    Connection Type for VirtualConnection
    """

    nodes: List[VirtualConnection] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['VirtualConnectionsConnection']] = Field(
        'VirtualConnectionsConnection', alias='__typename'
    )


class WarnablesConnection(BaseModel):
    """
    Connection Type for Warnable
    """

    nodes: List[Warnable] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['WarnablesConnection']] = Field(
        'WarnablesConnection', alias='__typename'
    )


class WebDataConnector(CanHaveLabels, Certifiable, Database, Taggable, Warnable):
    """
    A web data connector
    """

    certificationNote: Optional[String] = Field(
        None,
        description='Notes related to the web data connector table being marked as certified',
    )
    certifier: Optional[TableauUser] = Field(
        None, description='User who marked this database as certified'
    )
    connectionType: Optional[String] = Field(
        None, description='The type of web data connector'
    )
    connectorUrl: Optional[String] = Field(
        None, description='The url for the sign-in page of the web data connector'
    )
    contact: Optional[TableauUser] = Field(
        None, description='Contact for this database'
    )
    dataQualityCertifications: List[DataQualityCertification] = Field(
        ..., description='The data quality certifications on a database'
    )
    dataQualityCertificationsConnection: Optional[
        DataQualityCertificationsConnection
    ] = Field(None, description='The data quality certifications on a database')
    dataQualityWarning: Optional[DataQualityWarning] = Field(
        None, description='The optional data quality warning on a database'
    )
    dataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='The data quality warnings on a database'
    )
    dataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = Field(
        None, description='The data quality warnings on a database'
    )
    description: Optional[String] = Field(
        None, description='User modifiable description of this database'
    )
    downstreamDashboards: List[Dashboard] = Field(
        ..., description='Dashboards connected to the database'
    )
    downstreamDashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards connected to the database'
    )
    downstreamDatabases: List[Database] = Field(
        ..., description='Databases downstream of this database'
    )
    downstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases downstream of this database'
    )
    downstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Published datasources connected to the database'
    )
    downstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Published datasources connected to the database'
    )
    downstreamFlows: List[Flow] = Field(
        ..., description='Flows downstream of this database'
    )
    downstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows downstream of this database'
    )
    downstreamLenses: List[Lens] = Field(
        ..., description='Lenses connected to the database'
    )
    downstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='Lenses connected to the database'
    )
    downstreamMetricDefinitions: List[Optional[MetricDefinition]] = Field(
        ..., description='Metric definitions downstream from this database.'
    )
    downstreamMetricDefinitionsConnection: Optional[MetricDefinitionsConnection] = (
        Field(None, description='Metric definitions downstream from this database.')
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics connected to the database'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics connected to the database'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Owners connected to the database'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Owners connected to the database'
    )
    downstreamSheets: List[Sheet] = Field(
        ..., description='Sheets connected to the database'
    )
    downstreamSheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Sheets connected to the database'
    )
    downstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables downstream of this database'
    )
    downstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables downstream of this database'
    )
    downstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables downstream of this database')
    downstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables downstream of this database'
    )
    downstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables downstream of this database')
    )
    downstreamWorkbooks: List[Workbook] = Field(
        ..., description='Workbooks connected to the database'
    )
    downstreamWorkbooksConnection: Optional[WorkbooksConnection] = Field(
        None, description='Workbooks connected to the database'
    )
    hasActiveWarning: Boolean = Field(
        ..., description='True if the database has an active data quality warning'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the Metadata API. Not the same as the numeric ID used on server',
    )
    isCertified: Boolean = Field(
        ...,
        description='True if this database contains an active data quality certification',
    )
    isControlledPermissionsEnabled: Optional[Boolean] = Field(
        None, description='True if this database has its permission locked'
    )
    isEmbedded: Optional[Boolean] = Field(
        None, description='A web data connector is always embedded in Tableau content'
    )
    isGrouped: Optional[Boolean] = Field(
        None, description='True if this database has been grouped with other databases'
    )
    labels: List[Label] = Field(
        ...,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    labelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='The labels on a database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    referencedByQueries: Optional[List[Optional[CustomSQLTable]]] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    referencedByQueriesConnection: Optional[CustomSQLTablesConnection] = Field(
        None, description='The custom SQL queries that reference this database'
    )
    tables: Optional[List[Optional[DatabaseTable]]] = Field(
        None, description='Tables belonging to this database'
    )
    tablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables belonging to this database'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the database')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the database'
    )
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this database'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this database')
    )
    upstreamDatabases: List[Database] = Field(
        ..., description='Databases upstream of this database'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='Databases upstream of this database'
    )
    upstreamDatasources: List[PublishedDatasource] = Field(
        ..., description='Datasources upstream of this database'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='Datasources upstream of this database'
    )
    upstreamFlows: List[Flow] = Field(
        ..., description='Flows upstream of this database'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='Flows upstream of this database'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this database. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamTables: List[DatabaseTable] = Field(
        ..., description='Tables upstream of this database'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='Tables upstream of this database'
    )
    upstreamVirtualConnectionTables: List[VirtualConnectionTable] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(None, description='Virtual connection tables upstream of this database')
    upstreamVirtualConnections: List[VirtualConnection] = Field(
        ..., description='Virtual connection tables upstream of this database'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='Virtual connection tables upstream of this database')
    )
    vizportalId: String = Field(
        ...,
        description='Vizportal ID of this database, for use in client-to-server communications',
    )
    typename__: Optional[Literal['WebDataConnector']] = Field(
        'WebDataConnector', alias='__typename'
    )


class WebDataConnectorsConnection(BaseModel):
    """
    Connection Type for WebDataConnector
    """

    nodes: List[WebDataConnector] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['WebDataConnectorsConnection']] = Field(
        'WebDataConnectorsConnection', alias='__typename'
    )


class Workbook(Taggable):
    """
    Workbooks are used to package up Tableau visualizations (which are called "sheets" in the Metadata API) and data models (which are called "embedded data sources" when they are owned by a workbook).
    """

    containerName: Optional[String] = Field(
        None,
        description='The name of the container in which the workbook is visible and usable. Either a personal space or project.',
    )
    containerType: String = Field(
        ...,
        description='The type of the container in which the workbook is visible and usable. Either personal space or project.',
    )
    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the workbook contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    createdAt: DateTime = Field(..., description='Time the workbook was created')
    dashboards: List[Dashboard] = Field(
        ..., description='Dashboards that are contained in this workbook'
    )
    dashboardsConnection: Optional[DashboardsConnection] = Field(
        None, description='Dashboards that are contained in this workbook'
    )
    description: Optional[String] = Field(
        None, description='Description of the workbook'
    )
    downstreamMetrics: List[Metric] = Field(
        ..., description='Metrics downstream from this workbook'
    )
    downstreamMetricsConnection: Optional[MetricsConnection] = Field(
        None, description='Metrics downstream from this workbook'
    )
    downstreamOwners: List[TableauUser] = Field(
        ..., description='Metric owners downstream from this workbook'
    )
    downstreamOwnersConnection: Optional[TableauUsersConnection] = Field(
        None, description='Metric owners downstream from this workbook'
    )
    embeddedDatasources: List[EmbeddedDatasource] = Field(
        ..., description='Data sources that are embedded in this workbook'
    )
    embeddedDatasourcesConnection: Optional[EmbeddedDatasourcesConnection] = Field(
        None, description='Data sources that are embedded in this workbook'
    )
    id: ID = Field(
        ...,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: String = Field(
        ...,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    owner: TableauUser = Field(..., description='User who owns this workbook')
    parameters: List[Parameter] = Field(
        ..., description='Parameters that are contained in this workbook'
    )
    parametersConnection: Optional[ParametersConnection] = Field(
        None, description='Parameters that are contained in this workbook'
    )
    projectLuid: Optional[String] = Field(
        None,
        description='The luid of the project in which the workbook is visible and usable. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the workbook is visible and usable.',
    )
    projectVizportalUrlId: Optional[String] = Field(
        None,
        description='The ID of the project in which the workbook is visible and usable. Will be null if the workbook is not in a project.',
    )
    sheets: List[Sheet] = Field(
        ..., description='Worksheets that are contained in this workbook'
    )
    sheetsConnection: Optional[SheetsConnection] = Field(
        None, description='Worksheets that are contained in this workbook'
    )
    site: TableauSite = Field(
        ..., description='The site in which the workbook is visible and usable'
    )
    tags: List[Tag] = Field(..., description='Tags associated with the workbook')
    tagsConnection: Optional[TagsConnection] = Field(
        None, description='Tags associated with the workbook'
    )
    updatedAt: DateTime = Field(..., description='Time the workbook was updated')
    upstreamDataQualityWarnings: List[DataQualityWarning] = Field(
        ..., description='Data quality warnings upstream from this workbook'
    )
    upstreamDataQualityWarningsConnection: Optional[DataQualityWarningsConnection] = (
        Field(None, description='Data quality warnings upstream from this workbook')
    )
    upstreamDatabases: List[Optional[Database]] = Field(
        ..., description='The Databases that are upstream to this Workbook'
    )
    upstreamDatabasesConnection: Optional[DatabasesConnection] = Field(
        None, description='The Databases that are upstream to this Workbook'
    )
    upstreamDatasources: List[Optional[PublishedDatasource]] = Field(
        ..., description='The Published Datasources that are upstream to this Workbook'
    )
    upstreamDatasourcesConnection: Optional[PublishedDatasourcesConnection] = Field(
        None, description='The Published Datasources that are upstream to this Workbook'
    )
    upstreamFlows: Optional[List[Optional[Flow]]] = Field(
        None, description='The flows that are upstream of this workbook'
    )
    upstreamFlowsConnection: Optional[FlowsConnection] = Field(
        None, description='The flows that are upstream of this workbook'
    )
    upstreamLabels: List[Label] = Field(
        ...,
        description='Labels upstream from this workbook. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLabelsConnection: Optional[LabelsConnection] = Field(
        None,
        description='Labels upstream from this workbook. Available in Tableau Cloud March 2023 / Server 2023.1 and later.',
    )
    upstreamLenses: Optional[List[Optional[Lens]]] = Field(
        None, description='The Lenses that are upstream of this workbook'
    )
    upstreamLensesConnection: Optional[LensesConnection] = Field(
        None, description='The Lenses that are upstream of this workbook'
    )
    upstreamTables: List[Optional[DatabaseTable]] = Field(
        ..., description='The tables upstream to this Workbook'
    )
    upstreamTablesConnection: Optional[DatabaseTablesConnection] = Field(
        None, description='The tables upstream to this Workbook'
    )
    upstreamVirtualConnectionTables: List[Optional[VirtualConnectionTable]] = Field(
        ..., description='The virtual connection table upstream to this Workbook'
    )
    upstreamVirtualConnectionTablesConnection: Optional[
        VirtualConnectionTablesConnection
    ] = Field(
        None, description='The virtual connection table upstream to this Workbook'
    )
    upstreamVirtualConnections: List[Optional[VirtualConnection]] = Field(
        ..., description='The virtual connection upstream to this Workbook'
    )
    upstreamVirtualConnectionsConnection: Optional[VirtualConnectionsConnection] = (
        Field(None, description='The virtual connection upstream to this Workbook')
    )
    uri: Optional[String] = Field(None, description='Uri of the workbook')
    views: List[View] = Field(
        ..., description='Views that are contained in this workbook'
    )
    viewsConnection: Optional[ViewsConnection] = Field(
        None, description='Views that are contained in this workbook'
    )
    vizportalUrlId: String = Field(
        ..., description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['Workbook']] = Field('Workbook', alias='__typename')


class WorkbooksConnection(BaseModel):
    """
    Connection Type for Workbook
    """

    nodes: List[Workbook] = Field(..., description='List of nodes')
    pageInfo: PageInfo = Field(..., description='Information for pagination')
    totalCount: Int = Field(..., description='Total number of objects in connection')
    typename__: Optional[Literal['WorkbooksConnection']] = Field(
        'WorkbooksConnection', alias='__typename'
    )


class AnalyticsFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: AnalyticsFieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['AnalyticsFieldSortOrder']] = Field(
        'AnalyticsFieldSortOrder', alias='__typename'
    )


class AnalyticsFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    typename__: Optional[Literal['AnalyticsField_Filter']] = Field(
        'AnalyticsField_Filter', alias='__typename'
    )


class AskDataExtensionSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: AskDataExtensionOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['AskDataExtensionSortOrder']] = Field(
        'AskDataExtensionSortOrder', alias='__typename'
    )


class AskDataExtensionFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    typename__: Optional[Literal['AskDataExtension_Filter']] = Field(
        'AskDataExtension_Filter', alias='__typename'
    )


class AskDataExtensionRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    typename__: Optional[Literal['AskDataExtension_Required_Filter']] = Field(
        'AskDataExtension_Required_Filter', alias='__typename'
    )


class BinFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: BinFieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['BinFieldSortOrder']] = Field(
        'BinFieldSortOrder', alias='__typename'
    )


class BinFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    isHiddenWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the field is hidden'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['BinField_Filter']] = Field(
        'BinField_Filter', alias='__typename'
    )


class BinFieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['BinField_Required_Filter']] = Field(
        'BinField_Required_Filter', alias='__typename'
    )


class CalculatedFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: CalculatedFieldOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['CalculatedFieldSortOrder']] = Field(
        'CalculatedFieldSortOrder', alias='__typename'
    )


class CalculatedFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    isHiddenWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the field is hidden'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['CalculatedField_Filter']] = Field(
        'CalculatedField_Filter', alias='__typename'
    )


class CalculatedFieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['CalculatedField_Required_Filter']] = Field(
        'CalculatedField_Required_Filter', alias='__typename'
    )


class CanHaveLabelsSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: CanHaveLabelsOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['CanHaveLabelsSortOrder']] = Field(
        'CanHaveLabelsSortOrder', alias='__typename'
    )


class CanHaveLabelsFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    typename__: Optional[Literal['CanHaveLabels_Filter']] = Field(
        'CanHaveLabels_Filter', alias='__typename'
    )


class CertifiableSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: CertifiableOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['CertifiableSortOrder']] = Field(
        'CertifiableSortOrder', alias='__typename'
    )


class CertifiableFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this content item contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this content item contains an active data quality certification',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    typename__: Optional[Literal['Certifiable_Filter']] = Field(
        'Certifiable_Filter', alias='__typename'
    )


class CloudFileSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: CloudFileOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['CloudFileSortOrder']] = Field(
        'CloudFileSortOrder', alias='__typename'
    )


class CloudFileFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    connectionTypeWithin: Optional[List[Optional[String]]] = Field(
        None, description='Connection type shortname'
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the database has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the database has an active data quality warning'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isEmbedded: Optional[Boolean] = Field(
        None,
        description='True if this file is embedded in Tableau content, e.g., a packaged workbook',
    )
    isEmbeddedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this file is embedded in Tableau content, e.g., a packaged workbook',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['CloudFile_Filter']] = Field(
        'CloudFile_Filter', alias='__typename'
    )


class ColumnFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: ColumnFieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['ColumnFieldSortOrder']] = Field(
        'ColumnFieldSortOrder', alias='__typename'
    )


class ColumnFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    isHiddenWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the field is hidden'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['ColumnField_Filter']] = Field(
        'ColumnField_Filter', alias='__typename'
    )


class ColumnFieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['ColumnField_Required_Filter']] = Field(
        'ColumnField_Required_Filter', alias='__typename'
    )


class ColumnSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: ColumnOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['ColumnSortOrder']] = Field(
        'ColumnSortOrder', alias='__typename'
    )


class ColumnFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    displayName: Optional[String] = Field(
        None, description='Optional display name for column'
    )
    displayNameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Optional display name for column'
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None,
        description='True if this column has an active data quality warning. Available in Tableau Cloud October 2022 / Server 2022.3 and later.',
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this column has an active data quality warning. Available in Tableau Cloud October 2022 / Server 2022.3 and later.',
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='Name of column')
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name of column'
    )
    typename__: Optional[Literal['Column_Filter']] = Field(
        'Column_Filter', alias='__typename'
    )


class ColumnRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(None, description='Name of column')
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name of column'
    )
    typename__: Optional[Literal['Column_Required_Filter']] = Field(
        'Column_Required_Filter', alias='__typename'
    )


class CombinedFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: CombinedFieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['CombinedFieldSortOrder']] = Field(
        'CombinedFieldSortOrder', alias='__typename'
    )


class CombinedFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    isHiddenWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the field is hidden'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['CombinedField_Filter']] = Field(
        'CombinedField_Filter', alias='__typename'
    )


class CombinedFieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['CombinedField_Required_Filter']] = Field(
        'CombinedField_Required_Filter', alias='__typename'
    )


class CombinedSetFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: CombinedSetFieldOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['CombinedSetFieldSortOrder']] = Field(
        'CombinedSetFieldSortOrder', alias='__typename'
    )


class CombinedSetFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    isHiddenWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the field is hidden'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['CombinedSetField_Filter']] = Field(
        'CombinedSetField_Filter', alias='__typename'
    )


class CombinedSetFieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['CombinedSetField_Required_Filter']] = Field(
        'CombinedSetField_Required_Filter', alias='__typename'
    )


class CustomSQLTableSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: CustomSQLTableOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['CustomSQLTableSortOrder']] = Field(
        'CustomSQLTableSortOrder', alias='__typename'
    )


class CustomSQLTableFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the query is unsupported by Tableau Catalog, in which case lineage may be incomplete',
    )
    isUnsupportedCustomSqlWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if the query is unsupported by Tableau Catalog, in which case lineage may be incomplete',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['CustomSQLTable_Filter']] = Field(
        'CustomSQLTable_Filter', alias='__typename'
    )


class DashboardSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DashboardOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['DashboardSortOrder']] = Field(
        'DashboardSortOrder', alias='__typename'
    )


class DashboardFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    documentViewId: Optional[String] = Field(
        None,
        description='Unique ID for the dashboard generated for and stored within the workbook, survives renames, and is used for internal processes',
    )
    documentViewIdWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Unique ID for the dashboard generated for and stored within the workbook, survives renames, and is used for internal processes',
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    path: Optional[String] = Field(None, description='Server path to dashboard')
    pathWithin: Optional[List[Optional[String]]] = Field(
        None, description='Server path to dashboard'
    )
    typename__: Optional[Literal['Dashboard_Filter']] = Field(
        'Dashboard_Filter', alias='__typename'
    )


class DataCloudSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DataCloudOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['DataCloudSortOrder']] = Field(
        'DataCloudSortOrder', alias='__typename'
    )


class DataCloudFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    connectionTypeWithin: Optional[List[Optional[String]]] = Field(
        None, description='Connection type shortname'
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the database has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the database has an active data quality warning'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used with the Metadata API.  Not the same as the locally unique identifier used with the REST API.',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used with the Metadata API.  Not the same as the locally unique identifier used with the REST API.',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isEmbedded: Optional[Boolean] = Field(
        None,
        description='True if this database is embedded in Tableau content, e.g., a packaged workbook',
    )
    isEmbeddedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this database is embedded in Tableau content, e.g., a packaged workbook',
    )
    luid: Optional[String] = Field(
        None, description='Locally unique identifier used with the REST API.'
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None, description='Locally unique identifier used with the REST API.'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['DataCloud_Filter']] = Field(
        'DataCloud_Filter', alias='__typename'
    )


class DataFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DataFieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['DataFieldSortOrder']] = Field(
        'DataFieldSortOrder', alias='__typename'
    )


class DataFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    typename__: Optional[Literal['DataField_Filter']] = Field(
        'DataField_Filter', alias='__typename'
    )


class DataQualityCertificationSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DataQualityCertificationOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['DataQualityCertificationSortOrder']] = Field(
        'DataQualityCertificationSortOrder', alias='__typename'
    )


class DataQualityCertificationFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    category: Optional[String] = Field(None, description='Category of the label')
    categoryWithin: Optional[List[Optional[String]]] = Field(
        None, description='Category of the label'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    isActive: Optional[Boolean] = Field(
        None, description='True if the data quality certification is active'
    )
    isActiveWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the data quality certification is active'
    )
    isElevated: Optional[Boolean] = Field(
        None, description='True if the data quality certification is elevated'
    )
    isElevatedWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the data quality certification is elevated'
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    value: Optional[String] = Field(None, description='Value of the label')
    valueWithin: Optional[List[Optional[String]]] = Field(
        None, description='Value of the label'
    )
    typename__: Optional[Literal['DataQualityCertification_Filter']] = Field(
        'DataQualityCertification_Filter', alias='__typename'
    )


class DataQualityWarningSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DataQualityWarningOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['DataQualityWarningSortOrder']] = Field(
        'DataQualityWarningSortOrder', alias='__typename'
    )


class DataQualityWarningFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    category: Optional[String] = Field(None, description='Category of the label')
    categoryWithin: Optional[List[Optional[String]]] = Field(
        None, description='Category of the label'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    isActive: Optional[Boolean] = Field(
        None, description='True if the data quality warning is active'
    )
    isActiveWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the data quality warning is active'
    )
    isElevated: Optional[Boolean] = Field(
        None, description='True if the data quality warning is elevated'
    )
    isElevatedWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the data quality warning is elevated'
    )
    isSevere: Optional[Boolean] = Field(None, description='Synonymous with isElevated')
    isSevereWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='Synonymous with isElevated'
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    value: Optional[String] = Field(None, description='Value of the label')
    valueWithin: Optional[List[Optional[String]]] = Field(
        None, description='Value of the label'
    )
    warningType: Optional[String] = Field(None, description='Synonymous with value')
    warningTypeWithin: Optional[List[Optional[String]]] = Field(
        None, description='Synonymous with value'
    )
    typename__: Optional[Literal['DataQualityWarning_Filter']] = Field(
        'DataQualityWarning_Filter', alias='__typename'
    )


class DatabaseServerSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DatabaseServerOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['DatabaseServerSortOrder']] = Field(
        'DatabaseServerSortOrder', alias='__typename'
    )


class DatabaseServerFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    connectionTypeWithin: Optional[List[Optional[String]]] = Field(
        None, description='Connection type shortname'
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the database has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the database has an active data quality warning'
    )
    hostName: Optional[String] = Field(None, description='Hostname of the database')
    hostNameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Hostname of the database'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isEmbedded: Optional[Boolean] = Field(
        None, description='A database server is never embedded in Tableau content'
    )
    isEmbeddedWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='A database server is never embedded in Tableau content'
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['DatabaseServer_Filter']] = Field(
        'DatabaseServer_Filter', alias='__typename'
    )


class DatabaseSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DatabaseOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['DatabaseSortOrder']] = Field(
        'DatabaseSortOrder', alias='__typename'
    )


class DatabaseTableSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DatabaseTableOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['DatabaseTableSortOrder']] = Field(
        'DatabaseTableSortOrder', alias='__typename'
    )


class DatabaseTableFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    connectionType: Optional[String] = Field(
        None, description='Connection type of parent database'
    )
    connectionTypeWithin: Optional[List[Optional[String]]] = Field(
        None, description='Connection type of parent database'
    )
    fullName: Optional[String] = Field(None, description='Fully qualified table name')
    fullNameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Fully qualified table name'
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the table has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the table has an active data quality warning'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this table contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this table contains an active data quality certification',
    )
    isEmbedded: Optional[Boolean] = Field(
        None, description='True if this table is embedded in Tableau content'
    )
    isEmbeddedWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if this table is embedded in Tableau content'
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the table is visible. Will be empty if the table is not in a project.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project in which the table is visible. Will be empty if the table is not in a project.',
    )
    schema_: Optional[String] = Field(
        None,
        alias='schema',
        description='Name of table schema.\n    \nNote: For some databases, such as Amazon Athena and Exasol, the schema attribute may not return the correct schema name for the table. For more information, see https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_model.html#schema_attribute.',
    )
    schemaWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Name of table schema.\n    \nNote: For some databases, such as Amazon Athena and Exasol, the schema attribute may not return the correct schema name for the table. For more information, see https://help.tableau.com/current/api/metadata_api/en-us/docs/meta_api_model.html#schema_attribute.',
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['DatabaseTable_Filter']] = Field(
        'DatabaseTable_Filter', alias='__typename'
    )


class DatabaseFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    connectionTypeWithin: Optional[List[Optional[String]]] = Field(
        None, description='Connection type shortname'
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the database has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the database has an active data quality warning'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isEmbedded: Optional[Boolean] = Field(
        None,
        description='True if this database is embedded in Tableau content, e.g., a packaged workbook',
    )
    isEmbeddedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this database is embedded in Tableau content, e.g., a packaged workbook',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['Database_Filter']] = Field(
        'Database_Filter', alias='__typename'
    )


class DatasourceFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DatasourceFieldOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['DatasourceFieldSortOrder']] = Field(
        'DatasourceFieldSortOrder', alias='__typename'
    )


class DatasourceFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    isHiddenWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the field is hidden'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['DatasourceField_Filter']] = Field(
        'DatasourceField_Filter', alias='__typename'
    )


class DatasourceFieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['DatasourceField_Required_Filter']] = Field(
        'DatasourceField_Required_Filter', alias='__typename'
    )


class DatasourceFilterSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DatasourceFilterOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['DatasourceFilterSortOrder']] = Field(
        'DatasourceFilterSortOrder', alias='__typename'
    )


class DatasourceFilterFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    typename__: Optional[Literal['DatasourceFilter_Filter']] = Field(
        'DatasourceFilter_Filter', alias='__typename'
    )


class DatasourceSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: DatasourceOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['DatasourceSortOrder']] = Field(
        'DatasourceSortOrder', alias='__typename'
    )


class DatasourceFilterModel(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    containsUnsupportedCustomSqlWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['Datasource_Filter']] = Field(
        'Datasource_Filter', alias='__typename'
    )


class EmbeddedDatasourceSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: EmbeddedDatasourceOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['EmbeddedDatasourceSortOrder']] = Field(
        'EmbeddedDatasourceSortOrder', alias='__typename'
    )


class EmbeddedDatasourceFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    containsUnsupportedCustomSqlWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['EmbeddedDatasource_Filter']] = Field(
        'EmbeddedDatasource_Filter', alias='__typename'
    )


class ExtractTypeFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    typename__: Optional[Literal['ExtractType_Filter']] = Field(
        'ExtractType_Filter', alias='__typename'
    )


class FieldDataTypeFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    typename__: Optional[Literal['FieldDataType_Filter']] = Field(
        'FieldDataType_Filter', alias='__typename'
    )


class FieldReferencingFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FieldReferencingFieldOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['FieldReferencingFieldSortOrder']] = Field(
        'FieldReferencingFieldSortOrder', alias='__typename'
    )


class FieldReferencingFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    typename__: Optional[Literal['FieldReferencingField_Filter']] = Field(
        'FieldReferencingField_Filter', alias='__typename'
    )


class FieldRoleCategoryFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    typename__: Optional[Literal['FieldRoleCategory_Filter']] = Field(
        'FieldRoleCategory_Filter', alias='__typename'
    )


class FieldRoleFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    typename__: Optional[Literal['FieldRole_Filter']] = Field(
        'FieldRole_Filter', alias='__typename'
    )


class FieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['FieldSortOrder']] = Field(
        'FieldSortOrder', alias='__typename'
    )


class FieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    isHiddenWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the field is hidden'
    )
    name: Optional[String] = Field(None, description='Name shown in server')
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['Field_Filter']] = Field(
        'Field_Filter', alias='__typename'
    )


class FieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(None, description='Name shown in server')
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server'
    )
    typename__: Optional[Literal['Field_Required_Filter']] = Field(
        'Field_Required_Filter', alias='__typename'
    )


class FileSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FileOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['FileSortOrder']] = Field(
        'FileSortOrder', alias='__typename'
    )


class FileFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    connectionType: Optional[String] = Field(
        None, description='Connection type shortname'
    )
    connectionTypeWithin: Optional[List[Optional[String]]] = Field(
        None, description='Connection type shortname'
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the database has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the database has an active data quality warning'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the Metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isEmbedded: Optional[Boolean] = Field(
        None,
        description='True if this file is embedded in Tableau content, e.g., a packaged workbook',
    )
    isEmbeddedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this file is embedded in Tableau content, e.g., a packaged workbook',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['File_Filter']] = Field(
        'File_Filter', alias='__typename'
    )


class FlowColumnInputFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FlowColumnInputFieldOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['FlowColumnInputFieldSortOrder']] = Field(
        'FlowColumnInputFieldSortOrder', alias='__typename'
    )


class FlowColumnInputFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['FlowColumnInputField_Filter']] = Field(
        'FlowColumnInputField_Filter', alias='__typename'
    )


class FlowColumnOutputFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FlowColumnOutputFieldOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['FlowColumnOutputFieldSortOrder']] = Field(
        'FlowColumnOutputFieldSortOrder', alias='__typename'
    )


class FlowColumnOutputFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['FlowColumnOutputField_Filter']] = Field(
        'FlowColumnOutputField_Filter', alias='__typename'
    )


class FlowFieldInputFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FlowFieldInputFieldOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['FlowFieldInputFieldSortOrder']] = Field(
        'FlowFieldInputFieldSortOrder', alias='__typename'
    )


class FlowFieldInputFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['FlowFieldInputField_Filter']] = Field(
        'FlowFieldInputField_Filter', alias='__typename'
    )


class FlowFieldOutputFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FlowFieldOutputFieldOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['FlowFieldOutputFieldSortOrder']] = Field(
        'FlowFieldOutputFieldSortOrder', alias='__typename'
    )


class FlowFieldOutputFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['FlowFieldOutputField_Filter']] = Field(
        'FlowFieldOutputField_Filter', alias='__typename'
    )


class FlowInputFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FlowInputFieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['FlowInputFieldSortOrder']] = Field(
        'FlowInputFieldSortOrder', alias='__typename'
    )


class FlowInputFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['FlowInputField_Filter']] = Field(
        'FlowInputField_Filter', alias='__typename'
    )


class FlowOutputFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FlowOutputFieldOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['FlowOutputFieldSortOrder']] = Field(
        'FlowOutputFieldSortOrder', alias='__typename'
    )


class FlowOutputFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['FlowOutputField_Filter']] = Field(
        'FlowOutputField_Filter', alias='__typename'
    )


class FlowOutputStepSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FlowOutputStepOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['FlowOutputStepSortOrder']] = Field(
        'FlowOutputStepSortOrder', alias='__typename'
    )


class FlowOutputStepFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique identifier used by the metadata API'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['FlowOutputStep_Filter']] = Field(
        'FlowOutputStep_Filter', alias='__typename'
    )


class FlowSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: FlowOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['FlowSortOrder']] = Field(
        'FlowSortOrder', alias='__typename'
    )


class FlowFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    containerName: Optional[String] = Field(
        None,
        description='The name of the container in which the flow is visible and usable. Either a personal space or project.',
    )
    containerNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the container in which the flow is visible and usable. Either a personal space or project.',
    )
    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the flow contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    containsUnsupportedCustomSqlWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if the flow contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the flow has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the flow has an active data quality warning'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the flow is visible and usable',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project in which the flow is visible and usable',
    )
    vizportalUrlId: Optional[String] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    vizportalUrlIdWithin: Optional[List[Optional[String]]] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['Flow_Filter']] = Field(
        'Flow_Filter', alias='__typename'
    )


class GenericLabelSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: GenericLabelOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['GenericLabelSortOrder']] = Field(
        'GenericLabelSortOrder', alias='__typename'
    )


class GenericLabelFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    category: Optional[String] = Field(None, description='Category of the label')
    categoryWithin: Optional[List[Optional[String]]] = Field(
        None, description='Category of the label'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    isActive: Optional[Boolean] = Field(None, description='True if the label is active')
    isActiveWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the label is active'
    )
    isElevated: Optional[Boolean] = Field(
        None, description='True if the label is elevated'
    )
    isElevatedWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the label is elevated'
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    value: Optional[String] = Field(None, description='Value of the label')
    valueWithin: Optional[List[Optional[String]]] = Field(
        None, description='Value of the label'
    )
    typename__: Optional[Literal['GenericLabel_Filter']] = Field(
        'GenericLabel_Filter', alias='__typename'
    )


class GroupFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: GroupFieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['GroupFieldSortOrder']] = Field(
        'GroupFieldSortOrder', alias='__typename'
    )


class GroupFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    isHiddenWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the field is hidden'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['GroupField_Filter']] = Field(
        'GroupField_Filter', alias='__typename'
    )


class GroupFieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['GroupField_Required_Filter']] = Field(
        'GroupField_Required_Filter', alias='__typename'
    )


class HierarchyFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: HierarchyFieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['HierarchyFieldSortOrder']] = Field(
        'HierarchyFieldSortOrder', alias='__typename'
    )


class HierarchyFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    isHiddenWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the field is hidden'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['HierarchyField_Filter']] = Field(
        'HierarchyField_Filter', alias='__typename'
    )


class HierarchyFieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['HierarchyField_Required_Filter']] = Field(
        'HierarchyField_Required_Filter', alias='__typename'
    )


class LabelSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: LabelOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['LabelSortOrder']] = Field(
        'LabelSortOrder', alias='__typename'
    )


class LabelFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    category: Optional[String] = Field(None, description='Category of the label')
    categoryWithin: Optional[List[Optional[String]]] = Field(
        None, description='Category of the label'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    isActive: Optional[Boolean] = Field(None, description='True if the label is active')
    isActiveWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the label is active'
    )
    isElevated: Optional[Boolean] = Field(
        None, description='True if the label is elevated'
    )
    isElevatedWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the label is elevated'
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    value: Optional[String] = Field(None, description='Value of the label')
    valueWithin: Optional[List[Optional[String]]] = Field(
        None, description='Value of the label'
    )
    typename__: Optional[Literal['Label_Filter']] = Field(
        'Label_Filter', alias='__typename'
    )


class LensFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: LensFieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['LensFieldSortOrder']] = Field(
        'LensFieldSortOrder', alias='__typename'
    )


class LensFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None,
        description='Name of field shown locally in Ask Data. If null or empty, use name inherited from datasource field.',
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Name of field shown locally in Ask Data. If null or empty, use name inherited from datasource field.',
    )
    typename__: Optional[Literal['LensField_Filter']] = Field(
        'LensField_Filter', alias='__typename'
    )


class LensFieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    typename__: Optional[Literal['LensField_Required_Filter']] = Field(
        'LensField_Required_Filter', alias='__typename'
    )


class LensSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: LensOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['LensSortOrder']] = Field(
        'LensSortOrder', alias='__typename'
    )


class LensFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='Name shown in server')
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server'
    )
    vizportalUrlId: Optional[String] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    vizportalUrlIdWithin: Optional[List[Optional[String]]] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['Lens_Filter']] = Field(
        'Lens_Filter', alias='__typename'
    )


class LinkedFlowSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: LinkedFlowOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['LinkedFlowSortOrder']] = Field(
        'LinkedFlowSortOrder', alias='__typename'
    )


class LinkedFlowFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    typename__: Optional[Literal['LinkedFlow_Filter']] = Field(
        'LinkedFlow_Filter', alias='__typename'
    )


class MetricDefinitionSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: MetricDefinitionOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['MetricDefinitionSortOrder']] = Field(
        'MetricDefinitionSortOrder', alias='__typename'
    )


class MetricDefinitionFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the Metadata API. Not the same as the locally unique identifier used with the REST API.',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the Metadata API. Not the same as the locally unique identifier used with the REST API.',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server.',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server.',
    )
    name: Optional[String] = Field(None, description='Name of the metric definition.')
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name of the metric definition.'
    )
    typename__: Optional[Literal['MetricDefinition_Filter']] = Field(
        'MetricDefinition_Filter', alias='__typename'
    )


class MetricSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: MetricOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['MetricSortOrder']] = Field(
        'MetricSortOrder', alias='__typename'
    )


class MetricFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    containerName: Optional[String] = Field(
        None,
        description='The name of the container in which the metric is visible and usable. This is always a project.',
    )
    containerNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the container in which the metric is visible and usable. This is always a project.',
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the Metric is visible and usable.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project in which the Metric is visible and usable.',
    )
    vizportalUrlId: Optional[String] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    vizportalUrlIdWithin: Optional[List[Optional[String]]] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['Metric_Filter']] = Field(
        'Metric_Filter', alias='__typename'
    )


class NodeSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: NodeOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['NodeSortOrder']] = Field(
        'NodeSortOrder', alias='__typename'
    )


class NodeFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    typename__: Optional[Literal['Node_Filter']] = Field(
        'Node_Filter', alias='__typename'
    )


class ParameterSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: ParameterOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['ParameterSortOrder']] = Field(
        'ParameterSortOrder', alias='__typename'
    )


class ParameterFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(None, description='Name of parameter')
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name of parameter'
    )
    parentName: Optional[String] = Field(
        None, description="Name of the parameter's parent"
    )
    parentNameWithin: Optional[List[Optional[String]]] = Field(
        None, description="Name of the parameter's parent"
    )
    typename__: Optional[Literal['Parameter_Filter']] = Field(
        'Parameter_Filter', alias='__typename'
    )


class PublishedDatasourceSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: PublishedDatasourceOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['PublishedDatasourceSortOrder']] = Field(
        'PublishedDatasourceSortOrder', alias='__typename'
    )


class PublishedDatasourceFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    containerName: Optional[String] = Field(
        None,
        description='The name of the container in which the published data source is visible and usable. Either a personal space or project.',
    )
    containerNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the container in which the published data source is visible and usable. Either a personal space or project.',
    )
    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    containsUnsupportedCustomSqlWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the data source has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the data source has an active data quality warning'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this data source contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this data source contains an active data quality certification',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project that contains this published data source.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project that contains this published data source.',
    )
    vizportalUrlId: Optional[String] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    vizportalUrlIdWithin: Optional[List[Optional[String]]] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['PublishedDatasource_Filter']] = Field(
        'PublishedDatasource_Filter', alias='__typename'
    )


class RemoteTypeFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    typename__: Optional[Literal['RemoteType_Filter']] = Field(
        'RemoteType_Filter', alias='__typename'
    )


class SetFieldSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: SetFieldOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['SetFieldSortOrder']] = Field(
        'SetFieldSortOrder', alias='__typename'
    )


class SetFieldFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isHidden: Optional[Boolean] = Field(None, description='True if the field is hidden')
    isHiddenWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the field is hidden'
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['SetField_Filter']] = Field(
        'SetField_Filter', alias='__typename'
    )


class SetFieldRequiredFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    typename__: Optional[Literal['SetField_Required_Filter']] = Field(
        'SetField_Required_Filter', alias='__typename'
    )


class SheetSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: SheetOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['SheetSortOrder']] = Field(
        'SheetSortOrder', alias='__typename'
    )


class SheetFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    documentViewId: Optional[String] = Field(
        None,
        description='Unique ID for the sheet generated for and stored within the workbook, survives renames, and is used for internal processes',
    )
    documentViewIdWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Unique ID for the sheet generated for and stored within the workbook, survives renames, and is used for internal processes',
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server (Blank if worksheet is hidden in Workbook)',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    path: Optional[String] = Field(None, description='Server path to sheet')
    pathWithin: Optional[List[Optional[String]]] = Field(
        None, description='Server path to sheet'
    )
    typename__: Optional[Literal['Sheet_Filter']] = Field(
        'Sheet_Filter', alias='__typename'
    )


class TableAdditionalDetailsSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: TableAdditionalDetailsOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['TableAdditionalDetailsSortOrder']] = Field(
        'TableAdditionalDetailsSortOrder', alias='__typename'
    )


class TableAdditionalDetailsFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used with the Metadata API.  Not the same as the locally unique identifier used with the REST API.',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used with the Metadata API.  Not the same as the locally unique identifier used with the REST API.',
    )
    typename__: Optional[Literal['TableAdditionalDetails_Filter']] = Field(
        'TableAdditionalDetails_Filter', alias='__typename'
    )


class TableSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: TableOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['TableSortOrder']] = Field(
        'TableSortOrder', alias='__typename'
    )


class TableTypeFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique Identifier of object to retrieve'
    )
    typename__: Optional[Literal['TableType_Filter']] = Field(
        'TableType_Filter', alias='__typename'
    )


class TableFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['Table_Filter']] = Field(
        'Table_Filter', alias='__typename'
    )


class TableauSiteSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: TableauSiteOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['TableauSiteSortOrder']] = Field(
        'TableauSiteSortOrder', alias='__typename'
    )


class TableauSiteFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='Name shown in server')
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server'
    )
    typename__: Optional[Literal['TableauSite_Filter']] = Field(
        'TableauSite_Filter', alias='__typename'
    )


class TableauUserSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: TableauUserOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['TableauUserSortOrder']] = Field(
        'TableauUserSortOrder', alias='__typename'
    )


class TableauUserFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    domain: Optional[String] = Field(None, description='Domain this user belongs to')
    domainWithin: Optional[List[Optional[String]]] = Field(
        None, description='Domain this user belongs to'
    )
    email: Optional[String] = Field(None, description='Email address of this user')
    emailWithin: Optional[List[Optional[String]]] = Field(
        None, description='Email address of this user'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(None, description='Display name of this user')
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Display name of this user'
    )
    username: Optional[String] = Field(None, description='Username of this user')
    usernameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Username of this user'
    )
    typename__: Optional[Literal['TableauUser_Filter']] = Field(
        'TableauUser_Filter', alias='__typename'
    )


class TagSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: TagOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['TagSortOrder']] = Field(
        'TagSortOrder', alias='__typename'
    )


class TagFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None, description='Unique identifier used by the metadata API.'
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None, description='Unique identifier used by the metadata API.'
    )
    name: Optional[String] = Field(None, description='The name of the tag')
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='The name of the tag'
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['Tag_Filter']] = Field(
        'Tag_Filter', alias='__typename'
    )


class TaggableSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: TaggableOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['TaggableSortOrder']] = Field(
        'TaggableSortOrder', alias='__typename'
    )


class TaggableFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    typename__: Optional[Literal['Taggable_Filter']] = Field(
        'Taggable_Filter', alias='__typename'
    )


class ViewSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: ViewOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['ViewSortOrder']] = Field(
        'ViewSortOrder', alias='__typename'
    )


class ViewFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    documentViewId: Optional[String] = Field(
        None,
        description='Unique ID for the view generated for and stored within the workbook, survives renames, and is used for internal processes',
    )
    documentViewIdWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Unique ID for the view generated for and stored within the workbook, survives renames, and is used for internal processes',
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server (Blank if sheet is hidden in Workbook)',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server (Blank if sheet is hidden in Workbook)',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    path: Optional[String] = Field(None, description='Server path to view')
    pathWithin: Optional[List[Optional[String]]] = Field(
        None, description='Server path to view'
    )
    typename__: Optional[Literal['View_Filter']] = Field(
        'View_Filter', alias='__typename'
    )


class VirtualConnectionSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: VirtualConnectionOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['VirtualConnectionSortOrder']] = Field(
        'VirtualConnectionSortOrder', alias='__typename'
    )


class VirtualConnectionTableSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: VirtualConnectionTableOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['VirtualConnectionTableSortOrder']] = Field(
        'VirtualConnectionTableSortOrder', alias='__typename'
    )


class VirtualConnectionTableFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    containsUnsupportedCustomSqlWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if the datasource contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    extractLastRefreshedAt: Optional[DateTime] = Field(
        None, description="The time the data for this table's extract was refreshed."
    )
    extractLastRefreshedAtWithin: Optional[List[Optional[DateTime]]] = Field(
        None, description="The time the data for this table's extract was refreshed."
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the table has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the table has an active data quality warning'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this virtual connection table contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this virtual connection table contains an active data quality certification',
    )
    isExtracted: Optional[Boolean] = Field(
        None, description='Whether or not queries to this table are using an extract.'
    )
    isExtractedWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='Whether or not queries to this table are using an extract.'
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    vizportalUrlId: Optional[String] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    vizportalUrlIdWithin: Optional[List[Optional[String]]] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['VirtualConnectionTable_Filter']] = Field(
        'VirtualConnectionTable_Filter', alias='__typename'
    )


class VirtualConnectionFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    connectionType: Optional[String] = Field(
        None, description='Connection type of this virtual connection'
    )
    connectionTypeWithin: Optional[List[Optional[String]]] = Field(
        None, description='Connection type of this virtual connection'
    )
    containerName: Optional[String] = Field(
        None,
        description='The name of the container in which the virtual connection is visible and usable. Either a personal space or project.',
    )
    containerNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the container in which the virtual connection is visible and usable. Either a personal space or project.',
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None,
        description='True if the virtual connection has an active data quality warning',
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if the virtual connection has an active data quality warning',
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this virtual connection contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this virtual connection contains an active data quality certification',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project that contains this virtual connection.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project that contains this virtual connection.',
    )
    vizportalUrlId: Optional[String] = Field(
        None, description='Vizportal URL ID; used for URL generation'
    )
    vizportalUrlIdWithin: Optional[List[Optional[String]]] = Field(
        None, description='Vizportal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['VirtualConnection_Filter']] = Field(
        'VirtualConnection_Filter', alias='__typename'
    )


class WarnableSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: WarnableOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['WarnableSortOrder']] = Field(
        'WarnableSortOrder', alias='__typename'
    )


class WarnableFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the content has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the content has an active data quality warning'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API. Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    typename__: Optional[Literal['Warnable_Filter']] = Field(
        'Warnable_Filter', alias='__typename'
    )


class WebDataConnectorSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: WebDataConnectorOrderField = Field(
        ..., description='GraphQL field to sort on'
    )
    typename__: Optional[Literal['WebDataConnectorSortOrder']] = Field(
        'WebDataConnectorSortOrder', alias='__typename'
    )


class WebDataConnectorFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    connectionType: Optional[String] = Field(
        None, description='The type of web data connector'
    )
    connectionTypeWithin: Optional[List[Optional[String]]] = Field(
        None, description='The type of web data connector'
    )
    hasActiveWarning: Optional[Boolean] = Field(
        None, description='True if the database has an active data quality warning'
    )
    hasActiveWarningWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='True if the database has an active data quality warning'
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the Metadata API. Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the Metadata API. Not the same as the numeric ID used on server',
    )
    isCertified: Optional[Boolean] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isCertifiedWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if this database contains an active data quality certification',
    )
    isEmbedded: Optional[Boolean] = Field(
        None, description='A web data connector is always embedded in Tableau content'
    )
    isEmbeddedWithin: Optional[List[Optional[Boolean]]] = Field(
        None, description='A web data connector is always embedded in Tableau content'
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project in which the database is visible. Will be empty if the database is not in a project.',
    )
    text: Optional[String] = Field(
        None, description='Filter the output based on text query.'
    )
    typename__: Optional[Literal['WebDataConnector_Filter']] = Field(
        'WebDataConnector_Filter', alias='__typename'
    )


class WorkbookSortOrder(BaseModel):
    """
    Sort by given fields. The sort orders defined first in the list will take priority. If there are no given sort orders or a tie on the final sorted field then the resulting set will be sorted by ID in ascending order.
    """

    direction: OrderDirection = Field(..., description='Order direction to sort output')
    field: WorkbookOrderField = Field(..., description='GraphQL field to sort on')
    typename__: Optional[Literal['WorkbookSortOrder']] = Field(
        'WorkbookSortOrder', alias='__typename'
    )


class WorkbookFilter(BaseModel):
    """
    Filter by GraphQL field and given value
    """

    containerName: Optional[String] = Field(
        None,
        description='The name of the container in which the workbook is visible and usable. Either a personal space or project.',
    )
    containerNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the container in which the workbook is visible and usable. Either a personal space or project.',
    )
    containsUnsupportedCustomSql: Optional[Boolean] = Field(
        None,
        description='True if the workbook contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    containsUnsupportedCustomSqlWithin: Optional[List[Optional[Boolean]]] = Field(
        None,
        description='True if the workbook contains unsupported custom SQL, in which case lineage may be incomplete',
    )
    id: Optional[ID] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    idWithin: Optional[List[Optional[ID]]] = Field(
        None,
        description='Unique identifier used by the metadata API.  Not the same as the numeric ID used on server',
    )
    luid: Optional[String] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    luidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='Locally unique identifier used for the REST API on the Tableau Server',
    )
    name: Optional[String] = Field(
        None, description='Name shown in server and desktop clients'
    )
    nameWithin: Optional[List[Optional[String]]] = Field(
        None, description='Name shown in server and desktop clients'
    )
    projectLuid: Optional[String] = Field(
        None,
        description='The luid of the project in which the workbook is visible and usable. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    projectLuidWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The luid of the project in which the workbook is visible and usable. Available in Tableau Cloud June 2022 / Server 2022.3 and later.',
    )
    projectName: Optional[String] = Field(
        None,
        description='The name of the project in which the workbook is visible and usable.',
    )
    projectNameWithin: Optional[List[Optional[String]]] = Field(
        None,
        description='The name of the project in which the workbook is visible and usable.',
    )
    vizportalUrlId: Optional[String] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    vizportalUrlIdWithin: Optional[List[Optional[String]]] = Field(
        None, description='VizPortal URL ID; used for URL generation'
    )
    typename__: Optional[Literal['Workbook_Filter']] = Field(
        'Workbook_Filter', alias='__typename'
    )
