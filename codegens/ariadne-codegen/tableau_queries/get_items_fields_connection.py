# Generated by ariadne-codegen
# Source: ./tableau-queries.graphql

from typing import List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel


class GetItemsFieldsConnection(BaseModel):
    fields_connection: "GetItemsFieldsConnectionFieldsConnection" = Field(
        alias="fieldsConnection"
    )


class GetItemsFieldsConnectionFieldsConnection(BaseModel):
    nodes: List["GetItemsFieldsConnectionFieldsConnectionNodes"]
    page_info: "GetItemsFieldsConnectionFieldsConnectionPageInfo" = Field(
        alias="pageInfo"
    )


class GetItemsFieldsConnectionFieldsConnectionNodes(BaseModel):
    typename__: Literal[
        "BinField",
        "CalculatedField",
        "ColumnField",
        "CombinedField",
        "CombinedSetField",
        "DatasourceField",
        "Field",
        "GroupField",
        "HierarchyField",
        "SetField",
    ] = Field(alias="__typename")
    id: str
    upstream_fields: List[
        Optional["GetItemsFieldsConnectionFieldsConnectionNodesUpstreamFields"]
    ] = Field(alias="upstreamFields")
    upstream_columns: List[
        Optional["GetItemsFieldsConnectionFieldsConnectionNodesUpstreamColumns"]
    ] = Field(alias="upstreamColumns")


class GetItemsFieldsConnectionFieldsConnectionNodesUpstreamFields(BaseModel):
    typename__: Literal[
        "BinField",
        "CalculatedField",
        "ColumnField",
        "CombinedField",
        "CombinedSetField",
        "DatasourceField",
        "Field",
        "GroupField",
        "HierarchyField",
        "SetField",
    ] = Field(alias="__typename")
    name: Optional[str]
    datasource: Optional[
        "GetItemsFieldsConnectionFieldsConnectionNodesUpstreamFieldsDatasource"
    ]


class GetItemsFieldsConnectionFieldsConnectionNodesUpstreamFieldsDatasource(BaseModel):
    typename__: Literal["Datasource", "EmbeddedDatasource", "PublishedDatasource"] = (
        Field(alias="__typename")
    )
    id: str


class GetItemsFieldsConnectionFieldsConnectionNodesUpstreamColumns(BaseModel):
    name: Optional[str]
    table: Optional["GetItemsFieldsConnectionFieldsConnectionNodesUpstreamColumnsTable"]


class GetItemsFieldsConnectionFieldsConnectionNodesUpstreamColumnsTable(BaseModel):
    typename__: Literal[
        "CustomSQLTable", "DatabaseTable", "Table", "VirtualConnectionTable"
    ] = Field(alias="__typename")
    id: str


class GetItemsFieldsConnectionFieldsConnectionPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")


GetItemsFieldsConnection.model_rebuild()
GetItemsFieldsConnectionFieldsConnection.model_rebuild()
GetItemsFieldsConnectionFieldsConnectionNodes.model_rebuild()
GetItemsFieldsConnectionFieldsConnectionNodesUpstreamFields.model_rebuild()
GetItemsFieldsConnectionFieldsConnectionNodesUpstreamColumns.model_rebuild()
