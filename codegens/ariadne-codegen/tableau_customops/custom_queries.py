# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from . import PermissionMode
from .custom_fields import (
    AskDataExtensionFields,
    AskDataExtensionsConnectionFields,
    BinFieldFields,
    BinFieldsConnectionFields,
    CalculatedFieldFields,
    CalculatedFieldsConnectionFields,
    CloudFileFields,
    CloudFilesConnectionFields,
    ColumnFieldFields,
    ColumnFields,
    ColumnFieldsConnectionFields,
    ColumnsConnectionFields,
    CombinedFieldFields,
    CombinedFieldsConnectionFields,
    CombinedSetFieldFields,
    CombinedSetFieldsConnectionFields,
    CustomSQLTableFields,
    CustomSQLTablesConnectionFields,
    DashboardFields,
    DashboardsConnectionFields,
    DatabaseInterface,
    DatabasesConnectionFields,
    DatabaseServerFields,
    DatabaseServersConnectionFields,
    DatabaseTableFields,
    DatabaseTablesConnectionFields,
    DataCloudFields,
    DataCloudsConnectionFields,
    DataQualityCertificationFields,
    DataQualityCertificationsConnectionFields,
    DataQualityWarningFields,
    DataQualityWarningsConnectionFields,
    DatasourceFieldFields,
    DatasourceFieldsConnectionFields,
    DatasourceFilterFields,
    DatasourceFiltersConnectionFields,
    DatasourceInterface,
    DatasourcesConnectionFields,
    EmbeddedDatasourceFields,
    EmbeddedDatasourcesConnectionFields,
    FieldInterface,
    FieldsConnectionFields,
    FileFields,
    FilesConnectionFields,
    FlowColumnInputFieldFields,
    FlowColumnInputFieldsConnectionFields,
    FlowColumnOutputFieldFields,
    FlowColumnOutputFieldsConnectionFields,
    FlowFieldInputFieldFields,
    FlowFieldInputFieldsConnectionFields,
    FlowFieldOutputFieldFields,
    FlowFieldOutputFieldsConnectionFields,
    FlowFields,
    FlowOutputStepFields,
    FlowOutputStepsConnectionFields,
    FlowsConnectionFields,
    GenericLabelFields,
    GenericLabelsConnectionFields,
    GroupFieldFields,
    GroupFieldsConnectionFields,
    HierarchyFieldFields,
    HierarchyFieldsConnectionFields,
    LensesConnectionFields,
    LensFieldFields,
    LensFields,
    LensFieldsConnectionFields,
    MetricDefinitionFields,
    MetricDefinitionsConnectionFields,
    MetricFields,
    MetricsConnectionFields,
    ParameterFields,
    ParametersConnectionFields,
    PublishedDatasourceFields,
    PublishedDatasourcesConnectionFields,
    SetFieldFields,
    SetFieldsConnectionFields,
    SheetFields,
    SheetsConnectionFields,
    TableAdditionalDetailsesConnectionFields,
    TableAdditionalDetailsFields,
    TableauSiteFields,
    TableauSitesConnectionFields,
    TableauUserFields,
    TableauUsersConnectionFields,
    TableInterface,
    TablesConnectionFields,
    TagFields,
    TagsConnectionFields,
    ViewInterface,
    ViewsConnectionFields,
    VirtualConnectionFields,
    VirtualConnectionsConnectionFields,
    VirtualConnectionTableFields,
    VirtualConnectionTablesConnectionFields,
    WebDataConnectorFields,
    WebDataConnectorsConnectionFields,
    WorkbookFields,
    WorkbooksConnectionFields,
    __SchemaFields,
    __TypeFields,
)
from .input_types import (
    AskDataExtension_Filter,
    AskDataExtensionSortOrder,
    BinField_Filter,
    BinFieldSortOrder,
    CalculatedField_Filter,
    CalculatedFieldSortOrder,
    CloudFile_Filter,
    CloudFileSortOrder,
    Column_Filter,
    ColumnField_Filter,
    ColumnFieldSortOrder,
    ColumnSortOrder,
    CombinedField_Filter,
    CombinedFieldSortOrder,
    CombinedSetField_Filter,
    CombinedSetFieldSortOrder,
    CustomSQLTable_Filter,
    CustomSQLTableSortOrder,
    Dashboard_Filter,
    DashboardSortOrder,
    Database_Filter,
    DatabaseServer_Filter,
    DatabaseServerSortOrder,
    DatabaseSortOrder,
    DatabaseTable_Filter,
    DatabaseTableSortOrder,
    DataCloud_Filter,
    DataCloudSortOrder,
    DataQualityCertification_Filter,
    DataQualityCertificationSortOrder,
    DataQualityWarning_Filter,
    DataQualityWarningSortOrder,
    Datasource_Filter,
    DatasourceField_Filter,
    DatasourceFieldSortOrder,
    DatasourceFilter_Filter,
    DatasourceFilterSortOrder,
    DatasourceSortOrder,
    EmbeddedDatasource_Filter,
    EmbeddedDatasourceSortOrder,
    Field_Filter,
    FieldSortOrder,
    File_Filter,
    FileSortOrder,
    Flow_Filter,
    FlowColumnInputField_Filter,
    FlowColumnInputFieldSortOrder,
    FlowColumnOutputField_Filter,
    FlowColumnOutputFieldSortOrder,
    FlowFieldInputField_Filter,
    FlowFieldInputFieldSortOrder,
    FlowFieldOutputField_Filter,
    FlowFieldOutputFieldSortOrder,
    FlowOutputStep_Filter,
    FlowOutputStepSortOrder,
    FlowSortOrder,
    GenericLabel_Filter,
    GenericLabelSortOrder,
    GroupField_Filter,
    GroupFieldSortOrder,
    HierarchyField_Filter,
    HierarchyFieldSortOrder,
    Lens_Filter,
    LensField_Filter,
    LensFieldSortOrder,
    LensSortOrder,
    Metric_Filter,
    MetricDefinition_Filter,
    MetricDefinitionSortOrder,
    MetricSortOrder,
    Parameter_Filter,
    ParameterSortOrder,
    PublishedDatasource_Filter,
    PublishedDatasourceSortOrder,
    SetField_Filter,
    SetFieldSortOrder,
    Sheet_Filter,
    SheetSortOrder,
    Table_Filter,
    TableAdditionalDetails_Filter,
    TableAdditionalDetailsSortOrder,
    TableauSite_Filter,
    TableauSiteSortOrder,
    TableauUser_Filter,
    TableauUserSortOrder,
    TableSortOrder,
    Tag_Filter,
    TagSortOrder,
    View_Filter,
    ViewSortOrder,
    VirtualConnection_Filter,
    VirtualConnectionSortOrder,
    VirtualConnectionTable_Filter,
    VirtualConnectionTableSortOrder,
    WebDataConnector_Filter,
    WebDataConnectorSortOrder,
    Workbook_Filter,
    WorkbookSortOrder,
)


class Query:
    @classmethod
    def ask_data_extensions(
        cls,
        *,
        filter: Optional[AskDataExtension_Filter] = None,
        order_by: Optional[AskDataExtensionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> AskDataExtensionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "AskDataExtension_Filter", "value": filter},
            "orderBy": {"type": "AskDataExtensionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AskDataExtensionFields(
            field_name="askDataExtensions", arguments=cleared_arguments
        )

    @classmethod
    def ask_data_extensions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[AskDataExtension_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[AskDataExtensionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> AskDataExtensionsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "AskDataExtension_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "AskDataExtensionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AskDataExtensionsConnectionFields(
            field_name="askDataExtensionsConnection", arguments=cleared_arguments
        )

    @classmethod
    def bin_fields(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> BinFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields(field_name="binFields", arguments=cleared_arguments)

    @classmethod
    def bin_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> BinFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            field_name="binFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def calculated_fields(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> CalculatedFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            field_name="calculatedFields", arguments=cleared_arguments
        )

    @classmethod
    def calculated_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> CalculatedFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            field_name="calculatedFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def cloud_files(
        cls,
        *,
        filter: Optional[CloudFile_Filter] = None,
        order_by: Optional[CloudFileSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> CloudFileFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CloudFile_Filter", "value": filter},
            "orderBy": {"type": "CloudFileSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CloudFileFields(field_name="cloudFiles", arguments=cleared_arguments)

    @classmethod
    def cloud_files_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CloudFile_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CloudFileSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> CloudFilesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CloudFile_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CloudFileSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CloudFilesConnectionFields(
            field_name="cloudFilesConnection", arguments=cleared_arguments
        )

    @classmethod
    def column_fields(
        cls,
        *,
        filter: Optional[ColumnField_Filter] = None,
        order_by: Optional[ColumnFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> ColumnFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "ColumnField_Filter", "value": filter},
            "orderBy": {"type": "ColumnFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFieldFields(field_name="columnFields", arguments=cleared_arguments)

    @classmethod
    def column_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[ColumnField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> ColumnFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "ColumnField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFieldsConnectionFields(
            field_name="columnFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> ColumnFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields(field_name="columns", arguments=cleared_arguments)

    @classmethod
    def columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> ColumnsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            field_name="columnsConnection", arguments=cleared_arguments
        )

    @classmethod
    def combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> CombinedFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            field_name="combinedFields", arguments=cleared_arguments
        )

    @classmethod
    def combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> CombinedFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            field_name="combinedFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def combined_set_fields(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> CombinedSetFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            field_name="combinedSetFields", arguments=cleared_arguments
        )

    @classmethod
    def combined_set_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> CombinedSetFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            field_name="combinedSetFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def custom_sql_tables(
        cls,
        *,
        filter: Optional[CustomSQLTable_Filter] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> CustomSQLTableFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTableFields(
            field_name="customSQLTables", arguments=cleared_arguments
        )

    @classmethod
    def custom_sql_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CustomSQLTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> CustomSQLTablesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTablesConnectionFields(
            field_name="customSQLTablesConnection", arguments=cleared_arguments
        )

    @classmethod
    def dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DashboardFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields(field_name="dashboards", arguments=cleared_arguments)

    @classmethod
    def dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DashboardsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            field_name="dashboardsConnection", arguments=cleared_arguments
        )

    @classmethod
    def data_clouds(
        cls,
        *,
        filter: Optional[DataCloud_Filter] = None,
        order_by: Optional[DataCloudSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DataCloudFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataCloud_Filter", "value": filter},
            "orderBy": {"type": "DataCloudSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataCloudFields(field_name="dataClouds", arguments=cleared_arguments)

    @classmethod
    def data_clouds_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataCloud_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataCloudSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DataCloudsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataCloud_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataCloudSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataCloudsConnectionFields(
            field_name="dataCloudsConnection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DataQualityCertificationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            field_name="dataQualityCertifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DataQualityCertificationsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            field_name="dataQualityCertificationsConnection",
            arguments=cleared_arguments,
        )

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DataQualityWarningFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            field_name="dataQualityWarnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DataQualityWarningsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            field_name="dataQualityWarningsConnection", arguments=cleared_arguments
        )

    @classmethod
    def database_servers(
        cls,
        *,
        filter: Optional[DatabaseServer_Filter] = None,
        order_by: Optional[DatabaseServerSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatabaseServerFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseServer_Filter", "value": filter},
            "orderBy": {"type": "DatabaseServerSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseServerFields(
            field_name="databaseServers", arguments=cleared_arguments
        )

    @classmethod
    def database_servers_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseServer_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseServerSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatabaseServersConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseServer_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseServerSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseServersConnectionFields(
            field_name="databaseServersConnection", arguments=cleared_arguments
        )

    @classmethod
    def database_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatabaseTableFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields(
            field_name="databaseTables", arguments=cleared_arguments
        )

    @classmethod
    def database_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatabaseTablesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            field_name="databaseTablesConnection", arguments=cleared_arguments
        )

    @classmethod
    def databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatabaseInterface:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface(field_name="databases", arguments=cleared_arguments)

    @classmethod
    def databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatabasesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            field_name="databasesConnection", arguments=cleared_arguments
        )

    @classmethod
    def datasource_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatasourceFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            field_name="datasourceFields", arguments=cleared_arguments
        )

    @classmethod
    def datasource_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatasourceFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            field_name="datasourceFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def datasource_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatasourceFilterFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            field_name="datasourceFilters", arguments=cleared_arguments
        )

    @classmethod
    def datasource_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatasourceFiltersConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            field_name="datasourceFiltersConnection", arguments=cleared_arguments
        )

    @classmethod
    def datasources(
        cls,
        *,
        filter: Optional[Datasource_Filter] = None,
        order_by: Optional[DatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatasourceInterface:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Datasource_Filter", "value": filter},
            "orderBy": {"type": "DatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceInterface(
            field_name="datasources", arguments=cleared_arguments
        )

    @classmethod
    def datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Datasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> DatasourcesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Datasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourcesConnectionFields(
            field_name="datasourcesConnection", arguments=cleared_arguments
        )

    @classmethod
    def embedded_datasources(
        cls,
        *,
        filter: Optional[EmbeddedDatasource_Filter] = None,
        order_by: Optional[EmbeddedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> EmbeddedDatasourceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "EmbeddedDatasource_Filter", "value": filter},
            "orderBy": {"type": "EmbeddedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EmbeddedDatasourceFields(
            field_name="embeddedDatasources", arguments=cleared_arguments
        )

    @classmethod
    def embedded_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[EmbeddedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[EmbeddedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> EmbeddedDatasourcesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "EmbeddedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "EmbeddedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EmbeddedDatasourcesConnectionFields(
            field_name="embeddedDatasourcesConnection", arguments=cleared_arguments
        )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FieldInterface:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface(field_name="fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            field_name="fieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def files(
        cls,
        *,
        filter: Optional[File_Filter] = None,
        order_by: Optional[FileSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FileFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "File_Filter", "value": filter},
            "orderBy": {"type": "FileSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FileFields(field_name="files", arguments=cleared_arguments)

    @classmethod
    def files_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[File_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FileSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FilesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "File_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FileSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FilesConnectionFields(
            field_name="filesConnection", arguments=cleared_arguments
        )

    @classmethod
    def flow_column_input_fields(
        cls,
        *,
        filter: Optional[FlowColumnInputField_Filter] = None,
        order_by: Optional[FlowColumnInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FlowColumnInputFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowColumnInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowColumnInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowColumnInputFieldFields(
            field_name="flowColumnInputFields", arguments=cleared_arguments
        )

    @classmethod
    def flow_column_input_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowColumnInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowColumnInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FlowColumnInputFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowColumnInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowColumnInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowColumnInputFieldsConnectionFields(
            field_name="flowColumnInputFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def flow_column_output_fields(
        cls,
        *,
        filter: Optional[FlowColumnOutputField_Filter] = None,
        order_by: Optional[FlowColumnOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FlowColumnOutputFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowColumnOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowColumnOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowColumnOutputFieldFields(
            field_name="flowColumnOutputFields", arguments=cleared_arguments
        )

    @classmethod
    def flow_column_output_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowColumnOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowColumnOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FlowColumnOutputFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowColumnOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowColumnOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowColumnOutputFieldsConnectionFields(
            field_name="flowColumnOutputFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def flow_field_input_fields(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> FlowFieldInputFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            field_name="flowFieldInputFields", arguments=cleared_arguments
        )

    @classmethod
    def flow_field_input_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> FlowFieldInputFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            field_name="flowFieldInputFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def flow_field_output_fields(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FlowFieldOutputFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            field_name="flowFieldOutputFields", arguments=cleared_arguments
        )

    @classmethod
    def flow_field_output_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FlowFieldOutputFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            field_name="flowFieldOutputFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def flow_output_steps(
        cls,
        *,
        filter: Optional[FlowOutputStep_Filter] = None,
        order_by: Optional[FlowOutputStepSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FlowOutputStepFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowOutputStep_Filter", "value": filter},
            "orderBy": {"type": "FlowOutputStepSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputStepFields(
            field_name="flowOutputSteps", arguments=cleared_arguments
        )

    @classmethod
    def flow_output_steps_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowOutputStep_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowOutputStepSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FlowOutputStepsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowOutputStep_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowOutputStepSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputStepsConnectionFields(
            field_name="flowOutputStepsConnection", arguments=cleared_arguments
        )

    @classmethod
    def flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FlowFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields(field_name="flows", arguments=cleared_arguments)

    @classmethod
    def flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> FlowsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            field_name="flowsConnection", arguments=cleared_arguments
        )

    @classmethod
    def generic_labels(
        cls,
        *,
        filter: Optional[GenericLabel_Filter] = None,
        order_by: Optional[GenericLabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> GenericLabelFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GenericLabel_Filter", "value": filter},
            "orderBy": {"type": "GenericLabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GenericLabelFields(
            field_name="genericLabels", arguments=cleared_arguments
        )

    @classmethod
    def generic_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GenericLabel_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GenericLabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> GenericLabelsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GenericLabel_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GenericLabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GenericLabelsConnectionFields(
            field_name="genericLabelsConnection", arguments=cleared_arguments
        )

    @classmethod
    def group_fields(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> GroupFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields(field_name="groupFields", arguments=cleared_arguments)

    @classmethod
    def group_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> GroupFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            field_name="groupFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def hierarchy_fields(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> HierarchyFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            field_name="hierarchyFields", arguments=cleared_arguments
        )

    @classmethod
    def hierarchy_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> HierarchyFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            field_name="hierarchyFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> LensFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields(field_name="lensFields", arguments=cleared_arguments)

    @classmethod
    def lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> LensFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            field_name="lensFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> LensFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields(field_name="lenses", arguments=cleared_arguments)

    @classmethod
    def lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> LensesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            field_name="lensesConnection", arguments=cleared_arguments
        )

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> MetricDefinitionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            field_name="metricDefinitions", arguments=cleared_arguments
        )

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> MetricDefinitionsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            field_name="metricDefinitionsConnection", arguments=cleared_arguments
        )

    @classmethod
    def metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> MetricFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields(field_name="metrics", arguments=cleared_arguments)

    @classmethod
    def metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> MetricsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            field_name="metricsConnection", arguments=cleared_arguments
        )

    @classmethod
    def parameters(
        cls,
        *,
        filter: Optional[Parameter_Filter] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> ParameterFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Parameter_Filter", "value": filter},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParameterFields(field_name="parameters", arguments=cleared_arguments)

    @classmethod
    def parameters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Parameter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> ParametersConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Parameter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParametersConnectionFields(
            field_name="parametersConnection", arguments=cleared_arguments
        )

    @classmethod
    def published_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> PublishedDatasourceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            field_name="publishedDatasources", arguments=cleared_arguments
        )

    @classmethod
    def published_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> PublishedDatasourcesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            field_name="publishedDatasourcesConnection", arguments=cleared_arguments
        )

    @classmethod
    def set_fields(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> SetFieldFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields(field_name="setFields", arguments=cleared_arguments)

    @classmethod
    def set_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> SetFieldsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            field_name="setFieldsConnection", arguments=cleared_arguments
        )

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> SheetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields(field_name="sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> SheetsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            field_name="sheetsConnection", arguments=cleared_arguments
        )

    @classmethod
    def table_additional_detailses(
        cls,
        *,
        filter: Optional[TableAdditionalDetails_Filter] = None,
        order_by: Optional[TableAdditionalDetailsSortOrder] = None
    ) -> TableAdditionalDetailsFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableAdditionalDetails_Filter", "value": filter},
            "orderBy": {"type": "TableAdditionalDetailsSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableAdditionalDetailsFields(
            field_name="tableAdditionalDetailses", arguments=cleared_arguments
        )

    @classmethod
    def table_additional_detailses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableAdditionalDetails_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableAdditionalDetailsSortOrder] = None
    ) -> TableAdditionalDetailsesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableAdditionalDetails_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableAdditionalDetailsSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableAdditionalDetailsesConnectionFields(
            field_name="tableAdditionalDetailsesConnection", arguments=cleared_arguments
        )

    @classmethod
    def tableau_sites(
        cls,
        *,
        filter: Optional[TableauSite_Filter] = None,
        order_by: Optional[TableauSiteSortOrder] = None
    ) -> TableauSiteFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauSite_Filter", "value": filter},
            "orderBy": {"type": "TableauSiteSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauSiteFields(field_name="tableauSites", arguments=cleared_arguments)

    @classmethod
    def tableau_sites_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauSite_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauSiteSortOrder] = None
    ) -> TableauSitesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauSite_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauSiteSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauSitesConnectionFields(
            field_name="tableauSitesConnection", arguments=cleared_arguments
        )

    @classmethod
    def tableau_users(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> TableauUserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields(field_name="tableauUsers", arguments=cleared_arguments)

    @classmethod
    def tableau_users_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> TableauUsersConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            field_name="tableauUsersConnection", arguments=cleared_arguments
        )

    @classmethod
    def tables(
        cls,
        *,
        filter: Optional[Table_Filter] = None,
        order_by: Optional[TableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> TableInterface:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Table_Filter", "value": filter},
            "orderBy": {"type": "TableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableInterface(field_name="tables", arguments=cleared_arguments)

    @classmethod
    def tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Table_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> TablesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Table_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TablesConnectionFields(
            field_name="tablesConnection", arguments=cleared_arguments
        )

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> TagFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields(field_name="tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> TagsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields(
            field_name="tagsConnection", arguments=cleared_arguments
        )

    @classmethod
    def views(
        cls,
        *,
        filter: Optional[View_Filter] = None,
        order_by: Optional[ViewSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> ViewInterface:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "View_Filter", "value": filter},
            "orderBy": {"type": "ViewSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ViewInterface(field_name="views", arguments=cleared_arguments)

    @classmethod
    def views_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[View_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ViewSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> ViewsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "View_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ViewSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ViewsConnectionFields(
            field_name="viewsConnection", arguments=cleared_arguments
        )

    @classmethod
    def virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> VirtualConnectionTableFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            field_name="virtualConnectionTables", arguments=cleared_arguments
        )

    @classmethod
    def virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> VirtualConnectionTablesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            field_name="virtualConnectionTablesConnection", arguments=cleared_arguments
        )

    @classmethod
    def virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> VirtualConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            field_name="virtualConnections", arguments=cleared_arguments
        )

    @classmethod
    def virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> VirtualConnectionsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            field_name="virtualConnectionsConnection", arguments=cleared_arguments
        )

    @classmethod
    def web_data_connectors(
        cls,
        *,
        filter: Optional[WebDataConnector_Filter] = None,
        order_by: Optional[WebDataConnectorSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> WebDataConnectorFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "WebDataConnector_Filter", "value": filter},
            "orderBy": {"type": "WebDataConnectorSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WebDataConnectorFields(
            field_name="webDataConnectors", arguments=cleared_arguments
        )

    @classmethod
    def web_data_connectors_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[WebDataConnector_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WebDataConnectorSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> WebDataConnectorsConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "WebDataConnector_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WebDataConnectorSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WebDataConnectorsConnectionFields(
            field_name="webDataConnectorsConnection", arguments=cleared_arguments
        )

    @classmethod
    def workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> WorkbookFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields(field_name="workbooks", arguments=cleared_arguments)

    @classmethod
    def workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> WorkbooksConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            field_name="workbooksConnection", arguments=cleared_arguments
        )

    @classmethod
    def schema(cls) -> __SchemaFields:
        return __SchemaFields(field_name="__schema")

    @classmethod
    def type(cls, name: str) -> __TypeFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return __TypeFields(field_name="__type", arguments=cleared_arguments)
