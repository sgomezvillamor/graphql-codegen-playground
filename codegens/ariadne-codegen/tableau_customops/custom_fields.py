# Generated by ariadne-codegen

from typing import Any, Dict, Optional, Union

from . import InheritanceType, PermissionMode
from .base_operation import GraphQLField
from .custom_typing_fields import (
    AnalyticsFieldGraphQLField,
    AskDataExtensionGraphQLField,
    AskDataExtensionsConnectionGraphQLField,
    BinFieldGraphQLField,
    BinFieldsConnectionGraphQLField,
    CalculatedFieldGraphQLField,
    CalculatedFieldsConnectionGraphQLField,
    CanHaveLabelsGraphQLField,
    CertifiableGraphQLField,
    CloudFileGraphQLField,
    CloudFilesConnectionGraphQLField,
    ColumnFieldGraphQLField,
    ColumnFieldsConnectionGraphQLField,
    ColumnGraphQLField,
    ColumnsConnectionGraphQLField,
    CombinedFieldGraphQLField,
    CombinedFieldsConnectionGraphQLField,
    CombinedSetFieldGraphQLField,
    CombinedSetFieldsConnectionGraphQLField,
    CustomSQLTableGraphQLField,
    CustomSQLTablesConnectionGraphQLField,
    DashboardGraphQLField,
    DashboardsConnectionGraphQLField,
    DatabaseGraphQLField,
    DatabasesConnectionGraphQLField,
    DatabaseServerGraphQLField,
    DatabaseServersConnectionGraphQLField,
    DatabaseTableGraphQLField,
    DatabaseTablesConnectionGraphQLField,
    DataCloudGraphQLField,
    DataCloudsConnectionGraphQLField,
    DataFieldGraphQLField,
    DataQualityCertificationGraphQLField,
    DataQualityCertificationsConnectionGraphQLField,
    DataQualityWarningGraphQLField,
    DataQualityWarningsConnectionGraphQLField,
    DatasourceFieldGraphQLField,
    DatasourceFieldsConnectionGraphQLField,
    DatasourceFilterGraphQLField,
    DatasourceFiltersConnectionGraphQLField,
    DatasourceGraphQLField,
    DatasourcesConnectionGraphQLField,
    EmbeddedDatasourceGraphQLField,
    EmbeddedDatasourcesConnectionGraphQLField,
    FieldGraphQLField,
    FieldReferencingFieldGraphQLField,
    FieldReferencingFieldsConnectionGraphQLField,
    FieldsConnectionGraphQLField,
    FileGraphQLField,
    FilesConnectionGraphQLField,
    FlowColumnInputFieldGraphQLField,
    FlowColumnInputFieldsConnectionGraphQLField,
    FlowColumnOutputFieldGraphQLField,
    FlowColumnOutputFieldsConnectionGraphQLField,
    FlowFieldInputFieldGraphQLField,
    FlowFieldInputFieldsConnectionGraphQLField,
    FlowFieldOutputFieldGraphQLField,
    FlowFieldOutputFieldsConnectionGraphQLField,
    FlowGraphQLField,
    FlowInputFieldGraphQLField,
    FlowInputFieldsConnectionGraphQLField,
    FlowOutputFieldGraphQLField,
    FlowOutputFieldsConnectionGraphQLField,
    FlowOutputStepGraphQLField,
    FlowOutputStepsConnectionGraphQLField,
    FlowsConnectionGraphQLField,
    GenericLabelGraphQLField,
    GenericLabelsConnectionGraphQLField,
    GroupFieldGraphQLField,
    GroupFieldsConnectionGraphQLField,
    HierarchyFieldGraphQLField,
    HierarchyFieldsConnectionGraphQLField,
    InheritedStringResultGraphQLField,
    LabelGraphQLField,
    LabelsConnectionGraphQLField,
    LensesConnectionGraphQLField,
    LensFieldGraphQLField,
    LensFieldsConnectionGraphQLField,
    LensGraphQLField,
    LinkedFlowGraphQLField,
    LinkedFlowsConnectionGraphQLField,
    MetricDefinitionGraphQLField,
    MetricDefinitionsConnectionGraphQLField,
    MetricGraphQLField,
    MetricsConnectionGraphQLField,
    NodeGraphQLField,
    PageInfoGraphQLField,
    ParameterGraphQLField,
    ParametersConnectionGraphQLField,
    PublishedDatasourceGraphQLField,
    PublishedDatasourcesConnectionGraphQLField,
    SetFieldGraphQLField,
    SetFieldsConnectionGraphQLField,
    SheetGraphQLField,
    SheetsConnectionGraphQLField,
    TableAdditionalDetailsesConnectionGraphQLField,
    TableAdditionalDetailsGraphQLField,
    TableauSiteGraphQLField,
    TableauSitesConnectionGraphQLField,
    TableauUserGraphQLField,
    TableauUsersConnectionGraphQLField,
    TableGraphQLField,
    TablesConnectionGraphQLField,
    TaggableGraphQLField,
    TaggablesConnectionGraphQLField,
    TagGraphQLField,
    TagsConnectionGraphQLField,
    ViewGraphQLField,
    ViewsConnectionGraphQLField,
    VirtualConnectionGraphQLField,
    VirtualConnectionsConnectionGraphQLField,
    VirtualConnectionTableGraphQLField,
    VirtualConnectionTablesConnectionGraphQLField,
    WarnableGraphQLField,
    WebDataConnectorGraphQLField,
    WebDataConnectorsConnectionGraphQLField,
    WorkbookGraphQLField,
    WorkbooksConnectionGraphQLField,
    __DirectiveGraphQLField,
    __EnumValueGraphQLField,
    __FieldGraphQLField,
    __InputValueGraphQLField,
    __SchemaGraphQLField,
    __TypeGraphQLField,
)
from .input_types import (
    AskDataExtension_Filter,
    AskDataExtensionSortOrder,
    BinField_Filter,
    BinFieldSortOrder,
    CalculatedField_Filter,
    CalculatedFieldSortOrder,
    Column_Filter,
    ColumnField_Filter,
    ColumnFieldSortOrder,
    ColumnSortOrder,
    CombinedField_Filter,
    CombinedFieldSortOrder,
    CombinedSetField_Filter,
    CombinedSetFieldSortOrder,
    CustomSQLTable_Filter,
    CustomSQLTableSortOrder,
    Dashboard_Filter,
    DashboardSortOrder,
    Database_Filter,
    DatabaseSortOrder,
    DatabaseTable_Filter,
    DatabaseTableSortOrder,
    DataQualityCertification_Filter,
    DataQualityCertificationSortOrder,
    DataQualityWarning_Filter,
    DataQualityWarningSortOrder,
    Datasource_Filter,
    DatasourceField_Filter,
    DatasourceFieldSortOrder,
    DatasourceFilter_Filter,
    DatasourceFilterSortOrder,
    DatasourceSortOrder,
    EmbeddedDatasource_Filter,
    EmbeddedDatasourceSortOrder,
    Field_Filter,
    FieldReferencingField_Filter,
    FieldReferencingFieldSortOrder,
    FieldSortOrder,
    Flow_Filter,
    FlowColumnInputField_Filter,
    FlowColumnInputFieldSortOrder,
    FlowColumnOutputField_Filter,
    FlowColumnOutputFieldSortOrder,
    FlowFieldInputField_Filter,
    FlowFieldInputFieldSortOrder,
    FlowFieldOutputField_Filter,
    FlowFieldOutputFieldSortOrder,
    FlowInputField_Filter,
    FlowInputFieldSortOrder,
    FlowOutputField_Filter,
    FlowOutputFieldSortOrder,
    FlowOutputStep_Filter,
    FlowOutputStepSortOrder,
    FlowSortOrder,
    GroupField_Filter,
    GroupFieldSortOrder,
    HierarchyField_Filter,
    HierarchyFieldSortOrder,
    Label_Filter,
    LabelSortOrder,
    Lens_Filter,
    LensField_Filter,
    LensFieldSortOrder,
    LensSortOrder,
    LinkedFlow_Filter,
    LinkedFlowSortOrder,
    Metric_Filter,
    MetricDefinition_Filter,
    MetricDefinitionSortOrder,
    MetricSortOrder,
    Parameter_Filter,
    ParameterSortOrder,
    PublishedDatasource_Filter,
    PublishedDatasourceSortOrder,
    SetField_Filter,
    SetFieldSortOrder,
    Sheet_Filter,
    SheetSortOrder,
    Table_Filter,
    TableauUser_Filter,
    TableauUserSortOrder,
    TableSortOrder,
    Tag_Filter,
    Taggable_Filter,
    TaggableSortOrder,
    TagSortOrder,
    View_Filter,
    ViewSortOrder,
    VirtualConnection_Filter,
    VirtualConnectionSortOrder,
    VirtualConnectionTable_Filter,
    VirtualConnectionTableSortOrder,
    Workbook_Filter,
    WorkbookSortOrder,
)


class AnalyticsFieldInterface(GraphQLField):
    aggregation: "AnalyticsFieldGraphQLField" = AnalyticsFieldGraphQLField(
        "aggregation"
    )
    aggregation_param: "AnalyticsFieldGraphQLField" = AnalyticsFieldGraphQLField(
        "aggregationParam"
    )

    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    default_format: "AnalyticsFieldGraphQLField" = AnalyticsFieldGraphQLField(
        "defaultFormat"
    )

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    semantic_role: "AnalyticsFieldGraphQLField" = AnalyticsFieldGraphQLField(
        "semanticRole"
    )

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            AnalyticsFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "LensFieldFields",
            "LensFieldsConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
        ]
    ) -> "AnalyticsFieldInterface":
        """Subfields should come from the AnalyticsFieldInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AnalyticsFieldInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "AnalyticsFieldInterface":
        self._inline_fragments[type_name] = subfields
        return self


class AskDataExtensionFields(GraphQLField):
    @classmethod
    def dashboard(cls) -> "DashboardFields":
        return DashboardFields("dashboard")

    id: "AskDataExtensionGraphQLField" = AskDataExtensionGraphQLField("id")

    @classmethod
    def lens(cls) -> "LensFields":
        return LensFields("lens")

    def fields(
        self,
        *subfields: Union[AskDataExtensionGraphQLField, "DashboardFields", "LensFields"]
    ) -> "AskDataExtensionFields":
        """Subfields should come from the AskDataExtensionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AskDataExtensionFields":
        self._alias = alias
        return self


class AskDataExtensionsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "AskDataExtensionFields":
        return AskDataExtensionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "AskDataExtensionsConnectionGraphQLField" = (
        AskDataExtensionsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            AskDataExtensionsConnectionGraphQLField,
            "AskDataExtensionFields",
            "PageInfoFields",
        ]
    ) -> "AskDataExtensionsConnectionFields":
        """Subfields should come from the AskDataExtensionsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AskDataExtensionsConnectionFields":
        self._alias = alias
        return self


class BinFieldFields(GraphQLField):
    bin_size: "BinFieldGraphQLField" = BinFieldGraphQLField("binSize")
    data_category: "BinFieldGraphQLField" = BinFieldGraphQLField("dataCategory")
    data_type: "BinFieldGraphQLField" = BinFieldGraphQLField("dataType")

    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    description: "BinFieldGraphQLField" = BinFieldGraphQLField("description")

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    folder_name: "BinFieldGraphQLField" = BinFieldGraphQLField("folderName")
    formula: "BinFieldGraphQLField" = BinFieldGraphQLField("formula")
    fully_qualified_name: "BinFieldGraphQLField" = BinFieldGraphQLField(
        "fullyQualifiedName"
    )
    id: "BinFieldGraphQLField" = BinFieldGraphQLField("id")
    is_hidden: "BinFieldGraphQLField" = BinFieldGraphQLField("isHidden")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    name: "BinFieldGraphQLField" = BinFieldGraphQLField("name")

    @classmethod
    def parameters(
        cls,
        *,
        filter: Optional[Parameter_Filter] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ParameterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Parameter_Filter", "value": filter},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParameterFields("parameters", arguments=cleared_arguments)

    @classmethod
    def parameters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Parameter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ParametersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Parameter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParametersConnectionFields(
            "parameters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    role: "BinFieldGraphQLField" = BinFieldGraphQLField("role")

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            BinFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "InheritedStringResultFields",
            "LensFieldFields",
            "LensFields",
            "LensFieldsConnectionFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "ParameterFields",
            "ParametersConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "BinFieldFields":
        """Subfields should come from the BinFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BinFieldFields":
        self._alias = alias
        return self


class BinFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "BinFieldFields":
        return BinFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "BinFieldsConnectionGraphQLField" = BinFieldsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            BinFieldsConnectionGraphQLField, "BinFieldFields", "PageInfoFields"
        ]
    ) -> "BinFieldsConnectionFields":
        """Subfields should come from the BinFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BinFieldsConnectionFields":
        self._alias = alias
        return self


class CalculatedFieldFields(GraphQLField):
    aggregation: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField(
        "aggregation"
    )
    aggregation_param: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField(
        "aggregationParam"
    )
    data_category: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField(
        "dataCategory"
    )
    data_type: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField("dataType")

    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    default_format: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField(
        "defaultFormat"
    )

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    description: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField(
        "description"
    )

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    folder_name: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField(
        "folderName"
    )
    formula: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField("formula")
    fully_qualified_name: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField(
        "fullyQualifiedName"
    )
    has_user_reference: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField(
        "hasUserReference"
    )
    id: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField("id")
    is_auto_generated: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField(
        "isAutoGenerated"
    )
    is_hidden: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField("isHidden")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    name: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField("name")

    @classmethod
    def parameters(
        cls,
        *,
        filter: Optional[Parameter_Filter] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ParameterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Parameter_Filter", "value": filter},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParameterFields("parameters", arguments=cleared_arguments)

    @classmethod
    def parameters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Parameter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ParametersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Parameter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParametersConnectionFields(
            "parameters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    role: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField("role")
    semantic_role: "CalculatedFieldGraphQLField" = CalculatedFieldGraphQLField(
        "semanticRole"
    )

    @classmethod
    def sheet(cls) -> "SheetFields":
        return SheetFields("sheet")

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            CalculatedFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "InheritedStringResultFields",
            "LensFieldFields",
            "LensFields",
            "LensFieldsConnectionFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "ParameterFields",
            "ParametersConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "CalculatedFieldFields":
        """Subfields should come from the CalculatedFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CalculatedFieldFields":
        self._alias = alias
        return self


class CalculatedFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "CalculatedFieldFields":
        return CalculatedFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CalculatedFieldsConnectionGraphQLField" = (
        CalculatedFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CalculatedFieldsConnectionGraphQLField,
            "CalculatedFieldFields",
            "PageInfoFields",
        ]
    ) -> "CalculatedFieldsConnectionFields":
        """Subfields should come from the CalculatedFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CalculatedFieldsConnectionFields":
        self._alias = alias
        return self


class CanHaveLabelsInterface(GraphQLField):
    id: "CanHaveLabelsGraphQLField" = CanHaveLabelsGraphQLField("id")

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "CanHaveLabelsGraphQLField" = CanHaveLabelsGraphQLField("luid")
    name: "CanHaveLabelsGraphQLField" = CanHaveLabelsGraphQLField("name")

    def fields(
        self,
        *subfields: Union[
            CanHaveLabelsGraphQLField, "LabelInterface", "LabelsConnectionFields"
        ]
    ) -> "CanHaveLabelsInterface":
        """Subfields should come from the CanHaveLabelsInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CanHaveLabelsInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "CanHaveLabelsInterface":
        self._inline_fragments[type_name] = subfields
        return self


class CertifiableInterface(GraphQLField):
    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    id: "CertifiableGraphQLField" = CertifiableGraphQLField("id")
    is_certified: "CertifiableGraphQLField" = CertifiableGraphQLField("isCertified")
    luid: "CertifiableGraphQLField" = CertifiableGraphQLField("luid")
    name: "CertifiableGraphQLField" = CertifiableGraphQLField("name")

    def fields(
        self,
        *subfields: Union[
            CertifiableGraphQLField,
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
        ]
    ) -> "CertifiableInterface":
        """Subfields should come from the CertifiableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CertifiableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "CertifiableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class CloudFileFields(GraphQLField):
    certification_note: "CloudFileGraphQLField" = CloudFileGraphQLField(
        "certificationNote"
    )

    @classmethod
    def certifier(cls) -> "TableauUserFields":
        return TableauUserFields("certifier")

    connection_type: "CloudFileGraphQLField" = CloudFileGraphQLField("connectionType")

    @classmethod
    def contact(cls) -> "TableauUserFields":
        return TableauUserFields("contact")

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    description: "CloudFileGraphQLField" = CloudFileGraphQLField("description")

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    file_extension: "CloudFileGraphQLField" = CloudFileGraphQLField("fileExtension")
    file_id: "CloudFileGraphQLField" = CloudFileGraphQLField("fileId")
    has_active_warning: "CloudFileGraphQLField" = CloudFileGraphQLField(
        "hasActiveWarning"
    )
    id: "CloudFileGraphQLField" = CloudFileGraphQLField("id")
    is_certified: "CloudFileGraphQLField" = CloudFileGraphQLField("isCertified")
    is_controlled_permissions_enabled: "CloudFileGraphQLField" = CloudFileGraphQLField(
        "isControlledPermissionsEnabled"
    )
    is_embedded: "CloudFileGraphQLField" = CloudFileGraphQLField("isEmbedded")
    is_grouped: "CloudFileGraphQLField" = CloudFileGraphQLField("isGrouped")

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "CloudFileGraphQLField" = CloudFileGraphQLField("luid")
    mime_type: "CloudFileGraphQLField" = CloudFileGraphQLField("mimeType")
    name: "CloudFileGraphQLField" = CloudFileGraphQLField("name")
    project_name: "CloudFileGraphQLField" = CloudFileGraphQLField("projectName")
    project_vizportal_url_id: "CloudFileGraphQLField" = CloudFileGraphQLField(
        "projectVizportalUrlId"
    )
    provider: "CloudFileGraphQLField" = CloudFileGraphQLField("provider")

    @classmethod
    def referenced_by_queries(
        cls,
        *,
        filter: Optional[CustomSQLTable_Filter] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTableFields(
            "referenced_by_queries", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_queries_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CustomSQLTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTablesConnectionFields(
            "referenced_by_queries_connection", arguments=cleared_arguments
        )

    request_url: "CloudFileGraphQLField" = CloudFileGraphQLField("requestUrl")

    @classmethod
    def tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("tables", arguments=cleared_arguments)

    @classmethod
    def tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    vizportal_id: "CloudFileGraphQLField" = CloudFileGraphQLField("vizportalId")

    def fields(
        self,
        *subfields: Union[
            CloudFileGraphQLField,
            "CustomSQLTableFields",
            "CustomSQLTablesConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "CloudFileFields":
        """Subfields should come from the CloudFileFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CloudFileFields":
        self._alias = alias
        return self


class CloudFilesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "CloudFileFields":
        return CloudFileFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CloudFilesConnectionGraphQLField" = CloudFilesConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            CloudFilesConnectionGraphQLField, "CloudFileFields", "PageInfoFields"
        ]
    ) -> "CloudFilesConnectionFields":
        """Subfields should come from the CloudFilesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CloudFilesConnectionFields":
        self._alias = alias
        return self


class ColumnFields(GraphQLField):
    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    description: "ColumnGraphQLField" = ColumnGraphQLField("description")

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    display_name: "ColumnGraphQLField" = ColumnGraphQLField("displayName")

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    has_active_warning: "ColumnGraphQLField" = ColumnGraphQLField("hasActiveWarning")
    id: "ColumnGraphQLField" = ColumnGraphQLField("id")
    is_nullable: "ColumnGraphQLField" = ColumnGraphQLField("isNullable")

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "ColumnGraphQLField" = ColumnGraphQLField("luid")
    name: "ColumnGraphQLField" = ColumnGraphQLField("name")

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[ColumnField_Filter] = None,
        order_by: Optional[ColumnFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "ColumnField_Filter", "value": filter},
            "orderBy": {"type": "ColumnFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFieldFields("referenced_by_fields", arguments=cleared_arguments)

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[ColumnField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "ColumnField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_column_input_field(
        cls,
        *,
        filter: Optional[FlowColumnInputField_Filter] = None,
        order_by: Optional[FlowColumnInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowColumnInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowColumnInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowColumnInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowColumnInputFieldFields(
            "referenced_by_flow_column_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_column_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowColumnInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowColumnInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowColumnInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowColumnInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowColumnInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowColumnInputFieldsConnectionFields(
            "referenced_by_flow_column_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_column_output_field(
        cls,
        *,
        filter: Optional[FlowColumnOutputField_Filter] = None,
        order_by: Optional[FlowColumnOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowColumnOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowColumnOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowColumnOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowColumnOutputFieldFields(
            "referenced_by_flow_column_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_column_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowColumnOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowColumnOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowColumnOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowColumnOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowColumnOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowColumnOutputFieldsConnectionFields(
            "referenced_by_flow_column_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_remote_column(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("referenced_by_remote_column", arguments=cleared_arguments)

    @classmethod
    def referenced_by_remote_column_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "referenced_by_remote_column_connection", arguments=cleared_arguments
        )

    @classmethod
    def remote_column(cls) -> "ColumnFields":
        return ColumnFields("remote_column")

    remote_type: "ColumnGraphQLField" = ColumnGraphQLField("remoteType")

    @classmethod
    def table(cls) -> "TableInterface":
        return TableInterface("table")

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    vizportal_id: "ColumnGraphQLField" = ColumnGraphQLField("vizportalId")

    def fields(
        self,
        *subfields: Union[
            ColumnGraphQLField,
            "ColumnFieldFields",
            "ColumnFields",
            "ColumnFieldsConnectionFields",
            "ColumnsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FieldInterface",
            "FieldsConnectionFields",
            "FlowColumnInputFieldFields",
            "FlowColumnInputFieldsConnectionFields",
            "FlowColumnOutputFieldFields",
            "FlowColumnOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "InheritedStringResultFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableInterface",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "ColumnFields":
        """Subfields should come from the ColumnFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ColumnFields":
        self._alias = alias
        return self


class ColumnFieldFields(GraphQLField):
    aggregation: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("aggregation")
    aggregation_param: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField(
        "aggregationParam"
    )

    @classmethod
    def columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("columns", arguments=cleared_arguments)

    @classmethod
    def columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "columns_connection", arguments=cleared_arguments
        )

    data_category: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("dataCategory")
    data_type: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("dataType")

    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    default_format: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("defaultFormat")

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    description: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("description")

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    folder_name: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("folderName")
    fully_qualified_name: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField(
        "fullyQualifiedName"
    )
    id: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("id")
    is_hidden: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("isHidden")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    name: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("name")

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    role: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("role")
    semantic_role: "ColumnFieldGraphQLField" = ColumnFieldGraphQLField("semanticRole")

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            ColumnFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "InheritedStringResultFields",
            "LensFieldFields",
            "LensFields",
            "LensFieldsConnectionFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "ColumnFieldFields":
        """Subfields should come from the ColumnFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ColumnFieldFields":
        self._alias = alias
        return self


class ColumnFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "ColumnFieldFields":
        return ColumnFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ColumnFieldsConnectionGraphQLField" = (
        ColumnFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ColumnFieldsConnectionGraphQLField, "ColumnFieldFields", "PageInfoFields"
        ]
    ) -> "ColumnFieldsConnectionFields":
        """Subfields should come from the ColumnFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ColumnFieldsConnectionFields":
        self._alias = alias
        return self


class ColumnsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "ColumnFields":
        return ColumnFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ColumnsConnectionGraphQLField" = ColumnsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            ColumnsConnectionGraphQLField, "ColumnFields", "PageInfoFields"
        ]
    ) -> "ColumnsConnectionFields":
        """Subfields should come from the ColumnsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ColumnsConnectionFields":
        self._alias = alias
        return self


class CombinedFieldFields(GraphQLField):
    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    description: "CombinedFieldGraphQLField" = CombinedFieldGraphQLField("description")

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    folder_name: "CombinedFieldGraphQLField" = CombinedFieldGraphQLField("folderName")
    fully_qualified_name: "CombinedFieldGraphQLField" = CombinedFieldGraphQLField(
        "fullyQualifiedName"
    )
    id: "CombinedFieldGraphQLField" = CombinedFieldGraphQLField("id")
    is_hidden: "CombinedFieldGraphQLField" = CombinedFieldGraphQLField("isHidden")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    name: "CombinedFieldGraphQLField" = CombinedFieldGraphQLField("name")

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            CombinedFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "InheritedStringResultFields",
            "LensFieldFields",
            "LensFields",
            "LensFieldsConnectionFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "CombinedFieldFields":
        """Subfields should come from the CombinedFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CombinedFieldFields":
        self._alias = alias
        return self


class CombinedFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "CombinedFieldFields":
        return CombinedFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CombinedFieldsConnectionGraphQLField" = (
        CombinedFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CombinedFieldsConnectionGraphQLField,
            "CombinedFieldFields",
            "PageInfoFields",
        ]
    ) -> "CombinedFieldsConnectionFields":
        """Subfields should come from the CombinedFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CombinedFieldsConnectionFields":
        self._alias = alias
        return self


class CombinedSetFieldFields(GraphQLField):
    combination_type: "CombinedSetFieldGraphQLField" = CombinedSetFieldGraphQLField(
        "combinationType"
    )

    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    delimiter: "CombinedSetFieldGraphQLField" = CombinedSetFieldGraphQLField(
        "delimiter"
    )

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    description: "CombinedSetFieldGraphQLField" = CombinedSetFieldGraphQLField(
        "description"
    )

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    folder_name: "CombinedSetFieldGraphQLField" = CombinedSetFieldGraphQLField(
        "folderName"
    )
    fully_qualified_name: "CombinedSetFieldGraphQLField" = CombinedSetFieldGraphQLField(
        "fullyQualifiedName"
    )
    id: "CombinedSetFieldGraphQLField" = CombinedSetFieldGraphQLField("id")
    is_hidden: "CombinedSetFieldGraphQLField" = CombinedSetFieldGraphQLField("isHidden")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    name: "CombinedSetFieldGraphQLField" = CombinedSetFieldGraphQLField("name")

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            CombinedSetFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "InheritedStringResultFields",
            "LensFieldFields",
            "LensFields",
            "LensFieldsConnectionFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "CombinedSetFieldFields":
        """Subfields should come from the CombinedSetFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CombinedSetFieldFields":
        self._alias = alias
        return self


class CombinedSetFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "CombinedSetFieldFields":
        return CombinedSetFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CombinedSetFieldsConnectionGraphQLField" = (
        CombinedSetFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CombinedSetFieldsConnectionGraphQLField,
            "CombinedSetFieldFields",
            "PageInfoFields",
        ]
    ) -> "CombinedSetFieldsConnectionFields":
        """Subfields should come from the CombinedSetFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CombinedSetFieldsConnectionFields":
        self._alias = alias
        return self


class CustomSQLTableFields(GraphQLField):
    @classmethod
    def columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("columns", arguments=cleared_arguments)

    @classmethod
    def columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "columns_connection", arguments=cleared_arguments
        )

    connection_type: "CustomSQLTableGraphQLField" = CustomSQLTableGraphQLField(
        "connectionType"
    )

    @classmethod
    def database(cls) -> "DatabaseInterface":
        return DatabaseInterface("database")

    description: "CustomSQLTableGraphQLField" = CustomSQLTableGraphQLField(
        "description"
    )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    id: "CustomSQLTableGraphQLField" = CustomSQLTableGraphQLField("id")
    is_embedded: "CustomSQLTableGraphQLField" = CustomSQLTableGraphQLField("isEmbedded")
    is_unsupported_custom_sql: "CustomSQLTableGraphQLField" = (
        CustomSQLTableGraphQLField("isUnsupportedCustomSql")
    )
    name: "CustomSQLTableGraphQLField" = CustomSQLTableGraphQLField("name")
    query: "CustomSQLTableGraphQLField" = CustomSQLTableGraphQLField("query")

    @classmethod
    def tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("tables", arguments=cleared_arguments)

    @classmethod
    def tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            CustomSQLTableGraphQLField,
            "ColumnFields",
            "ColumnsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "CustomSQLTableFields":
        """Subfields should come from the CustomSQLTableFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomSQLTableFields":
        self._alias = alias
        return self


class CustomSQLTablesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "CustomSQLTableFields":
        return CustomSQLTableFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CustomSQLTablesConnectionGraphQLField" = (
        CustomSQLTablesConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            CustomSQLTablesConnectionGraphQLField,
            "CustomSQLTableFields",
            "PageInfoFields",
        ]
    ) -> "CustomSQLTablesConnectionFields":
        """Subfields should come from the CustomSQLTablesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomSQLTablesConnectionFields":
        self._alias = alias
        return self


class DashboardFields(GraphQLField):
    @classmethod
    def ask_data_extensions(
        cls,
        *,
        filter: Optional[AskDataExtension_Filter] = None,
        order_by: Optional[AskDataExtensionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "AskDataExtensionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "AskDataExtension_Filter", "value": filter},
            "orderBy": {"type": "AskDataExtensionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AskDataExtensionFields(
            "ask_data_extensions", arguments=cleared_arguments
        )

    @classmethod
    def ask_data_extensions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[AskDataExtension_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[AskDataExtensionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "AskDataExtensionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "AskDataExtension_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "AskDataExtensionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AskDataExtensionsConnectionFields(
            "ask_data_extensions_connection", arguments=cleared_arguments
        )

    created_at: "DashboardGraphQLField" = DashboardGraphQLField("createdAt")
    document_view_id: "DashboardGraphQLField" = DashboardGraphQLField("documentViewId")
    id: "DashboardGraphQLField" = DashboardGraphQLField("id")
    index: "DashboardGraphQLField" = DashboardGraphQLField("index")
    luid: "DashboardGraphQLField" = DashboardGraphQLField("luid")
    name: "DashboardGraphQLField" = DashboardGraphQLField("name")
    path: "DashboardGraphQLField" = DashboardGraphQLField("path")

    @classmethod
    def referenced_by_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("referenced_by_metrics", arguments=cleared_arguments)

    @classmethod
    def referenced_by_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "referenced_by_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    updated_at: "DashboardGraphQLField" = DashboardGraphQLField("updatedAt")

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[Datasource_Filter] = None,
        order_by: Optional[DatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Datasource_Filter", "value": filter},
            "orderBy": {"type": "DatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceInterface("upstream_datasources", arguments=cleared_arguments)

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Datasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Datasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("upstream_lenses", arguments=cleared_arguments)

    @classmethod
    def upstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "upstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_sheet_field_instances(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface(
            "upstream_sheet_field_instances", arguments=cleared_arguments
        )

    @classmethod
    def upstream_sheet_field_instances_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_sheet_field_instances_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[Table_Filter] = None,
        order_by: Optional[TableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "TableInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Table_Filter", "value": filter},
            "orderBy": {"type": "TableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableInterface("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Table_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "TablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Table_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def workbook(cls) -> "WorkbookFields":
        return WorkbookFields("workbook")

    def fields(
        self,
        *subfields: Union[
            DashboardGraphQLField,
            "AskDataExtensionFields",
            "AskDataExtensionsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabasesConnectionFields",
            "DatasourceInterface",
            "DatasourcesConnectionFields",
            "FieldInterface",
            "FieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableInterface",
            "TablesConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "WorkbookFields",
        ]
    ) -> "DashboardFields":
        """Subfields should come from the DashboardFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DashboardFields":
        self._alias = alias
        return self


class DashboardsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "DashboardFields":
        return DashboardFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DashboardsConnectionGraphQLField" = DashboardsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            DashboardsConnectionGraphQLField, "DashboardFields", "PageInfoFields"
        ]
    ) -> "DashboardsConnectionFields":
        """Subfields should come from the DashboardsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DashboardsConnectionFields":
        self._alias = alias
        return self


class DataCloudFields(GraphQLField):
    certification_note: "DataCloudGraphQLField" = DataCloudGraphQLField(
        "certificationNote"
    )

    @classmethod
    def certifier(cls) -> "TableauUserFields":
        return TableauUserFields("certifier")

    connection_type: "DataCloudGraphQLField" = DataCloudGraphQLField("connectionType")

    @classmethod
    def contact(cls) -> "TableauUserFields":
        return TableauUserFields("contact")

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    description: "DataCloudGraphQLField" = DataCloudGraphQLField("description")

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    has_active_warning: "DataCloudGraphQLField" = DataCloudGraphQLField(
        "hasActiveWarning"
    )
    id: "DataCloudGraphQLField" = DataCloudGraphQLField("id")
    is_certified: "DataCloudGraphQLField" = DataCloudGraphQLField("isCertified")
    is_controlled_permissions_enabled: "DataCloudGraphQLField" = DataCloudGraphQLField(
        "isControlledPermissionsEnabled"
    )
    is_embedded: "DataCloudGraphQLField" = DataCloudGraphQLField("isEmbedded")
    is_grouped: "DataCloudGraphQLField" = DataCloudGraphQLField("isGrouped")

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "DataCloudGraphQLField" = DataCloudGraphQLField("luid")
    name: "DataCloudGraphQLField" = DataCloudGraphQLField("name")
    project_name: "DataCloudGraphQLField" = DataCloudGraphQLField("projectName")
    project_vizportal_url_id: "DataCloudGraphQLField" = DataCloudGraphQLField(
        "projectVizportalUrlId"
    )

    @classmethod
    def referenced_by_queries(
        cls,
        *,
        filter: Optional[CustomSQLTable_Filter] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTableFields(
            "referenced_by_queries", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_queries_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CustomSQLTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTablesConnectionFields(
            "referenced_by_queries_connection", arguments=cleared_arguments
        )

    @classmethod
    def tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("tables", arguments=cleared_arguments)

    @classmethod
    def tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    vizportal_id: "DataCloudGraphQLField" = DataCloudGraphQLField("vizportalId")

    def fields(
        self,
        *subfields: Union[
            DataCloudGraphQLField,
            "CustomSQLTableFields",
            "CustomSQLTablesConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "DataCloudFields":
        """Subfields should come from the DataCloudFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataCloudFields":
        self._alias = alias
        return self


class DataCloudsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "DataCloudFields":
        return DataCloudFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DataCloudsConnectionGraphQLField" = DataCloudsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            DataCloudsConnectionGraphQLField, "DataCloudFields", "PageInfoFields"
        ]
    ) -> "DataCloudsConnectionFields":
        """Subfields should come from the DataCloudsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataCloudsConnectionFields":
        self._alias = alias
        return self


class DataFieldInterface(GraphQLField):
    data_category: "DataFieldGraphQLField" = DataFieldGraphQLField("dataCategory")
    data_type: "DataFieldGraphQLField" = DataFieldGraphQLField("dataType")

    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    role: "DataFieldGraphQLField" = DataFieldGraphQLField("role")

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[
            DataFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "LensFieldFields",
            "LensFieldsConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
        ]
    ) -> "DataFieldInterface":
        """Subfields should come from the DataFieldInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataFieldInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "DataFieldInterface":
        self._inline_fragments[type_name] = subfields
        return self


class DataQualityCertificationFields(GraphQLField):
    @classmethod
    def asset(cls) -> "CanHaveLabelsInterface":
        return CanHaveLabelsInterface("asset")

    @classmethod
    def author(cls) -> "TableauUserFields":
        return TableauUserFields("author")

    author_display_name: "DataQualityCertificationGraphQLField" = (
        DataQualityCertificationGraphQLField("authorDisplayName")
    )
    category: "DataQualityCertificationGraphQLField" = (
        DataQualityCertificationGraphQLField("category")
    )
    created_at: "DataQualityCertificationGraphQLField" = (
        DataQualityCertificationGraphQLField("createdAt")
    )
    id: "DataQualityCertificationGraphQLField" = DataQualityCertificationGraphQLField(
        "id"
    )
    is_active: "DataQualityCertificationGraphQLField" = (
        DataQualityCertificationGraphQLField("isActive")
    )
    is_elevated: "DataQualityCertificationGraphQLField" = (
        DataQualityCertificationGraphQLField("isElevated")
    )
    luid: "DataQualityCertificationGraphQLField" = DataQualityCertificationGraphQLField(
        "luid"
    )
    message: "DataQualityCertificationGraphQLField" = (
        DataQualityCertificationGraphQLField("message")
    )
    updated_at: "DataQualityCertificationGraphQLField" = (
        DataQualityCertificationGraphQLField("updatedAt")
    )
    value: "DataQualityCertificationGraphQLField" = (
        DataQualityCertificationGraphQLField("value")
    )
    vizportal_id: "DataQualityCertificationGraphQLField" = (
        DataQualityCertificationGraphQLField("vizportalId")
    )

    def fields(
        self,
        *subfields: Union[
            DataQualityCertificationGraphQLField,
            "CanHaveLabelsInterface",
            "TableauUserFields",
        ]
    ) -> "DataQualityCertificationFields":
        """Subfields should come from the DataQualityCertificationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataQualityCertificationFields":
        self._alias = alias
        return self


class DataQualityCertificationsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "DataQualityCertificationFields":
        return DataQualityCertificationFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DataQualityCertificationsConnectionGraphQLField" = (
        DataQualityCertificationsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DataQualityCertificationsConnectionGraphQLField,
            "DataQualityCertificationFields",
            "PageInfoFields",
        ]
    ) -> "DataQualityCertificationsConnectionFields":
        """Subfields should come from the DataQualityCertificationsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataQualityCertificationsConnectionFields":
        self._alias = alias
        return self


class DataQualityWarningFields(GraphQLField):
    @classmethod
    def asset(cls) -> "CanHaveLabelsInterface":
        return CanHaveLabelsInterface("asset")

    @classmethod
    def author(cls) -> "TableauUserFields":
        return TableauUserFields("author")

    author_display_name: "DataQualityWarningGraphQLField" = (
        DataQualityWarningGraphQLField("authorDisplayName")
    )
    category: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField(
        "category"
    )
    created_at: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField(
        "createdAt"
    )
    id: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField("id")
    is_active: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField(
        "isActive"
    )
    is_elevated: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField(
        "isElevated"
    )
    is_severe: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField(
        "isSevere"
    )
    luid: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField("luid")
    message: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField(
        "message"
    )
    updated_at: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField(
        "updatedAt"
    )
    value: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField("value")
    vizportal_id: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField(
        "vizportalId"
    )
    warning_type: "DataQualityWarningGraphQLField" = DataQualityWarningGraphQLField(
        "warningType"
    )

    def fields(
        self,
        *subfields: Union[
            DataQualityWarningGraphQLField,
            "CanHaveLabelsInterface",
            "TableauUserFields",
        ]
    ) -> "DataQualityWarningFields":
        """Subfields should come from the DataQualityWarningFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataQualityWarningFields":
        self._alias = alias
        return self


class DataQualityWarningsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DataQualityWarningsConnectionGraphQLField" = (
        DataQualityWarningsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DataQualityWarningsConnectionGraphQLField,
            "DataQualityWarningFields",
            "PageInfoFields",
        ]
    ) -> "DataQualityWarningsConnectionFields":
        """Subfields should come from the DataQualityWarningsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DataQualityWarningsConnectionFields":
        self._alias = alias
        return self


class DatabaseInterface(GraphQLField):
    certification_note: "DatabaseGraphQLField" = DatabaseGraphQLField(
        "certificationNote"
    )

    @classmethod
    def certifier(cls) -> "TableauUserFields":
        return TableauUserFields("certifier")

    connection_type: "DatabaseGraphQLField" = DatabaseGraphQLField("connectionType")

    @classmethod
    def contact(cls) -> "TableauUserFields":
        return TableauUserFields("contact")

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    description: "DatabaseGraphQLField" = DatabaseGraphQLField("description")

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    has_active_warning: "DatabaseGraphQLField" = DatabaseGraphQLField(
        "hasActiveWarning"
    )
    id: "DatabaseGraphQLField" = DatabaseGraphQLField("id")
    is_certified: "DatabaseGraphQLField" = DatabaseGraphQLField("isCertified")
    is_controlled_permissions_enabled: "DatabaseGraphQLField" = DatabaseGraphQLField(
        "isControlledPermissionsEnabled"
    )
    is_embedded: "DatabaseGraphQLField" = DatabaseGraphQLField("isEmbedded")
    is_grouped: "DatabaseGraphQLField" = DatabaseGraphQLField("isGrouped")

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "DatabaseGraphQLField" = DatabaseGraphQLField("luid")
    name: "DatabaseGraphQLField" = DatabaseGraphQLField("name")
    project_name: "DatabaseGraphQLField" = DatabaseGraphQLField("projectName")
    project_vizportal_url_id: "DatabaseGraphQLField" = DatabaseGraphQLField(
        "projectVizportalUrlId"
    )

    @classmethod
    def referenced_by_queries(
        cls,
        *,
        filter: Optional[CustomSQLTable_Filter] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTableFields(
            "referenced_by_queries", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_queries_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CustomSQLTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTablesConnectionFields(
            "referenced_by_queries_connection", arguments=cleared_arguments
        )

    @classmethod
    def tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("tables", arguments=cleared_arguments)

    @classmethod
    def tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    vizportal_id: "DatabaseGraphQLField" = DatabaseGraphQLField("vizportalId")

    def fields(
        self,
        *subfields: Union[
            DatabaseGraphQLField,
            "CustomSQLTableFields",
            "CustomSQLTablesConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "DatabaseInterface":
        """Subfields should come from the DatabaseInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatabaseInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "DatabaseInterface":
        self._inline_fragments[type_name] = subfields
        return self


class DatabaseServerFields(GraphQLField):
    certification_note: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField(
        "certificationNote"
    )

    @classmethod
    def certifier(cls) -> "TableauUserFields":
        return TableauUserFields("certifier")

    connection_type: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField(
        "connectionType"
    )

    @classmethod
    def contact(cls) -> "TableauUserFields":
        return TableauUserFields("contact")

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    description: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField(
        "description"
    )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    extended_connection_type: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField(
        "extendedConnectionType"
    )
    has_active_warning: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField(
        "hasActiveWarning"
    )
    host_name: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField("hostName")
    id: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField("id")
    is_certified: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField(
        "isCertified"
    )
    is_controlled_permissions_enabled: "DatabaseServerGraphQLField" = (
        DatabaseServerGraphQLField("isControlledPermissionsEnabled")
    )
    is_embedded: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField("isEmbedded")
    is_grouped: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField("isGrouped")

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField("luid")
    name: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField("name")
    port: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField("port")
    project_name: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField(
        "projectName"
    )
    project_vizportal_url_id: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField(
        "projectVizportalUrlId"
    )

    @classmethod
    def referenced_by_queries(
        cls,
        *,
        filter: Optional[CustomSQLTable_Filter] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTableFields(
            "referenced_by_queries", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_queries_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CustomSQLTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTablesConnectionFields(
            "referenced_by_queries_connection", arguments=cleared_arguments
        )

    service: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField("service")

    @classmethod
    def tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("tables", arguments=cleared_arguments)

    @classmethod
    def tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    vizportal_id: "DatabaseServerGraphQLField" = DatabaseServerGraphQLField(
        "vizportalId"
    )

    def fields(
        self,
        *subfields: Union[
            DatabaseServerGraphQLField,
            "CustomSQLTableFields",
            "CustomSQLTablesConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "DatabaseServerFields":
        """Subfields should come from the DatabaseServerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatabaseServerFields":
        self._alias = alias
        return self


class DatabaseServersConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "DatabaseServerFields":
        return DatabaseServerFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DatabaseServersConnectionGraphQLField" = (
        DatabaseServersConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DatabaseServersConnectionGraphQLField,
            "DatabaseServerFields",
            "PageInfoFields",
        ]
    ) -> "DatabaseServersConnectionFields":
        """Subfields should come from the DatabaseServersConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatabaseServersConnectionFields":
        self._alias = alias
        return self


class DatabaseTableFields(GraphQLField):
    @classmethod
    def additional_details(cls) -> "TableAdditionalDetailsFields":
        return TableAdditionalDetailsFields("additional_details")

    certification_note: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField(
        "certificationNote"
    )

    @classmethod
    def certifier(cls) -> "TableauUserFields":
        return TableauUserFields("certifier")

    @classmethod
    def columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("columns", arguments=cleared_arguments)

    @classmethod
    def columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "columns_connection", arguments=cleared_arguments
        )

    connection_type: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField(
        "connectionType"
    )

    @classmethod
    def contact(cls) -> "TableauUserFields":
        return TableauUserFields("contact")

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def database(cls) -> "DatabaseInterface":
        return DatabaseInterface("database")

    description: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("description")

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    full_name: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("fullName")
    has_active_warning: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField(
        "hasActiveWarning"
    )
    id: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("id")
    is_certified: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("isCertified")
    is_embedded: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("isEmbedded")

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("luid")
    name: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("name")
    project_name: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("projectName")
    project_vizportal_url_id: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField(
        "projectVizportalUrlId"
    )

    @classmethod
    def referenced_by_queries(
        cls,
        *,
        filter: Optional[CustomSQLTable_Filter] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTableFields(
            "referenced_by_queries", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_queries_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CustomSQLTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTablesConnectionFields(
            "referenced_by_queries_connection", arguments=cleared_arguments
        )

    schema: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("schema")
    table_type: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("tableType")

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    vizportal_id: "DatabaseTableGraphQLField" = DatabaseTableGraphQLField("vizportalId")

    def fields(
        self,
        *subfields: Union[
            DatabaseTableGraphQLField,
            "ColumnFields",
            "ColumnsConnectionFields",
            "CustomSQLTableFields",
            "CustomSQLTablesConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableAdditionalDetailsFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "DatabaseTableFields":
        """Subfields should come from the DatabaseTableFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatabaseTableFields":
        self._alias = alias
        return self


class DatabaseTablesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "DatabaseTableFields":
        return DatabaseTableFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DatabaseTablesConnectionGraphQLField" = (
        DatabaseTablesConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DatabaseTablesConnectionGraphQLField,
            "DatabaseTableFields",
            "PageInfoFields",
        ]
    ) -> "DatabaseTablesConnectionFields":
        """Subfields should come from the DatabaseTablesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatabaseTablesConnectionFields":
        self._alias = alias
        return self


class DatabasesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "DatabaseInterface":
        return DatabaseInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DatabasesConnectionGraphQLField" = DatabasesConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            DatabasesConnectionGraphQLField, "DatabaseInterface", "PageInfoFields"
        ]
    ) -> "DatabasesConnectionFields":
        """Subfields should come from the DatabasesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatabasesConnectionFields":
        self._alias = alias
        return self


class DatasourceInterface(GraphQLField):
    contains_unsupported_custom_sql: "DatasourceGraphQLField" = DatasourceGraphQLField(
        "containsUnsupportedCustomSql"
    )
    created_at: "DatasourceGraphQLField" = DatasourceGraphQLField("createdAt")

    @classmethod
    def datasource_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields("datasource_filters", arguments=cleared_arguments)

    @classmethod
    def datasource_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "datasource_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    extract_last_incremental_update_time: "DatasourceGraphQLField" = (
        DatasourceGraphQLField("extractLastIncrementalUpdateTime")
    )
    extract_last_refresh_time: "DatasourceGraphQLField" = DatasourceGraphQLField(
        "extractLastRefreshTime"
    )
    extract_last_update_time: "DatasourceGraphQLField" = DatasourceGraphQLField(
        "extractLastUpdateTime"
    )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    has_extracts: "DatasourceGraphQLField" = DatasourceGraphQLField("hasExtracts")
    has_user_reference: "DatasourceGraphQLField" = DatasourceGraphQLField(
        "hasUserReference"
    )
    id: "DatasourceGraphQLField" = DatasourceGraphQLField("id")

    @classmethod
    def lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("lenses", arguments=cleared_arguments)

    @classmethod
    def lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields("lenses_connection", arguments=cleared_arguments)

    name: "DatasourceGraphQLField" = DatasourceGraphQLField("name")
    updated_at: "DatasourceGraphQLField" = DatasourceGraphQLField("updatedAt")

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            DatasourceGraphQLField,
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "FieldInterface",
            "FieldsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "DatasourceInterface":
        """Subfields should come from the DatasourceInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasourceInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "DatasourceInterface":
        self._inline_fragments[type_name] = subfields
        return self


class DatasourceFieldFields(GraphQLField):
    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    description: "DatasourceFieldGraphQLField" = DatasourceFieldGraphQLField(
        "description"
    )

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    folder_name: "DatasourceFieldGraphQLField" = DatasourceFieldGraphQLField(
        "folderName"
    )
    fully_qualified_name: "DatasourceFieldGraphQLField" = DatasourceFieldGraphQLField(
        "fullyQualifiedName"
    )
    id: "DatasourceFieldGraphQLField" = DatasourceFieldGraphQLField("id")
    is_hidden: "DatasourceFieldGraphQLField" = DatasourceFieldGraphQLField("isHidden")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    name: "DatasourceFieldGraphQLField" = DatasourceFieldGraphQLField("name")

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def remote_field(cls) -> "FieldInterface":
        return FieldInterface("remote_field")

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            DatasourceFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "InheritedStringResultFields",
            "LensFieldFields",
            "LensFields",
            "LensFieldsConnectionFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "DatasourceFieldFields":
        """Subfields should come from the DatasourceFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasourceFieldFields":
        self._alias = alias
        return self


class DatasourceFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "DatasourceFieldFields":
        return DatasourceFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DatasourceFieldsConnectionGraphQLField" = (
        DatasourceFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DatasourceFieldsConnectionGraphQLField,
            "DatasourceFieldFields",
            "PageInfoFields",
        ]
    ) -> "DatasourceFieldsConnectionFields":
        """Subfields should come from the DatasourceFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasourceFieldsConnectionFields":
        self._alias = alias
        return self


class DatasourceFilterFields(GraphQLField):
    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    @classmethod
    def field(cls) -> "FieldInterface":
        return FieldInterface("field")

    id: "DatasourceFilterGraphQLField" = DatasourceFilterGraphQLField("id")

    def fields(
        self,
        *subfields: Union[
            DatasourceFilterGraphQLField, "DatasourceInterface", "FieldInterface"
        ]
    ) -> "DatasourceFilterFields":
        """Subfields should come from the DatasourceFilterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasourceFilterFields":
        self._alias = alias
        return self


class DatasourceFiltersConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "DatasourceFilterFields":
        return DatasourceFilterFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DatasourceFiltersConnectionGraphQLField" = (
        DatasourceFiltersConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DatasourceFiltersConnectionGraphQLField,
            "DatasourceFilterFields",
            "PageInfoFields",
        ]
    ) -> "DatasourceFiltersConnectionFields":
        """Subfields should come from the DatasourceFiltersConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasourceFiltersConnectionFields":
        self._alias = alias
        return self


class DatasourcesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "DatasourceInterface":
        return DatasourceInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "DatasourcesConnectionGraphQLField" = (
        DatasourcesConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            DatasourcesConnectionGraphQLField, "DatasourceInterface", "PageInfoFields"
        ]
    ) -> "DatasourcesConnectionFields":
        """Subfields should come from the DatasourcesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DatasourcesConnectionFields":
        self._alias = alias
        return self


class EmbeddedDatasourceFields(GraphQLField):
    contains_unsupported_custom_sql: "EmbeddedDatasourceGraphQLField" = (
        EmbeddedDatasourceGraphQLField("containsUnsupportedCustomSql")
    )
    created_at: "EmbeddedDatasourceGraphQLField" = EmbeddedDatasourceGraphQLField(
        "createdAt"
    )

    @classmethod
    def datasource_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields("datasource_filters", arguments=cleared_arguments)

    @classmethod
    def datasource_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "datasource_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    extract_last_incremental_update_time: "EmbeddedDatasourceGraphQLField" = (
        EmbeddedDatasourceGraphQLField("extractLastIncrementalUpdateTime")
    )
    extract_last_refresh_time: "EmbeddedDatasourceGraphQLField" = (
        EmbeddedDatasourceGraphQLField("extractLastRefreshTime")
    )
    extract_last_update_time: "EmbeddedDatasourceGraphQLField" = (
        EmbeddedDatasourceGraphQLField("extractLastUpdateTime")
    )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    has_extracts: "EmbeddedDatasourceGraphQLField" = EmbeddedDatasourceGraphQLField(
        "hasExtracts"
    )
    has_user_reference: "EmbeddedDatasourceGraphQLField" = (
        EmbeddedDatasourceGraphQLField("hasUserReference")
    )
    id: "EmbeddedDatasourceGraphQLField" = EmbeddedDatasourceGraphQLField("id")

    @classmethod
    def lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("lenses", arguments=cleared_arguments)

    @classmethod
    def lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields("lenses_connection", arguments=cleared_arguments)

    name: "EmbeddedDatasourceGraphQLField" = EmbeddedDatasourceGraphQLField("name")

    @classmethod
    def parent_published_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "parent_published_datasources", arguments=cleared_arguments
        )

    @classmethod
    def parent_published_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "parent_published_datasources_connection", arguments=cleared_arguments
        )

    updated_at: "EmbeddedDatasourceGraphQLField" = EmbeddedDatasourceGraphQLField(
        "updatedAt"
    )

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def workbook(cls) -> "WorkbookFields":
        return WorkbookFields("workbook")

    def fields(
        self,
        *subfields: Union[
            EmbeddedDatasourceGraphQLField,
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "FieldInterface",
            "FieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "EmbeddedDatasourceFields":
        """Subfields should come from the EmbeddedDatasourceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmbeddedDatasourceFields":
        self._alias = alias
        return self


class EmbeddedDatasourcesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "EmbeddedDatasourceFields":
        return EmbeddedDatasourceFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "EmbeddedDatasourcesConnectionGraphQLField" = (
        EmbeddedDatasourcesConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            EmbeddedDatasourcesConnectionGraphQLField,
            "EmbeddedDatasourceFields",
            "PageInfoFields",
        ]
    ) -> "EmbeddedDatasourcesConnectionFields":
        """Subfields should come from the EmbeddedDatasourcesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmbeddedDatasourcesConnectionFields":
        self._alias = alias
        return self


class FieldInterface(GraphQLField):
    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    description: "FieldGraphQLField" = FieldGraphQLField("description")

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    folder_name: "FieldGraphQLField" = FieldGraphQLField("folderName")
    fully_qualified_name: "FieldGraphQLField" = FieldGraphQLField("fullyQualifiedName")
    id: "FieldGraphQLField" = FieldGraphQLField("id")
    is_hidden: "FieldGraphQLField" = FieldGraphQLField("isHidden")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    name: "FieldGraphQLField" = FieldGraphQLField("name")

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            FieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "InheritedStringResultFields",
            "LensFieldFields",
            "LensFields",
            "LensFieldsConnectionFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "FieldInterface":
        """Subfields should come from the FieldInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FieldInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "FieldInterface":
        self._inline_fragments[type_name] = subfields
        return self


class FieldReferencingFieldInterface(GraphQLField):
    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    fully_qualified_name: "FieldReferencingFieldGraphQLField" = (
        FieldReferencingFieldGraphQLField("fullyQualifiedName")
    )
    id: "FieldReferencingFieldGraphQLField" = FieldReferencingFieldGraphQLField("id")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            FieldReferencingFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "LensFieldFields",
            "LensFieldsConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
        ]
    ) -> "FieldReferencingFieldInterface":
        """Subfields should come from the FieldReferencingFieldInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FieldReferencingFieldInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "FieldReferencingFieldInterface":
        self._inline_fragments[type_name] = subfields
        return self


class FieldReferencingFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FieldReferencingFieldInterface":
        return FieldReferencingFieldInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FieldReferencingFieldsConnectionGraphQLField" = (
        FieldReferencingFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            FieldReferencingFieldsConnectionGraphQLField,
            "FieldReferencingFieldInterface",
            "PageInfoFields",
        ]
    ) -> "FieldReferencingFieldsConnectionFields":
        """Subfields should come from the FieldReferencingFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FieldReferencingFieldsConnectionFields":
        self._alias = alias
        return self


class FieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FieldInterface":
        return FieldInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FieldsConnectionGraphQLField" = FieldsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            FieldsConnectionGraphQLField, "FieldInterface", "PageInfoFields"
        ]
    ) -> "FieldsConnectionFields":
        """Subfields should come from the FieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FieldsConnectionFields":
        self._alias = alias
        return self


class FileFields(GraphQLField):
    certification_note: "FileGraphQLField" = FileGraphQLField("certificationNote")

    @classmethod
    def certifier(cls) -> "TableauUserFields":
        return TableauUserFields("certifier")

    connection_type: "FileGraphQLField" = FileGraphQLField("connectionType")

    @classmethod
    def contact(cls) -> "TableauUserFields":
        return TableauUserFields("contact")

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    description: "FileGraphQLField" = FileGraphQLField("description")

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    file_path: "FileGraphQLField" = FileGraphQLField("filePath")
    has_active_warning: "FileGraphQLField" = FileGraphQLField("hasActiveWarning")
    id: "FileGraphQLField" = FileGraphQLField("id")
    is_certified: "FileGraphQLField" = FileGraphQLField("isCertified")
    is_controlled_permissions_enabled: "FileGraphQLField" = FileGraphQLField(
        "isControlledPermissionsEnabled"
    )
    is_embedded: "FileGraphQLField" = FileGraphQLField("isEmbedded")
    is_grouped: "FileGraphQLField" = FileGraphQLField("isGrouped")

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "FileGraphQLField" = FileGraphQLField("luid")
    name: "FileGraphQLField" = FileGraphQLField("name")
    project_name: "FileGraphQLField" = FileGraphQLField("projectName")
    project_vizportal_url_id: "FileGraphQLField" = FileGraphQLField(
        "projectVizportalUrlId"
    )

    @classmethod
    def referenced_by_queries(
        cls,
        *,
        filter: Optional[CustomSQLTable_Filter] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTableFields(
            "referenced_by_queries", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_queries_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CustomSQLTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTablesConnectionFields(
            "referenced_by_queries_connection", arguments=cleared_arguments
        )

    @classmethod
    def tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("tables", arguments=cleared_arguments)

    @classmethod
    def tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    vizportal_id: "FileGraphQLField" = FileGraphQLField("vizportalId")

    def fields(
        self,
        *subfields: Union[
            FileGraphQLField,
            "CustomSQLTableFields",
            "CustomSQLTablesConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "FileFields":
        """Subfields should come from the FileFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FileFields":
        self._alias = alias
        return self


class FilesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FileFields":
        return FileFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FilesConnectionGraphQLField" = FilesConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[FilesConnectionGraphQLField, "FileFields", "PageInfoFields"]
    ) -> "FilesConnectionFields":
        """Subfields should come from the FilesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FilesConnectionFields":
        self._alias = alias
        return self


class FlowFields(GraphQLField):
    container_name: "FlowGraphQLField" = FlowGraphQLField("containerName")
    container_type: "FlowGraphQLField" = FlowGraphQLField("containerType")
    contains_unsupported_custom_sql: "FlowGraphQLField" = FlowGraphQLField(
        "containsUnsupportedCustomSql"
    )
    created_at: "FlowGraphQLField" = FlowGraphQLField("createdAt")

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    description: "FlowGraphQLField" = FlowGraphQLField("description")

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_linked_flows(
        cls,
        *,
        filter: Optional[LinkedFlow_Filter] = None,
        order_by: Optional[LinkedFlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LinkedFlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LinkedFlow_Filter", "value": filter},
            "orderBy": {"type": "LinkedFlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LinkedFlowFields("downstream_linked_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_linked_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LinkedFlow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LinkedFlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LinkedFlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LinkedFlow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LinkedFlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LinkedFlowsConnectionFields(
            "downstream_linked_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    has_active_warning: "FlowGraphQLField" = FlowGraphQLField("hasActiveWarning")
    id: "FlowGraphQLField" = FlowGraphQLField("id")

    @classmethod
    def input_fields(
        cls,
        *,
        filter: Optional[FlowInputField_Filter] = None,
        order_by: Optional[FlowInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowInputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowInputFieldInterface("input_fields", arguments=cleared_arguments)

    @classmethod
    def input_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowInputFieldsConnectionFields(
            "input_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "FlowGraphQLField" = FlowGraphQLField("luid")
    name: "FlowGraphQLField" = FlowGraphQLField("name")

    @classmethod
    def next_downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("next_downstream_flows", arguments=cleared_arguments)

    @classmethod
    def next_downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "next_downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def next_upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("next_upstream_flows", arguments=cleared_arguments)

    @classmethod
    def next_upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "next_upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def output_fields(
        cls,
        *,
        filter: Optional[FlowOutputField_Filter] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldInterface("output_fields", arguments=cleared_arguments)

    @classmethod
    def output_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldsConnectionFields(
            "output_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def output_steps(
        cls,
        *,
        filter: Optional[FlowOutputStep_Filter] = None,
        order_by: Optional[FlowOutputStepSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputStepFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowOutputStep_Filter", "value": filter},
            "orderBy": {"type": "FlowOutputStepSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputStepFields("output_steps", arguments=cleared_arguments)

    @classmethod
    def output_steps_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowOutputStep_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowOutputStepSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputStepsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowOutputStep_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowOutputStepSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputStepsConnectionFields(
            "output_steps_connection", arguments=cleared_arguments
        )

    @classmethod
    def owner(cls) -> "TableauUserFields":
        return TableauUserFields("owner")

    personal_space_url_link: "FlowGraphQLField" = FlowGraphQLField(
        "personalSpaceUrlLink"
    )
    project_name: "FlowGraphQLField" = FlowGraphQLField("projectName")
    project_vizportal_url_id: "FlowGraphQLField" = FlowGraphQLField(
        "projectVizportalUrlId"
    )

    @classmethod
    def site(cls) -> "TableauSiteFields":
        return TableauSiteFields("site")

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    updated_at: "FlowGraphQLField" = FlowGraphQLField("updatedAt")

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_linked_flows(
        cls,
        *,
        filter: Optional[LinkedFlow_Filter] = None,
        order_by: Optional[LinkedFlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LinkedFlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LinkedFlow_Filter", "value": filter},
            "orderBy": {"type": "LinkedFlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LinkedFlowFields("upstream_linked_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_linked_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LinkedFlow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LinkedFlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LinkedFlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LinkedFlow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LinkedFlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LinkedFlowsConnectionFields(
            "upstream_linked_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    uri: "FlowGraphQLField" = FlowGraphQLField("uri")
    vizportal_url_id: "FlowGraphQLField" = FlowGraphQLField("vizportalUrlId")

    def fields(
        self,
        *subfields: Union[
            FlowGraphQLField,
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowInputFieldInterface",
            "FlowInputFieldsConnectionFields",
            "FlowOutputFieldInterface",
            "FlowOutputFieldsConnectionFields",
            "FlowOutputStepFields",
            "FlowOutputStepsConnectionFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "LinkedFlowFields",
            "LinkedFlowsConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauSiteFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "FlowFields":
        """Subfields should come from the FlowFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowFields":
        self._alias = alias
        return self


class FlowColumnInputFieldFields(GraphQLField):
    @classmethod
    def child_fields(
        cls,
        *,
        filter: Optional[FlowOutputField_Filter] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldInterface("child_fields", arguments=cleared_arguments)

    @classmethod
    def child_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldsConnectionFields(
            "child_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def column(cls) -> "ColumnFields":
        return ColumnFields("column")

    field_id: "FlowColumnInputFieldGraphQLField" = FlowColumnInputFieldGraphQLField(
        "fieldId"
    )

    @classmethod
    def flow(cls) -> "FlowFields":
        return FlowFields("flow")

    id: "FlowColumnInputFieldGraphQLField" = FlowColumnInputFieldGraphQLField("id")
    name: "FlowColumnInputFieldGraphQLField" = FlowColumnInputFieldGraphQLField("name")

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            FlowColumnInputFieldGraphQLField,
            "ColumnFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowOutputFieldInterface",
            "FlowOutputFieldsConnectionFields",
            "FlowsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
        ]
    ) -> "FlowColumnInputFieldFields":
        """Subfields should come from the FlowColumnInputFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowColumnInputFieldFields":
        self._alias = alias
        return self


class FlowColumnInputFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FlowColumnInputFieldFields":
        return FlowColumnInputFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FlowColumnInputFieldsConnectionGraphQLField" = (
        FlowColumnInputFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            FlowColumnInputFieldsConnectionGraphQLField,
            "FlowColumnInputFieldFields",
            "PageInfoFields",
        ]
    ) -> "FlowColumnInputFieldsConnectionFields":
        """Subfields should come from the FlowColumnInputFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowColumnInputFieldsConnectionFields":
        self._alias = alias
        return self


class FlowColumnOutputFieldFields(GraphQLField):
    @classmethod
    def column(cls) -> "ColumnFields":
        return ColumnFields("column")

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    field_id: "FlowColumnOutputFieldGraphQLField" = FlowColumnOutputFieldGraphQLField(
        "fieldId"
    )

    @classmethod
    def flow(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("flow", arguments=cleared_arguments)

    @classmethod
    def flow_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields("flow_connection", arguments=cleared_arguments)

    @classmethod
    def flow_output_step(cls) -> "FlowOutputStepFields":
        return FlowOutputStepFields("flow_output_step")

    id: "FlowColumnOutputFieldGraphQLField" = FlowColumnOutputFieldGraphQLField("id")
    name: "FlowColumnOutputFieldGraphQLField" = FlowColumnOutputFieldGraphQLField(
        "name"
    )

    @classmethod
    def parent_fields(
        cls,
        *,
        filter: Optional[FlowInputField_Filter] = None,
        order_by: Optional[FlowInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowInputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowInputFieldInterface("parent_fields", arguments=cleared_arguments)

    @classmethod
    def parent_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowInputFieldsConnectionFields(
            "parent_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            FlowColumnOutputFieldGraphQLField,
            "ColumnFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowInputFieldInterface",
            "FlowInputFieldsConnectionFields",
            "FlowOutputStepFields",
            "FlowsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "FlowColumnOutputFieldFields":
        """Subfields should come from the FlowColumnOutputFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowColumnOutputFieldFields":
        self._alias = alias
        return self


class FlowColumnOutputFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FlowColumnOutputFieldFields":
        return FlowColumnOutputFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FlowColumnOutputFieldsConnectionGraphQLField" = (
        FlowColumnOutputFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            FlowColumnOutputFieldsConnectionGraphQLField,
            "FlowColumnOutputFieldFields",
            "PageInfoFields",
        ]
    ) -> "FlowColumnOutputFieldsConnectionFields":
        """Subfields should come from the FlowColumnOutputFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowColumnOutputFieldsConnectionFields":
        self._alias = alias
        return self


class FlowFieldInputFieldFields(GraphQLField):
    @classmethod
    def child_fields(
        cls,
        *,
        filter: Optional[FlowOutputField_Filter] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldInterface("child_fields", arguments=cleared_arguments)

    @classmethod
    def child_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldsConnectionFields(
            "child_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def field(cls) -> "FieldInterface":
        return FieldInterface("field")

    field_id: "FlowFieldInputFieldGraphQLField" = FlowFieldInputFieldGraphQLField(
        "fieldId"
    )

    @classmethod
    def flow(cls) -> "FlowFields":
        return FlowFields("flow")

    id: "FlowFieldInputFieldGraphQLField" = FlowFieldInputFieldGraphQLField("id")
    name: "FlowFieldInputFieldGraphQLField" = FlowFieldInputFieldGraphQLField("name")

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            FlowFieldInputFieldGraphQLField,
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FieldInterface",
            "FlowFields",
            "FlowOutputFieldInterface",
            "FlowOutputFieldsConnectionFields",
            "FlowsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
        ]
    ) -> "FlowFieldInputFieldFields":
        """Subfields should come from the FlowFieldInputFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowFieldInputFieldFields":
        self._alias = alias
        return self


class FlowFieldInputFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FlowFieldInputFieldFields":
        return FlowFieldInputFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FlowFieldInputFieldsConnectionGraphQLField" = (
        FlowFieldInputFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            FlowFieldInputFieldsConnectionGraphQLField,
            "FlowFieldInputFieldFields",
            "PageInfoFields",
        ]
    ) -> "FlowFieldInputFieldsConnectionFields":
        """Subfields should come from the FlowFieldInputFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowFieldInputFieldsConnectionFields":
        self._alias = alias
        return self


class FlowFieldOutputFieldFields(GraphQLField):
    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    @classmethod
    def field(cls) -> "FieldInterface":
        return FieldInterface("field")

    field_id: "FlowFieldOutputFieldGraphQLField" = FlowFieldOutputFieldGraphQLField(
        "fieldId"
    )

    @classmethod
    def flow(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("flow", arguments=cleared_arguments)

    @classmethod
    def flow_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields("flow_connection", arguments=cleared_arguments)

    @classmethod
    def flow_output_step(cls) -> "FlowOutputStepFields":
        return FlowOutputStepFields("flow_output_step")

    id: "FlowFieldOutputFieldGraphQLField" = FlowFieldOutputFieldGraphQLField("id")
    name: "FlowFieldOutputFieldGraphQLField" = FlowFieldOutputFieldGraphQLField("name")

    @classmethod
    def parent_fields(
        cls,
        *,
        filter: Optional[FlowInputField_Filter] = None,
        order_by: Optional[FlowInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowInputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowInputFieldInterface("parent_fields", arguments=cleared_arguments)

    @classmethod
    def parent_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowInputFieldsConnectionFields(
            "parent_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            FlowFieldOutputFieldGraphQLField,
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FieldInterface",
            "FlowFields",
            "FlowInputFieldInterface",
            "FlowInputFieldsConnectionFields",
            "FlowOutputStepFields",
            "FlowsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "FlowFieldOutputFieldFields":
        """Subfields should come from the FlowFieldOutputFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowFieldOutputFieldFields":
        self._alias = alias
        return self


class FlowFieldOutputFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FlowFieldOutputFieldFields":
        return FlowFieldOutputFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FlowFieldOutputFieldsConnectionGraphQLField" = (
        FlowFieldOutputFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            FlowFieldOutputFieldsConnectionGraphQLField,
            "FlowFieldOutputFieldFields",
            "PageInfoFields",
        ]
    ) -> "FlowFieldOutputFieldsConnectionFields":
        """Subfields should come from the FlowFieldOutputFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowFieldOutputFieldsConnectionFields":
        self._alias = alias
        return self


class FlowInputFieldInterface(GraphQLField):
    @classmethod
    def child_fields(
        cls,
        *,
        filter: Optional[FlowOutputField_Filter] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldInterface("child_fields", arguments=cleared_arguments)

    @classmethod
    def child_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldsConnectionFields(
            "child_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def flow(cls) -> "FlowFields":
        return FlowFields("flow")

    id: "FlowInputFieldGraphQLField" = FlowInputFieldGraphQLField("id")
    name: "FlowInputFieldGraphQLField" = FlowInputFieldGraphQLField("name")

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            FlowInputFieldGraphQLField,
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowOutputFieldInterface",
            "FlowOutputFieldsConnectionFields",
            "FlowsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
        ]
    ) -> "FlowInputFieldInterface":
        """Subfields should come from the FlowInputFieldInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowInputFieldInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "FlowInputFieldInterface":
        self._inline_fragments[type_name] = subfields
        return self


class FlowInputFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FlowInputFieldInterface":
        return FlowInputFieldInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FlowInputFieldsConnectionGraphQLField" = (
        FlowInputFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            FlowInputFieldsConnectionGraphQLField,
            "FlowInputFieldInterface",
            "PageInfoFields",
        ]
    ) -> "FlowInputFieldsConnectionFields":
        """Subfields should come from the FlowInputFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowInputFieldsConnectionFields":
        self._alias = alias
        return self


class FlowOutputFieldInterface(GraphQLField):
    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    @classmethod
    def flow(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("flow", arguments=cleared_arguments)

    @classmethod
    def flow_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields("flow_connection", arguments=cleared_arguments)

    @classmethod
    def flow_output_step(cls) -> "FlowOutputStepFields":
        return FlowOutputStepFields("flow_output_step")

    id: "FlowOutputFieldGraphQLField" = FlowOutputFieldGraphQLField("id")
    name: "FlowOutputFieldGraphQLField" = FlowOutputFieldGraphQLField("name")

    @classmethod
    def parent_fields(
        cls,
        *,
        filter: Optional[FlowInputField_Filter] = None,
        order_by: Optional[FlowInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowInputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowInputFieldInterface("parent_fields", arguments=cleared_arguments)

    @classmethod
    def parent_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowInputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowInputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowInputFieldsConnectionFields(
            "parent_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            FlowOutputFieldGraphQLField,
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowInputFieldInterface",
            "FlowInputFieldsConnectionFields",
            "FlowOutputStepFields",
            "FlowsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "FlowOutputFieldInterface":
        """Subfields should come from the FlowOutputFieldInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowOutputFieldInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "FlowOutputFieldInterface":
        self._inline_fragments[type_name] = subfields
        return self


class FlowOutputFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FlowOutputFieldInterface":
        return FlowOutputFieldInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FlowOutputFieldsConnectionGraphQLField" = (
        FlowOutputFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            FlowOutputFieldsConnectionGraphQLField,
            "FlowOutputFieldInterface",
            "PageInfoFields",
        ]
    ) -> "FlowOutputFieldsConnectionFields":
        """Subfields should come from the FlowOutputFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowOutputFieldsConnectionFields":
        self._alias = alias
        return self


class FlowOutputStepFields(GraphQLField):
    @classmethod
    def flow(cls) -> "FlowFields":
        return FlowFields("flow")

    id: "FlowOutputStepGraphQLField" = FlowOutputStepGraphQLField("id")
    name: "FlowOutputStepGraphQLField" = FlowOutputStepGraphQLField("name")

    @classmethod
    def output_fields(
        cls,
        *,
        filter: Optional[FlowOutputField_Filter] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldInterface("output_fields", arguments=cleared_arguments)

    @classmethod
    def output_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldsConnectionFields(
            "output_fields_connection", arguments=cleared_arguments
        )

    step_id: "FlowOutputStepGraphQLField" = FlowOutputStepGraphQLField("stepId")

    def fields(
        self,
        *subfields: Union[
            FlowOutputStepGraphQLField,
            "FlowFields",
            "FlowOutputFieldInterface",
            "FlowOutputFieldsConnectionFields",
        ]
    ) -> "FlowOutputStepFields":
        """Subfields should come from the FlowOutputStepFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowOutputStepFields":
        self._alias = alias
        return self


class FlowOutputStepsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FlowOutputStepFields":
        return FlowOutputStepFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FlowOutputStepsConnectionGraphQLField" = (
        FlowOutputStepsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            FlowOutputStepsConnectionGraphQLField,
            "FlowOutputStepFields",
            "PageInfoFields",
        ]
    ) -> "FlowOutputStepsConnectionFields":
        """Subfields should come from the FlowOutputStepsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowOutputStepsConnectionFields":
        self._alias = alias
        return self


class FlowsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "FlowFields":
        return FlowFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "FlowsConnectionGraphQLField" = FlowsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[FlowsConnectionGraphQLField, "FlowFields", "PageInfoFields"]
    ) -> "FlowsConnectionFields":
        """Subfields should come from the FlowsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FlowsConnectionFields":
        self._alias = alias
        return self


class GenericLabelFields(GraphQLField):
    @classmethod
    def asset(cls) -> "CanHaveLabelsInterface":
        return CanHaveLabelsInterface("asset")

    @classmethod
    def author(cls) -> "TableauUserFields":
        return TableauUserFields("author")

    author_display_name: "GenericLabelGraphQLField" = GenericLabelGraphQLField(
        "authorDisplayName"
    )
    category: "GenericLabelGraphQLField" = GenericLabelGraphQLField("category")
    created_at: "GenericLabelGraphQLField" = GenericLabelGraphQLField("createdAt")
    id: "GenericLabelGraphQLField" = GenericLabelGraphQLField("id")
    is_active: "GenericLabelGraphQLField" = GenericLabelGraphQLField("isActive")
    is_elevated: "GenericLabelGraphQLField" = GenericLabelGraphQLField("isElevated")
    luid: "GenericLabelGraphQLField" = GenericLabelGraphQLField("luid")
    message: "GenericLabelGraphQLField" = GenericLabelGraphQLField("message")
    updated_at: "GenericLabelGraphQLField" = GenericLabelGraphQLField("updatedAt")
    value: "GenericLabelGraphQLField" = GenericLabelGraphQLField("value")
    vizportal_id: "GenericLabelGraphQLField" = GenericLabelGraphQLField("vizportalId")

    def fields(
        self,
        *subfields: Union[
            GenericLabelGraphQLField, "CanHaveLabelsInterface", "TableauUserFields"
        ]
    ) -> "GenericLabelFields":
        """Subfields should come from the GenericLabelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GenericLabelFields":
        self._alias = alias
        return self


class GenericLabelsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "GenericLabelFields":
        return GenericLabelFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "GenericLabelsConnectionGraphQLField" = (
        GenericLabelsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            GenericLabelsConnectionGraphQLField, "GenericLabelFields", "PageInfoFields"
        ]
    ) -> "GenericLabelsConnectionFields":
        """Subfields should come from the GenericLabelsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GenericLabelsConnectionFields":
        self._alias = alias
        return self


class GroupFieldFields(GraphQLField):
    data_category: "GroupFieldGraphQLField" = GroupFieldGraphQLField("dataCategory")
    data_type: "GroupFieldGraphQLField" = GroupFieldGraphQLField("dataType")

    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    description: "GroupFieldGraphQLField" = GroupFieldGraphQLField("description")

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    folder_name: "GroupFieldGraphQLField" = GroupFieldGraphQLField("folderName")
    fully_qualified_name: "GroupFieldGraphQLField" = GroupFieldGraphQLField(
        "fullyQualifiedName"
    )
    has_other: "GroupFieldGraphQLField" = GroupFieldGraphQLField("hasOther")
    id: "GroupFieldGraphQLField" = GroupFieldGraphQLField("id")
    is_hidden: "GroupFieldGraphQLField" = GroupFieldGraphQLField("isHidden")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    name: "GroupFieldGraphQLField" = GroupFieldGraphQLField("name")

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    role: "GroupFieldGraphQLField" = GroupFieldGraphQLField("role")

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            GroupFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "InheritedStringResultFields",
            "LensFieldFields",
            "LensFields",
            "LensFieldsConnectionFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "GroupFieldFields":
        """Subfields should come from the GroupFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GroupFieldFields":
        self._alias = alias
        return self


class GroupFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "GroupFieldFields":
        return GroupFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "GroupFieldsConnectionGraphQLField" = (
        GroupFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            GroupFieldsConnectionGraphQLField, "GroupFieldFields", "PageInfoFields"
        ]
    ) -> "GroupFieldsConnectionFields":
        """Subfields should come from the GroupFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GroupFieldsConnectionFields":
        self._alias = alias
        return self


class HierarchyFieldFields(GraphQLField):
    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    description: "HierarchyFieldGraphQLField" = HierarchyFieldGraphQLField(
        "description"
    )

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    folder_name: "HierarchyFieldGraphQLField" = HierarchyFieldGraphQLField("folderName")
    fully_qualified_name: "HierarchyFieldGraphQLField" = HierarchyFieldGraphQLField(
        "fullyQualifiedName"
    )
    id: "HierarchyFieldGraphQLField" = HierarchyFieldGraphQLField("id")
    is_hidden: "HierarchyFieldGraphQLField" = HierarchyFieldGraphQLField("isHidden")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    name: "HierarchyFieldGraphQLField" = HierarchyFieldGraphQLField("name")

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            HierarchyFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "InheritedStringResultFields",
            "LensFieldFields",
            "LensFields",
            "LensFieldsConnectionFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "HierarchyFieldFields":
        """Subfields should come from the HierarchyFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HierarchyFieldFields":
        self._alias = alias
        return self


class HierarchyFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "HierarchyFieldFields":
        return HierarchyFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "HierarchyFieldsConnectionGraphQLField" = (
        HierarchyFieldsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            HierarchyFieldsConnectionGraphQLField,
            "HierarchyFieldFields",
            "PageInfoFields",
        ]
    ) -> "HierarchyFieldsConnectionFields":
        """Subfields should come from the HierarchyFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HierarchyFieldsConnectionFields":
        self._alias = alias
        return self


class InheritedStringResultFields(GraphQLField):
    @classmethod
    def asset(cls) -> "NodeInterface":
        return NodeInterface("asset")

    asset_id: "InheritedStringResultGraphQLField" = InheritedStringResultGraphQLField(
        "assetId"
    )
    attribute: "InheritedStringResultGraphQLField" = InheritedStringResultGraphQLField(
        "attribute"
    )
    distance: "InheritedStringResultGraphQLField" = InheritedStringResultGraphQLField(
        "distance"
    )
    edges: "InheritedStringResultGraphQLField" = InheritedStringResultGraphQLField(
        "edges"
    )
    value: "InheritedStringResultGraphQLField" = InheritedStringResultGraphQLField(
        "value"
    )

    def fields(
        self, *subfields: Union[InheritedStringResultGraphQLField, "NodeInterface"]
    ) -> "InheritedStringResultFields":
        """Subfields should come from the InheritedStringResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "InheritedStringResultFields":
        self._alias = alias
        return self


class LabelInterface(GraphQLField):
    @classmethod
    def asset(cls) -> "CanHaveLabelsInterface":
        return CanHaveLabelsInterface("asset")

    @classmethod
    def author(cls) -> "TableauUserFields":
        return TableauUserFields("author")

    author_display_name: "LabelGraphQLField" = LabelGraphQLField("authorDisplayName")
    category: "LabelGraphQLField" = LabelGraphQLField("category")
    created_at: "LabelGraphQLField" = LabelGraphQLField("createdAt")
    id: "LabelGraphQLField" = LabelGraphQLField("id")
    is_active: "LabelGraphQLField" = LabelGraphQLField("isActive")
    is_elevated: "LabelGraphQLField" = LabelGraphQLField("isElevated")
    luid: "LabelGraphQLField" = LabelGraphQLField("luid")
    message: "LabelGraphQLField" = LabelGraphQLField("message")
    updated_at: "LabelGraphQLField" = LabelGraphQLField("updatedAt")
    value: "LabelGraphQLField" = LabelGraphQLField("value")
    vizportal_id: "LabelGraphQLField" = LabelGraphQLField("vizportalId")

    def fields(
        self,
        *subfields: Union[
            LabelGraphQLField, "CanHaveLabelsInterface", "TableauUserFields"
        ]
    ) -> "LabelInterface":
        """Subfields should come from the LabelInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "LabelInterface":
        self._inline_fragments[type_name] = subfields
        return self


class LabelsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "LabelInterface":
        return LabelInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "LabelsConnectionGraphQLField" = LabelsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            LabelsConnectionGraphQLField, "LabelInterface", "PageInfoFields"
        ]
    ) -> "LabelsConnectionFields":
        """Subfields should come from the LabelsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelsConnectionFields":
        self._alias = alias
        return self


class LensFields(GraphQLField):
    @classmethod
    def ask_data_extensions(
        cls,
        *,
        filter: Optional[AskDataExtension_Filter] = None,
        order_by: Optional[AskDataExtensionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "AskDataExtensionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "AskDataExtension_Filter", "value": filter},
            "orderBy": {"type": "AskDataExtensionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AskDataExtensionFields(
            "ask_data_extensions", arguments=cleared_arguments
        )

    @classmethod
    def ask_data_extensions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[AskDataExtension_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[AskDataExtensionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "AskDataExtensionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "AskDataExtension_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "AskDataExtensionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AskDataExtensionsConnectionFields(
            "ask_data_extensions_connection", arguments=cleared_arguments
        )

    created_at: "LensGraphQLField" = LensGraphQLField("createdAt")

    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    description: "LensGraphQLField" = LensGraphQLField("description")

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "fields_connection", arguments=cleared_arguments
        )

    id: "LensGraphQLField" = LensGraphQLField("id")
    luid: "LensGraphQLField" = LensGraphQLField("luid")
    name: "LensGraphQLField" = LensGraphQLField("name")

    @classmethod
    def owner(cls) -> "TableauUserFields":
        return TableauUserFields("owner")

    project_vizportal_url_id: "LensGraphQLField" = LensGraphQLField(
        "projectVizportalUrlId"
    )

    @classmethod
    def site(cls) -> "TableauSiteFields":
        return TableauSiteFields("site")

    updated_at: "LensGraphQLField" = LensGraphQLField("updatedAt")

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[Table_Filter] = None,
        order_by: Optional[TableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "TableInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Table_Filter", "value": filter},
            "orderBy": {"type": "TableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableInterface("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Table_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "TablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Table_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    vizportal_url_id: "LensGraphQLField" = LensGraphQLField("vizportalUrlId")

    def fields(
        self,
        *subfields: Union[
            LensGraphQLField,
            "AskDataExtensionFields",
            "AskDataExtensionsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabasesConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LensFieldFields",
            "LensFieldsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "TableInterface",
            "TableauSiteFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TablesConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "LensFields":
        """Subfields should come from the LensFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LensFields":
        self._alias = alias
        return self


class LensFieldFields(GraphQLField):
    @classmethod
    def containing_lens(cls) -> "LensFields":
        return LensFields("containing_lens")

    @classmethod
    def datasource_field(cls) -> "FieldInterface":
        return FieldInterface("datasource_field")

    description: "LensFieldGraphQLField" = LensFieldGraphQLField("description")
    id: "LensFieldGraphQLField" = LensFieldGraphQLField("id")
    name: "LensFieldGraphQLField" = LensFieldGraphQLField("name")

    def fields(
        self, *subfields: Union[LensFieldGraphQLField, "FieldInterface", "LensFields"]
    ) -> "LensFieldFields":
        """Subfields should come from the LensFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LensFieldFields":
        self._alias = alias
        return self


class LensFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "LensFieldFields":
        return LensFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "LensFieldsConnectionGraphQLField" = LensFieldsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            LensFieldsConnectionGraphQLField, "LensFieldFields", "PageInfoFields"
        ]
    ) -> "LensFieldsConnectionFields":
        """Subfields should come from the LensFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LensFieldsConnectionFields":
        self._alias = alias
        return self


class LensesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "LensFields":
        return LensFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "LensesConnectionGraphQLField" = LensesConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[LensesConnectionGraphQLField, "LensFields", "PageInfoFields"]
    ) -> "LensesConnectionFields":
        """Subfields should come from the LensesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LensesConnectionFields":
        self._alias = alias
        return self


class LinkedFlowFields(GraphQLField):
    @classmethod
    def asset(cls) -> "FlowFields":
        return FlowFields("asset")

    asset_id: "LinkedFlowGraphQLField" = LinkedFlowGraphQLField("assetId")
    from_edges: "LinkedFlowGraphQLField" = LinkedFlowGraphQLField("fromEdges")
    to_edges: "LinkedFlowGraphQLField" = LinkedFlowGraphQLField("toEdges")

    def fields(
        self, *subfields: Union[LinkedFlowGraphQLField, "FlowFields"]
    ) -> "LinkedFlowFields":
        """Subfields should come from the LinkedFlowFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinkedFlowFields":
        self._alias = alias
        return self


class LinkedFlowsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "LinkedFlowFields":
        return LinkedFlowFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "LinkedFlowsConnectionGraphQLField" = (
        LinkedFlowsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            LinkedFlowsConnectionGraphQLField, "LinkedFlowFields", "PageInfoFields"
        ]
    ) -> "LinkedFlowsConnectionFields":
        """Subfields should come from the LinkedFlowsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinkedFlowsConnectionFields":
        self._alias = alias
        return self


class MetricFields(GraphQLField):
    container_name: "MetricGraphQLField" = MetricGraphQLField("containerName")
    container_type: "MetricGraphQLField" = MetricGraphQLField("containerType")
    created_at: "MetricGraphQLField" = MetricGraphQLField("createdAt")
    description: "MetricGraphQLField" = MetricGraphQLField("description")
    id: "MetricGraphQLField" = MetricGraphQLField("id")
    luid: "MetricGraphQLField" = MetricGraphQLField("luid")
    name: "MetricGraphQLField" = MetricGraphQLField("name")

    @classmethod
    def owner(cls) -> "TableauUserFields":
        return TableauUserFields("owner")

    project_name: "MetricGraphQLField" = MetricGraphQLField("projectName")
    project_vizportal_url_id: "MetricGraphQLField" = MetricGraphQLField(
        "projectVizportalUrlId"
    )

    @classmethod
    def site(cls) -> "TableauSiteFields":
        return TableauSiteFields("site")

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    @classmethod
    def underlying_view(cls) -> "ViewInterface":
        return ViewInterface("underlying_view")

    updated_at: "MetricGraphQLField" = MetricGraphQLField("updatedAt")

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flow_column_output_fields(
        cls,
        *,
        filter: Optional[FlowColumnOutputField_Filter] = None,
        order_by: Optional[FlowColumnOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowColumnOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowColumnOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowColumnOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowColumnOutputFieldFields(
            "upstream_flow_column_output_fields", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flow_column_output_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowColumnOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowColumnOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowColumnOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowColumnOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowColumnOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowColumnOutputFieldsConnectionFields(
            "upstream_flow_column_output_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flow_field_output_fields(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "upstream_flow_field_output_fields", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flow_field_output_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "upstream_flow_field_output_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flow_output_fields(
        cls,
        *,
        filter: Optional[FlowOutputField_Filter] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldInterface(
            "upstream_flow_output_fields", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flow_output_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldsConnectionFields(
            "upstream_flow_output_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("upstream_lenses", arguments=cleared_arguments)

    @classmethod
    def upstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "upstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("upstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def upstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "upstream_workbooks_connection", arguments=cleared_arguments
        )

    vizportal_url_id: "MetricGraphQLField" = MetricGraphQLField("vizportalUrlId")

    def fields(
        self,
        *subfields: Union[
            MetricGraphQLField,
            "ColumnFields",
            "ColumnsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FieldInterface",
            "FieldsConnectionFields",
            "FlowColumnOutputFieldFields",
            "FlowColumnOutputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowOutputFieldInterface",
            "FlowOutputFieldsConnectionFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "TableauSiteFields",
            "TableauUserFields",
            "TagFields",
            "TagsConnectionFields",
            "ViewInterface",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "MetricFields":
        """Subfields should come from the MetricFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MetricFields":
        self._alias = alias
        return self


class MetricDefinitionFields(GraphQLField):
    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    id: "MetricDefinitionGraphQLField" = MetricDefinitionGraphQLField("id")
    luid: "MetricDefinitionGraphQLField" = MetricDefinitionGraphQLField("luid")
    name: "MetricDefinitionGraphQLField" = MetricDefinitionGraphQLField("name")

    @classmethod
    def site(cls) -> "TableauSiteFields":
        return TableauSiteFields("site")

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flow_output_fields(
        cls,
        *,
        filter: Optional[FlowOutputField_Filter] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldInterface(
            "upstream_flow_output_fields", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flow_output_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowOutputFieldsConnectionFields(
            "upstream_flow_output_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            MetricDefinitionGraphQLField,
            "ColumnFields",
            "ColumnsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FieldInterface",
            "FieldsConnectionFields",
            "FlowFields",
            "FlowOutputFieldInterface",
            "FlowOutputFieldsConnectionFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "TableauSiteFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
        ]
    ) -> "MetricDefinitionFields":
        """Subfields should come from the MetricDefinitionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MetricDefinitionFields":
        self._alias = alias
        return self


class MetricDefinitionsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "MetricDefinitionFields":
        return MetricDefinitionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "MetricDefinitionsConnectionGraphQLField" = (
        MetricDefinitionsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            MetricDefinitionsConnectionGraphQLField,
            "MetricDefinitionFields",
            "PageInfoFields",
        ]
    ) -> "MetricDefinitionsConnectionFields":
        """Subfields should come from the MetricDefinitionsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MetricDefinitionsConnectionFields":
        self._alias = alias
        return self


class MetricsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "MetricFields":
        return MetricFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "MetricsConnectionGraphQLField" = MetricsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            MetricsConnectionGraphQLField, "MetricFields", "PageInfoFields"
        ]
    ) -> "MetricsConnectionFields":
        """Subfields should come from the MetricsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MetricsConnectionFields":
        self._alias = alias
        return self


class NodeInterface(GraphQLField):
    id: "NodeGraphQLField" = NodeGraphQLField("id")

    def fields(self, *subfields: NodeGraphQLField) -> "NodeInterface":
        """Subfields should come from the NodeInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "NodeInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "NodeInterface":
        self._inline_fragments[type_name] = subfields
        return self


class PageInfoFields(GraphQLField):
    end_cursor: "PageInfoGraphQLField" = PageInfoGraphQLField("endCursor")
    has_next_page: "PageInfoGraphQLField" = PageInfoGraphQLField("hasNextPage")

    def fields(self, *subfields: PageInfoGraphQLField) -> "PageInfoFields":
        """Subfields should come from the PageInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PageInfoFields":
        self._alias = alias
        return self


class ParameterFields(GraphQLField):
    @classmethod
    def datasource(cls) -> "PublishedDatasourceFields":
        return PublishedDatasourceFields("datasource")

    id: "ParameterGraphQLField" = ParameterGraphQLField("id")
    name: "ParameterGraphQLField" = ParameterGraphQLField("name")
    parent_name: "ParameterGraphQLField" = ParameterGraphQLField("parentName")

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def workbook(cls) -> "WorkbookFields":
        return WorkbookFields("workbook")

    def fields(
        self,
        *subfields: Union[
            ParameterGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "PublishedDatasourceFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "WorkbookFields",
        ]
    ) -> "ParameterFields":
        """Subfields should come from the ParameterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ParameterFields":
        self._alias = alias
        return self


class ParametersConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "ParameterFields":
        return ParameterFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ParametersConnectionGraphQLField" = ParametersConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            ParametersConnectionGraphQLField, "PageInfoFields", "ParameterFields"
        ]
    ) -> "ParametersConnectionFields":
        """Subfields should come from the ParametersConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ParametersConnectionFields":
        self._alias = alias
        return self


class PublishedDatasourceFields(GraphQLField):
    certification_note: "PublishedDatasourceGraphQLField" = (
        PublishedDatasourceGraphQLField("certificationNote")
    )

    @classmethod
    def certifier(cls) -> "TableauUserFields":
        return TableauUserFields("certifier")

    certifier_display_name: "PublishedDatasourceGraphQLField" = (
        PublishedDatasourceGraphQLField("certifierDisplayName")
    )
    container_name: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField(
        "containerName"
    )
    container_type: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField(
        "containerType"
    )
    contains_unsupported_custom_sql: "PublishedDatasourceGraphQLField" = (
        PublishedDatasourceGraphQLField("containsUnsupportedCustomSql")
    )
    created_at: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField(
        "createdAt"
    )

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def datasource_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields("datasource_filters", arguments=cleared_arguments)

    @classmethod
    def datasource_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "datasource_filters_connection", arguments=cleared_arguments
        )

    description: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField(
        "description"
    )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    extract_last_incremental_update_time: "PublishedDatasourceGraphQLField" = (
        PublishedDatasourceGraphQLField("extractLastIncrementalUpdateTime")
    )
    extract_last_refresh_time: "PublishedDatasourceGraphQLField" = (
        PublishedDatasourceGraphQLField("extractLastRefreshTime")
    )
    extract_last_update_time: "PublishedDatasourceGraphQLField" = (
        PublishedDatasourceGraphQLField("extractLastUpdateTime")
    )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    has_active_warning: "PublishedDatasourceGraphQLField" = (
        PublishedDatasourceGraphQLField("hasActiveWarning")
    )
    has_extracts: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField(
        "hasExtracts"
    )
    has_user_reference: "PublishedDatasourceGraphQLField" = (
        PublishedDatasourceGraphQLField("hasUserReference")
    )
    id: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField("id")
    is_certified: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField(
        "isCertified"
    )

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    @classmethod
    def lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("lenses", arguments=cleared_arguments)

    @classmethod
    def lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields("lenses_connection", arguments=cleared_arguments)

    luid: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField("luid")
    name: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField("name")

    @classmethod
    def owner(cls) -> "TableauUserFields":
        return TableauUserFields("owner")

    @classmethod
    def parameters(
        cls,
        *,
        filter: Optional[Parameter_Filter] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ParameterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Parameter_Filter", "value": filter},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParameterFields("parameters", arguments=cleared_arguments)

    @classmethod
    def parameters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Parameter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ParametersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Parameter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParametersConnectionFields(
            "parameters_connection", arguments=cleared_arguments
        )

    project_name: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField(
        "projectName"
    )
    project_vizportal_url_id: "PublishedDatasourceGraphQLField" = (
        PublishedDatasourceGraphQLField("projectVizportalUrlId")
    )

    @classmethod
    def site(cls) -> "TableauSiteFields":
        return TableauSiteFields("site")

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    updated_at: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField(
        "updatedAt"
    )

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    uri: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField("uri")
    vizportal_id: "PublishedDatasourceGraphQLField" = PublishedDatasourceGraphQLField(
        "vizportalId"
    )
    vizportal_url_id: "PublishedDatasourceGraphQLField" = (
        PublishedDatasourceGraphQLField("vizportalUrlId")
    )

    def fields(
        self,
        *subfields: Union[
            PublishedDatasourceGraphQLField,
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "FieldInterface",
            "FieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "ParameterFields",
            "ParametersConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauSiteFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "PublishedDatasourceFields":
        """Subfields should come from the PublishedDatasourceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PublishedDatasourceFields":
        self._alias = alias
        return self


class PublishedDatasourcesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "PublishedDatasourceFields":
        return PublishedDatasourceFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "PublishedDatasourcesConnectionGraphQLField" = (
        PublishedDatasourcesConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            PublishedDatasourcesConnectionGraphQLField,
            "PageInfoFields",
            "PublishedDatasourceFields",
        ]
    ) -> "PublishedDatasourcesConnectionFields":
        """Subfields should come from the PublishedDatasourcesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PublishedDatasourcesConnectionFields":
        self._alias = alias
        return self


class SetFieldFields(GraphQLField):
    @classmethod
    def datasource(cls) -> "DatasourceInterface":
        return DatasourceInterface("datasource")

    @classmethod
    def derived_lens_fields(
        cls,
        *,
        filter: Optional[LensField_Filter] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "LensField_Filter", "value": filter},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldFields("derived_lens_fields", arguments=cleared_arguments)

    @classmethod
    def derived_lens_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[LensField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "LensField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFieldsConnectionFields(
            "derived_lens_fields_connection", arguments=cleared_arguments
        )

    description: "SetFieldGraphQLField" = SetFieldGraphQLField("description")

    @classmethod
    def description_inherited(
        cls,
        *,
        inheritance_type: Optional[InheritanceType] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "InheritedStringResultFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "inheritanceType": {"type": "InheritanceType", "value": inheritance_type},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InheritedStringResultFields(
            "description_inherited", arguments=cleared_arguments
        )

    @classmethod
    def direct_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("direct_sheets", arguments=cleared_arguments)

    @classmethod
    def direct_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "direct_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("downstream_columns", arguments=cleared_arguments)

    @classmethod
    def downstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "downstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("downstream_fields", arguments=cleared_arguments)

    @classmethod
    def downstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "downstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    @classmethod
    def fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("fields", arguments=cleared_arguments)

    @classmethod
    def fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields("fields_connection", arguments=cleared_arguments)

    folder_name: "SetFieldGraphQLField" = SetFieldGraphQLField("folderName")
    fully_qualified_name: "SetFieldGraphQLField" = SetFieldGraphQLField(
        "fullyQualifiedName"
    )
    id: "SetFieldGraphQLField" = SetFieldGraphQLField("id")
    is_hidden: "SetFieldGraphQLField" = SetFieldGraphQLField("isHidden")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    name: "SetFieldGraphQLField" = SetFieldGraphQLField("name")

    @classmethod
    def parameters(
        cls,
        *,
        filter: Optional[Parameter_Filter] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ParameterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Parameter_Filter", "value": filter},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParameterFields("parameters", arguments=cleared_arguments)

    @classmethod
    def parameters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Parameter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ParametersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Parameter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParametersConnectionFields(
            "parameters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_bins(
        cls,
        *,
        filter: Optional[BinField_Filter] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "BinField_Filter", "value": filter},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldFields("referenced_by_bins", arguments=cleared_arguments)

    @classmethod
    def referenced_by_bins_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[BinField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[BinFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "BinFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "BinField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "BinFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BinFieldsConnectionFields(
            "referenced_by_bins_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields(
            "referenced_by_calculations", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_calculations_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "referenced_by_calculations_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields(
        cls,
        *,
        filter: Optional[CombinedField_Filter] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldFields(
            "referenced_by_combined_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedFieldsConnectionFields(
            "referenced_by_combined_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets(
        cls,
        *,
        filter: Optional[CombinedSetField_Filter] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldFields(
            "referenced_by_combined_sets", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_combined_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CombinedSetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CombinedSetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CombinedSetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CombinedSetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CombinedSetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CombinedSetFieldsConnectionFields(
            "referenced_by_combined_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields(
        cls,
        *,
        filter: Optional[FieldReferencingField_Filter] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldInterface(
            "referenced_by_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FieldReferencingField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldReferencingFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldReferencingFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FieldReferencingField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldReferencingFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldReferencingFieldsConnectionFields(
            "referenced_by_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters(
        cls,
        *,
        filter: Optional[DatasourceFilter_Filter] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFilterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFilterFields(
            "referenced_by_filters", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_filters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceFilter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFilterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFiltersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceFilter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFilterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFiltersConnectionFields(
            "referenced_by_filters_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field(
        cls,
        *,
        filter: Optional[FlowFieldInputField_Filter] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldFields(
            "referenced_by_flow_field_input_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_input_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldInputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldInputFieldSortOrder] = None
    ) -> "FlowFieldInputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldInputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldInputFieldSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldInputFieldsConnectionFields(
            "referenced_by_flow_field_input_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_flow_field_output_field(
        cls,
        *,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldFields(
            "referenced_by_flow_field_output_field", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_flow_field_output_field_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[FlowFieldOutputField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowFieldOutputFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFieldOutputFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "FlowFieldOutputField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowFieldOutputFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFieldOutputFieldsConnectionFields(
            "referenced_by_flow_field_output_field_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def referenced_by_groups(
        cls,
        *,
        filter: Optional[GroupField_Filter] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "GroupField_Filter", "value": filter},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldFields("referenced_by_groups", arguments=cleared_arguments)

    @classmethod
    def referenced_by_groups_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[GroupField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[GroupFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "GroupFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "GroupField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "GroupFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFieldsConnectionFields(
            "referenced_by_groups_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies(
        cls,
        *,
        filter: Optional[HierarchyField_Filter] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldFields(
            "referenced_by_hierarchies", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_hierarchies_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[HierarchyField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[HierarchyFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "HierarchyFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "HierarchyField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "HierarchyFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return HierarchyFieldsConnectionFields(
            "referenced_by_hierarchies_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields(
        cls,
        *,
        filter: Optional[DatasourceField_Filter] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldFields(
            "referenced_by_remote_fields", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_remote_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatasourceField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatasourceField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceFieldsConnectionFields(
            "referenced_by_remote_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_sets(
        cls,
        *,
        filter: Optional[SetField_Filter] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "SetField_Filter", "value": filter},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldFields("referenced_by_sets", arguments=cleared_arguments)

    @classmethod
    def referenced_by_sets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[SetField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SetFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SetFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "SetField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SetFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetFieldsConnectionFields(
            "referenced_by_sets_connection", arguments=cleared_arguments
        )

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            SetFieldGraphQLField,
            "BinFieldFields",
            "BinFieldsConnectionFields",
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "CombinedFieldFields",
            "CombinedFieldsConnectionFields",
            "CombinedSetFieldFields",
            "CombinedSetFieldsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "DatasourceFieldFields",
            "DatasourceFieldsConnectionFields",
            "DatasourceFilterFields",
            "DatasourceFiltersConnectionFields",
            "DatasourceInterface",
            "FieldInterface",
            "FieldReferencingFieldInterface",
            "FieldReferencingFieldsConnectionFields",
            "FieldsConnectionFields",
            "FlowFieldInputFieldFields",
            "FlowFieldInputFieldsConnectionFields",
            "FlowFieldOutputFieldFields",
            "FlowFieldOutputFieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "GroupFieldFields",
            "GroupFieldsConnectionFields",
            "HierarchyFieldFields",
            "HierarchyFieldsConnectionFields",
            "InheritedStringResultFields",
            "LensFieldFields",
            "LensFields",
            "LensFieldsConnectionFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "ParameterFields",
            "ParametersConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SetFieldFields",
            "SetFieldsConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "SetFieldFields":
        """Subfields should come from the SetFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetFieldFields":
        self._alias = alias
        return self


class SetFieldsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "SetFieldFields":
        return SetFieldFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SetFieldsConnectionGraphQLField" = SetFieldsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            SetFieldsConnectionGraphQLField, "PageInfoFields", "SetFieldFields"
        ]
    ) -> "SetFieldsConnectionFields":
        """Subfields should come from the SetFieldsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetFieldsConnectionFields":
        self._alias = alias
        return self


class SheetFields(GraphQLField):
    @classmethod
    def contained_in_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("contained_in_dashboards", arguments=cleared_arguments)

    @classmethod
    def contained_in_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "contained_in_dashboards_connection", arguments=cleared_arguments
        )

    created_at: "SheetGraphQLField" = SheetGraphQLField("createdAt")

    @classmethod
    def datasource_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("datasource_fields", arguments=cleared_arguments)

    @classmethod
    def datasource_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "datasource_fields_connection", arguments=cleared_arguments
        )

    document_view_id: "SheetGraphQLField" = SheetGraphQLField("documentViewId")
    id: "SheetGraphQLField" = SheetGraphQLField("id")
    index: "SheetGraphQLField" = SheetGraphQLField("index")
    luid: "SheetGraphQLField" = SheetGraphQLField("luid")
    name: "SheetGraphQLField" = SheetGraphQLField("name")

    @classmethod
    def parent_embedded_datasources(
        cls,
        *,
        filter: Optional[EmbeddedDatasource_Filter] = None,
        order_by: Optional[EmbeddedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "EmbeddedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "EmbeddedDatasource_Filter", "value": filter},
            "orderBy": {"type": "EmbeddedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EmbeddedDatasourceFields(
            "parent_embedded_datasources", arguments=cleared_arguments
        )

    @classmethod
    def parent_embedded_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[EmbeddedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[EmbeddedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "EmbeddedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "EmbeddedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "EmbeddedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EmbeddedDatasourcesConnectionFields(
            "parent_embedded_datasources_connection", arguments=cleared_arguments
        )

    path: "SheetGraphQLField" = SheetGraphQLField("path")

    @classmethod
    def referenced_by_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("referenced_by_metrics", arguments=cleared_arguments)

    @classmethod
    def referenced_by_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "referenced_by_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def sheet_field_instances(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("sheet_field_instances", arguments=cleared_arguments)

    @classmethod
    def sheet_field_instances_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "sheet_field_instances_connection", arguments=cleared_arguments
        )

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    updated_at: "SheetGraphQLField" = SheetGraphQLField("updatedAt")

    @classmethod
    def upstream_columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("upstream_columns", arguments=cleared_arguments)

    @classmethod
    def upstream_columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "upstream_columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[Datasource_Filter] = None,
        order_by: Optional[DatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourceInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Datasource_Filter", "value": filter},
            "orderBy": {"type": "DatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourceInterface("upstream_datasources", arguments=cleared_arguments)

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Datasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Datasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_fields(
        cls,
        *,
        filter: Optional[Field_Filter] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Field_Filter", "value": filter},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldInterface("upstream_fields", arguments=cleared_arguments)

    @classmethod
    def upstream_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Field_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Field_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FieldsConnectionFields(
            "upstream_fields_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[Table_Filter] = None,
        order_by: Optional[TableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "TableInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Table_Filter", "value": filter},
            "orderBy": {"type": "TableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableInterface("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Table_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "TablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Table_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def workbook(cls) -> "WorkbookFields":
        return WorkbookFields("workbook")

    @classmethod
    def worksheet_fields(
        cls,
        *,
        filter: Optional[CalculatedField_Filter] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldFields("worksheet_fields", arguments=cleared_arguments)

    @classmethod
    def worksheet_fields_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CalculatedField_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CalculatedFieldSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CalculatedFieldsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CalculatedField_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CalculatedFieldSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculatedFieldsConnectionFields(
            "worksheet_fields_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            SheetGraphQLField,
            "CalculatedFieldFields",
            "CalculatedFieldsConnectionFields",
            "ColumnFields",
            "ColumnsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabasesConnectionFields",
            "DatasourceInterface",
            "DatasourcesConnectionFields",
            "EmbeddedDatasourceFields",
            "EmbeddedDatasourcesConnectionFields",
            "FieldInterface",
            "FieldsConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "TableInterface",
            "TablesConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "WorkbookFields",
        ]
    ) -> "SheetFields":
        """Subfields should come from the SheetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SheetFields":
        self._alias = alias
        return self


class SheetsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "SheetFields":
        return SheetFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "SheetsConnectionGraphQLField" = SheetsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[SheetsConnectionGraphQLField, "PageInfoFields", "SheetFields"]
    ) -> "SheetsConnectionFields":
        """Subfields should come from the SheetsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SheetsConnectionFields":
        self._alias = alias
        return self


class TableInterface(GraphQLField):
    @classmethod
    def columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("columns", arguments=cleared_arguments)

    @classmethod
    def columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "columns_connection", arguments=cleared_arguments
        )

    description: "TableGraphQLField" = TableGraphQLField("description")

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    id: "TableGraphQLField" = TableGraphQLField("id")
    is_embedded: "TableGraphQLField" = TableGraphQLField("isEmbedded")
    name: "TableGraphQLField" = TableGraphQLField("name")

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            TableGraphQLField,
            "ColumnFields",
            "ColumnsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "TableInterface":
        """Subfields should come from the TableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "TableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class TableAdditionalDetailsFields(GraphQLField):
    category: "TableAdditionalDetailsGraphQLField" = TableAdditionalDetailsGraphQLField(
        "category"
    )
    cdp_internal_id: "TableAdditionalDetailsGraphQLField" = (
        TableAdditionalDetailsGraphQLField("cdpInternalId")
    )
    created_by: "TableAdditionalDetailsGraphQLField" = (
        TableAdditionalDetailsGraphQLField("createdBy")
    )
    data_cloud_api_name: "TableAdditionalDetailsGraphQLField" = (
        TableAdditionalDetailsGraphQLField("dataCloudApiName")
    )
    id: "TableAdditionalDetailsGraphQLField" = TableAdditionalDetailsGraphQLField("id")

    @classmethod
    def table(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("table", arguments=cleared_arguments)

    @classmethod
    def table_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "table_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            TableAdditionalDetailsGraphQLField,
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
        ]
    ) -> "TableAdditionalDetailsFields":
        """Subfields should come from the TableAdditionalDetailsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TableAdditionalDetailsFields":
        self._alias = alias
        return self


class TableAdditionalDetailsesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "TableAdditionalDetailsFields":
        return TableAdditionalDetailsFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TableAdditionalDetailsesConnectionGraphQLField" = (
        TableAdditionalDetailsesConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            TableAdditionalDetailsesConnectionGraphQLField,
            "PageInfoFields",
            "TableAdditionalDetailsFields",
        ]
    ) -> "TableAdditionalDetailsesConnectionFields":
        """Subfields should come from the TableAdditionalDetailsesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TableAdditionalDetailsesConnectionFields":
        self._alias = alias
        return self


class TableauSiteFields(GraphQLField):
    created_at: "TableauSiteGraphQLField" = TableauSiteGraphQLField("createdAt")

    @classmethod
    def flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("flows", arguments=cleared_arguments)

    @classmethod
    def flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields("flows_connection", arguments=cleared_arguments)

    id: "TableauSiteGraphQLField" = TableauSiteGraphQLField("id")

    @classmethod
    def lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("lenses", arguments=cleared_arguments)

    @classmethod
    def lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields("lenses_connection", arguments=cleared_arguments)

    luid: "TableauSiteGraphQLField" = TableauSiteGraphQLField("luid")

    @classmethod
    def metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields("metric_definitions", arguments=cleared_arguments)

    @classmethod
    def metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("metrics", arguments=cleared_arguments)

    @classmethod
    def metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "metrics_connection", arguments=cleared_arguments
        )

    name: "TableauSiteGraphQLField" = TableauSiteGraphQLField("name")

    @classmethod
    def published_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "published_datasources", arguments=cleared_arguments
        )

    @classmethod
    def published_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "published_datasources_connection", arguments=cleared_arguments
        )

    uri: "TableauSiteGraphQLField" = TableauSiteGraphQLField("uri")

    @classmethod
    def virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("workbooks", arguments=cleared_arguments)

    @classmethod
    def workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "workbooks_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            TableauSiteGraphQLField,
            "FlowFields",
            "FlowsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "TableauSiteFields":
        """Subfields should come from the TableauSiteFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TableauSiteFields":
        self._alias = alias
        return self


class TableauSitesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "TableauSiteFields":
        return TableauSiteFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TableauSitesConnectionGraphQLField" = (
        TableauSitesConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            TableauSitesConnectionGraphQLField, "PageInfoFields", "TableauSiteFields"
        ]
    ) -> "TableauSitesConnectionFields":
        """Subfields should come from the TableauSitesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TableauSitesConnectionFields":
        self._alias = alias
        return self


class TableauUserFields(GraphQLField):
    @classmethod
    def authored_data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "authored_data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def authored_data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "authored_data_quality_certifications_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def authored_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "authored_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def authored_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "authored_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def authored_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("authored_labels", arguments=cleared_arguments)

    @classmethod
    def authored_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "authored_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def certified_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("certified_databases", arguments=cleared_arguments)

    @classmethod
    def certified_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "certified_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def certified_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "certified_datasources", arguments=cleared_arguments
        )

    @classmethod
    def certified_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "certified_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def certified_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("certified_tables", arguments=cleared_arguments)

    @classmethod
    def certified_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "certified_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def contact_for_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("contact_for_databases", arguments=cleared_arguments)

    @classmethod
    def contact_for_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "contact_for_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def contact_for_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("contact_for_tables", arguments=cleared_arguments)

    @classmethod
    def contact_for_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "contact_for_tables_connection", arguments=cleared_arguments
        )

    domain: "TableauUserGraphQLField" = TableauUserGraphQLField("domain")
    email: "TableauUserGraphQLField" = TableauUserGraphQLField("email")
    id: "TableauUserGraphQLField" = TableauUserGraphQLField("id")
    luid: "TableauUserGraphQLField" = TableauUserGraphQLField("luid")
    name: "TableauUserGraphQLField" = TableauUserGraphQLField("name")

    @classmethod
    def owned_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "owned_datasources", arguments=cleared_arguments
        )

    @classmethod
    def owned_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "owned_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def owned_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("owned_flows", arguments=cleared_arguments)

    @classmethod
    def owned_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "owned_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def owned_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("owned_lenses", arguments=cleared_arguments)

    @classmethod
    def owned_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "owned_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def owned_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("owned_metrics", arguments=cleared_arguments)

    @classmethod
    def owned_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "owned_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def owned_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "owned_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def owned_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "owned_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def owned_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "owned_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def owned_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "owned_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def owned_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("owned_workbooks", arguments=cleared_arguments)

    @classmethod
    def owned_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "owned_workbooks_connection", arguments=cleared_arguments
        )

    uri: "TableauUserGraphQLField" = TableauUserGraphQLField("uri")
    username: "TableauUserGraphQLField" = TableauUserGraphQLField("username")
    vizportal_id: "TableauUserGraphQLField" = TableauUserGraphQLField("vizportalId")

    def fields(
        self,
        *subfields: Union[
            TableauUserGraphQLField,
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "TableauUserFields":
        """Subfields should come from the TableauUserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TableauUserFields":
        self._alias = alias
        return self


class TableauUsersConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "TableauUserFields":
        return TableauUserFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TableauUsersConnectionGraphQLField" = (
        TableauUsersConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            TableauUsersConnectionGraphQLField, "PageInfoFields", "TableauUserFields"
        ]
    ) -> "TableauUsersConnectionFields":
        """Subfields should come from the TableauUsersConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TableauUsersConnectionFields":
        self._alias = alias
        return self


class TablesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "TableInterface":
        return TableInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TablesConnectionGraphQLField" = TablesConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            TablesConnectionGraphQLField, "PageInfoFields", "TableInterface"
        ]
    ) -> "TablesConnectionFields":
        """Subfields should come from the TablesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TablesConnectionFields":
        self._alias = alias
        return self


class TagFields(GraphQLField):
    @classmethod
    def assets(
        cls,
        *,
        filter: Optional[Taggable_Filter] = None,
        order_by: Optional[TaggableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "TaggableInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Taggable_Filter", "value": filter},
            "orderBy": {"type": "TaggableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TaggableInterface("assets", arguments=cleared_arguments)

    @classmethod
    def assets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Taggable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TaggableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "TaggablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Taggable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TaggableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TaggablesConnectionFields(
            "assets_connection", arguments=cleared_arguments
        )

    @classmethod
    def columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("columns", arguments=cleared_arguments)

    @classmethod
    def columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "columns_connection", arguments=cleared_arguments
        )

    @classmethod
    def database_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("database_tables", arguments=cleared_arguments)

    @classmethod
    def database_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "database_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("databases", arguments=cleared_arguments)

    @classmethod
    def databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("flows", arguments=cleared_arguments)

    @classmethod
    def flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields("flows_connection", arguments=cleared_arguments)

    id: "TagGraphQLField" = TagGraphQLField("id")

    @classmethod
    def metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("metrics", arguments=cleared_arguments)

    @classmethod
    def metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "metrics_connection", arguments=cleared_arguments
        )

    name: "TagGraphQLField" = TagGraphQLField("name")

    @classmethod
    def published_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "published_datasources", arguments=cleared_arguments
        )

    @classmethod
    def published_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "published_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def views(
        cls,
        *,
        filter: Optional[View_Filter] = None,
        order_by: Optional[ViewSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ViewInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "View_Filter", "value": filter},
            "orderBy": {"type": "ViewSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ViewInterface("views", arguments=cleared_arguments)

    @classmethod
    def views_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[View_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ViewSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ViewsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "View_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ViewSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ViewsConnectionFields("views_connection", arguments=cleared_arguments)

    @classmethod
    def virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("workbooks", arguments=cleared_arguments)

    @classmethod
    def workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "workbooks_connection", arguments=cleared_arguments
        )

    def fields(
        self,
        *subfields: Union[
            TagGraphQLField,
            "ColumnFields",
            "ColumnsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "TaggableInterface",
            "TaggablesConnectionFields",
            "ViewInterface",
            "ViewsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "TagFields":
        """Subfields should come from the TagFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TagFields":
        self._alias = alias
        return self


class TaggableInterface(GraphQLField):
    id: "TaggableGraphQLField" = TaggableGraphQLField("id")
    luid: "TaggableGraphQLField" = TaggableGraphQLField("luid")
    name: "TaggableGraphQLField" = TaggableGraphQLField("name")

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    def fields(
        self,
        *subfields: Union[TaggableGraphQLField, "TagFields", "TagsConnectionFields"]
    ) -> "TaggableInterface":
        """Subfields should come from the TaggableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TaggableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "TaggableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class TaggablesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "TaggableInterface":
        return TaggableInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TaggablesConnectionGraphQLField" = TaggablesConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            TaggablesConnectionGraphQLField, "PageInfoFields", "TaggableInterface"
        ]
    ) -> "TaggablesConnectionFields":
        """Subfields should come from the TaggablesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TaggablesConnectionFields":
        self._alias = alias
        return self


class TagsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "TagFields":
        return TagFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TagsConnectionGraphQLField" = TagsConnectionGraphQLField("totalCount")

    def fields(
        self,
        *subfields: Union[TagsConnectionGraphQLField, "PageInfoFields", "TagFields"]
    ) -> "TagsConnectionFields":
        """Subfields should come from the TagsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TagsConnectionFields":
        self._alias = alias
        return self


class ViewInterface(GraphQLField):
    created_at: "ViewGraphQLField" = ViewGraphQLField("createdAt")
    document_view_id: "ViewGraphQLField" = ViewGraphQLField("documentViewId")
    id: "ViewGraphQLField" = ViewGraphQLField("id")
    index: "ViewGraphQLField" = ViewGraphQLField("index")
    luid: "ViewGraphQLField" = ViewGraphQLField("luid")
    name: "ViewGraphQLField" = ViewGraphQLField("name")
    path: "ViewGraphQLField" = ViewGraphQLField("path")

    @classmethod
    def referenced_by_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("referenced_by_metrics", arguments=cleared_arguments)

    @classmethod
    def referenced_by_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "referenced_by_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    updated_at: "ViewGraphQLField" = ViewGraphQLField("updatedAt")

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def workbook(cls) -> "WorkbookFields":
        return WorkbookFields("workbook")

    def fields(
        self,
        *subfields: Union[
            ViewGraphQLField,
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "WorkbookFields",
        ]
    ) -> "ViewInterface":
        """Subfields should come from the ViewInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ViewInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "ViewInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ViewsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "ViewInterface":
        return ViewInterface("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ViewsConnectionGraphQLField" = ViewsConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            ViewsConnectionGraphQLField, "PageInfoFields", "ViewInterface"
        ]
    ) -> "ViewsConnectionFields":
        """Subfields should come from the ViewsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ViewsConnectionFields":
        self._alias = alias
        return self


class VirtualConnectionFields(GraphQLField):
    connection_type: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "connectionType"
    )
    container_name: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "containerName"
    )
    container_type: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "containerType"
    )
    created_at: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "createdAt"
    )

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    description: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "description"
    )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    has_active_warning: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "hasActiveWarning"
    )
    id: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField("id")
    is_certified: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "isCertified"
    )

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField("luid")
    name: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField("name")

    @classmethod
    def owner(cls) -> "TableauUserFields":
        return TableauUserFields("owner")

    project_name: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "projectName"
    )
    project_vizportal_url_id: "VirtualConnectionGraphQLField" = (
        VirtualConnectionGraphQLField("projectVizportalUrlId")
    )

    @classmethod
    def site(cls) -> "TableauSiteFields":
        return TableauSiteFields("site")

    @classmethod
    def tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields("tables", arguments=cleared_arguments)

    @classmethod
    def tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    updated_at: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "updatedAt"
    )

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    uri: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField("uri")
    vizportal_id: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "vizportalId"
    )
    vizportal_url_id: "VirtualConnectionGraphQLField" = VirtualConnectionGraphQLField(
        "vizportalUrlId"
    )

    def fields(
        self,
        *subfields: Union[
            VirtualConnectionGraphQLField,
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauSiteFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "VirtualConnectionFields":
        """Subfields should come from the VirtualConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VirtualConnectionFields":
        self._alias = alias
        return self


class VirtualConnectionTableFields(GraphQLField):
    @classmethod
    def columns(
        cls,
        *,
        filter: Optional[Column_Filter] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Column_Filter", "value": filter},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnFields("columns", arguments=cleared_arguments)

    @classmethod
    def columns_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Column_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ColumnSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ColumnsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Column_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ColumnSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ColumnsConnectionFields(
            "columns_connection", arguments=cleared_arguments
        )

    contains_unsupported_custom_sql: "VirtualConnectionTableGraphQLField" = (
        VirtualConnectionTableGraphQLField("containsUnsupportedCustomSql")
    )

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    description: "VirtualConnectionTableGraphQLField" = (
        VirtualConnectionTableGraphQLField("description")
    )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    extract_last_refresh_type: "VirtualConnectionTableGraphQLField" = (
        VirtualConnectionTableGraphQLField("extractLastRefreshType")
    )
    extract_last_refreshed_at: "VirtualConnectionTableGraphQLField" = (
        VirtualConnectionTableGraphQLField("extractLastRefreshedAt")
    )
    has_active_warning: "VirtualConnectionTableGraphQLField" = (
        VirtualConnectionTableGraphQLField("hasActiveWarning")
    )
    id: "VirtualConnectionTableGraphQLField" = VirtualConnectionTableGraphQLField("id")
    is_certified: "VirtualConnectionTableGraphQLField" = (
        VirtualConnectionTableGraphQLField("isCertified")
    )
    is_embedded: "VirtualConnectionTableGraphQLField" = (
        VirtualConnectionTableGraphQLField("isEmbedded")
    )
    is_extracted: "VirtualConnectionTableGraphQLField" = (
        VirtualConnectionTableGraphQLField("isExtracted")
    )

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "VirtualConnectionTableGraphQLField" = VirtualConnectionTableGraphQLField(
        "luid"
    )
    name: "VirtualConnectionTableGraphQLField" = VirtualConnectionTableGraphQLField(
        "name"
    )

    @classmethod
    def owner(cls) -> "TableauUserFields":
        return TableauUserFields("owner")

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    uri: "VirtualConnectionTableGraphQLField" = VirtualConnectionTableGraphQLField(
        "uri"
    )

    @classmethod
    def virtual_connection(cls) -> "VirtualConnectionFields":
        return VirtualConnectionFields("virtual_connection")

    vizportal_id: "VirtualConnectionTableGraphQLField" = (
        VirtualConnectionTableGraphQLField("vizportalId")
    )
    vizportal_url_id: "VirtualConnectionTableGraphQLField" = (
        VirtualConnectionTableGraphQLField("vizportalUrlId")
    )

    def fields(
        self,
        *subfields: Union[
            VirtualConnectionTableGraphQLField,
            "ColumnFields",
            "ColumnsConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "VirtualConnectionTableFields":
        """Subfields should come from the VirtualConnectionTableFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VirtualConnectionTableFields":
        self._alias = alias
        return self


class VirtualConnectionTablesConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "VirtualConnectionTableFields":
        return VirtualConnectionTableFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "VirtualConnectionTablesConnectionGraphQLField" = (
        VirtualConnectionTablesConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            VirtualConnectionTablesConnectionGraphQLField,
            "PageInfoFields",
            "VirtualConnectionTableFields",
        ]
    ) -> "VirtualConnectionTablesConnectionFields":
        """Subfields should come from the VirtualConnectionTablesConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VirtualConnectionTablesConnectionFields":
        self._alias = alias
        return self


class VirtualConnectionsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "VirtualConnectionFields":
        return VirtualConnectionFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "VirtualConnectionsConnectionGraphQLField" = (
        VirtualConnectionsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            VirtualConnectionsConnectionGraphQLField,
            "PageInfoFields",
            "VirtualConnectionFields",
        ]
    ) -> "VirtualConnectionsConnectionFields":
        """Subfields should come from the VirtualConnectionsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VirtualConnectionsConnectionFields":
        self._alias = alias
        return self


class WarnableInterface(GraphQLField):
    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    has_active_warning: "WarnableGraphQLField" = WarnableGraphQLField(
        "hasActiveWarning"
    )
    id: "WarnableGraphQLField" = WarnableGraphQLField("id")
    luid: "WarnableGraphQLField" = WarnableGraphQLField("luid")
    name: "WarnableGraphQLField" = WarnableGraphQLField("name")

    def fields(
        self,
        *subfields: Union[
            WarnableGraphQLField,
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
        ]
    ) -> "WarnableInterface":
        """Subfields should come from the WarnableInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WarnableInterface":
        self._alias = alias
        return self

    def on(self, type_name: str, *subfields: GraphQLField) -> "WarnableInterface":
        self._inline_fragments[type_name] = subfields
        return self


class WebDataConnectorFields(GraphQLField):
    certification_note: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField(
        "certificationNote"
    )

    @classmethod
    def certifier(cls) -> "TableauUserFields":
        return TableauUserFields("certifier")

    connection_type: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField(
        "connectionType"
    )
    connector_url: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField(
        "connectorUrl"
    )

    @classmethod
    def contact(cls) -> "TableauUserFields":
        return TableauUserFields("contact")

    @classmethod
    def data_quality_certifications(
        cls,
        *,
        filter: Optional[DataQualityCertification_Filter] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationFields(
            "data_quality_certifications", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_certifications_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityCertification_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityCertificationSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityCertificationsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityCertification_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityCertificationSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityCertificationsConnectionFields(
            "data_quality_certifications_connection", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warning(cls) -> "DataQualityWarningFields":
        return DataQualityWarningFields("data_quality_warning")

    @classmethod
    def data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "data_quality_warnings_connection", arguments=cleared_arguments
        )

    description: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField(
        "description"
    )

    @classmethod
    def downstream_dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("downstream_dashboards", arguments=cleared_arguments)

    @classmethod
    def downstream_dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "downstream_dashboards_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("downstream_databases", arguments=cleared_arguments)

    @classmethod
    def downstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "downstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "downstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def downstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "downstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("downstream_flows", arguments=cleared_arguments)

    @classmethod
    def downstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "downstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("downstream_lenses", arguments=cleared_arguments)

    @classmethod
    def downstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "downstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions(
        cls,
        *,
        filter: Optional[MetricDefinition_Filter] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionFields(
            "downstream_metric_definitions", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metric_definitions_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[MetricDefinition_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricDefinitionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricDefinitionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "MetricDefinition_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricDefinitionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricDefinitionsConnectionFields(
            "downstream_metric_definitions_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("downstream_sheets", arguments=cleared_arguments)

    @classmethod
    def downstream_sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields(
            "downstream_sheets_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("downstream_tables", arguments=cleared_arguments)

    @classmethod
    def downstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "downstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "downstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "downstream_virtual_connection_tables_connection",
            arguments=cleared_arguments,
        )

    @classmethod
    def downstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "downstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def downstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "downstream_virtual_connections_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_workbooks(
        cls,
        *,
        filter: Optional[Workbook_Filter] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbookFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Workbook_Filter", "value": filter},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbookFields("downstream_workbooks", arguments=cleared_arguments)

    @classmethod
    def downstream_workbooks_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Workbook_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[WorkbookSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "WorkbooksConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Workbook_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "WorkbookSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkbooksConnectionFields(
            "downstream_workbooks_connection", arguments=cleared_arguments
        )

    has_active_warning: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField(
        "hasActiveWarning"
    )
    id: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField("id")
    is_certified: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField(
        "isCertified"
    )
    is_controlled_permissions_enabled: "WebDataConnectorGraphQLField" = (
        WebDataConnectorGraphQLField("isControlledPermissionsEnabled")
    )
    is_embedded: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField(
        "isEmbedded"
    )
    is_grouped: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField(
        "isGrouped"
    )

    @classmethod
    def labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("labels", arguments=cleared_arguments)

    @classmethod
    def labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields("labels_connection", arguments=cleared_arguments)

    luid: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField("luid")
    name: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField("name")
    project_name: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField(
        "projectName"
    )
    project_vizportal_url_id: "WebDataConnectorGraphQLField" = (
        WebDataConnectorGraphQLField("projectVizportalUrlId")
    )

    @classmethod
    def referenced_by_queries(
        cls,
        *,
        filter: Optional[CustomSQLTable_Filter] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTableFields(
            "referenced_by_queries", arguments=cleared_arguments
        )

    @classmethod
    def referenced_by_queries_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[CustomSQLTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[CustomSQLTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "CustomSQLTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "CustomSQLTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "CustomSQLTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomSQLTablesConnectionFields(
            "referenced_by_queries_connection", arguments=cleared_arguments
        )

    @classmethod
    def tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("tables", arguments=cleared_arguments)

    @classmethod
    def tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    vizportal_id: "WebDataConnectorGraphQLField" = WebDataConnectorGraphQLField(
        "vizportalId"
    )

    def fields(
        self,
        *subfields: Union[
            WebDataConnectorGraphQLField,
            "CustomSQLTableFields",
            "CustomSQLTablesConnectionFields",
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityCertificationFields",
            "DataQualityCertificationsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricDefinitionFields",
            "MetricDefinitionsConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
            "WorkbookFields",
            "WorkbooksConnectionFields",
        ]
    ) -> "WebDataConnectorFields":
        """Subfields should come from the WebDataConnectorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WebDataConnectorFields":
        self._alias = alias
        return self


class WebDataConnectorsConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "WebDataConnectorFields":
        return WebDataConnectorFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "WebDataConnectorsConnectionGraphQLField" = (
        WebDataConnectorsConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            WebDataConnectorsConnectionGraphQLField,
            "PageInfoFields",
            "WebDataConnectorFields",
        ]
    ) -> "WebDataConnectorsConnectionFields":
        """Subfields should come from the WebDataConnectorsConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WebDataConnectorsConnectionFields":
        self._alias = alias
        return self


class WorkbookFields(GraphQLField):
    container_name: "WorkbookGraphQLField" = WorkbookGraphQLField("containerName")
    container_type: "WorkbookGraphQLField" = WorkbookGraphQLField("containerType")
    contains_unsupported_custom_sql: "WorkbookGraphQLField" = WorkbookGraphQLField(
        "containsUnsupportedCustomSql"
    )
    created_at: "WorkbookGraphQLField" = WorkbookGraphQLField("createdAt")

    @classmethod
    def dashboards(
        cls,
        *,
        filter: Optional[Dashboard_Filter] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardFields("dashboards", arguments=cleared_arguments)

    @classmethod
    def dashboards_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Dashboard_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DashboardSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DashboardsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Dashboard_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DashboardSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DashboardsConnectionFields(
            "dashboards_connection", arguments=cleared_arguments
        )

    description: "WorkbookGraphQLField" = WorkbookGraphQLField("description")

    @classmethod
    def downstream_metrics(
        cls,
        *,
        filter: Optional[Metric_Filter] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Metric_Filter", "value": filter},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields("downstream_metrics", arguments=cleared_arguments)

    @classmethod
    def downstream_metrics_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Metric_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[MetricSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "MetricsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Metric_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "MetricSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricsConnectionFields(
            "downstream_metrics_connection", arguments=cleared_arguments
        )

    @classmethod
    def downstream_owners(
        cls,
        *,
        filter: Optional[TableauUser_Filter] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUserFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUserFields("downstream_owners", arguments=cleared_arguments)

    @classmethod
    def downstream_owners_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[TableauUser_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TableauUserSortOrder] = None
    ) -> "TableauUsersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "TableauUser_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TableauUserSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TableauUsersConnectionFields(
            "downstream_owners_connection", arguments=cleared_arguments
        )

    @classmethod
    def embedded_datasources(
        cls,
        *,
        filter: Optional[EmbeddedDatasource_Filter] = None,
        order_by: Optional[EmbeddedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "EmbeddedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "EmbeddedDatasource_Filter", "value": filter},
            "orderBy": {"type": "EmbeddedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EmbeddedDatasourceFields(
            "embedded_datasources", arguments=cleared_arguments
        )

    @classmethod
    def embedded_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[EmbeddedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[EmbeddedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "EmbeddedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "EmbeddedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "EmbeddedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EmbeddedDatasourcesConnectionFields(
            "embedded_datasources_connection", arguments=cleared_arguments
        )

    id: "WorkbookGraphQLField" = WorkbookGraphQLField("id")
    luid: "WorkbookGraphQLField" = WorkbookGraphQLField("luid")
    name: "WorkbookGraphQLField" = WorkbookGraphQLField("name")

    @classmethod
    def owner(cls) -> "TableauUserFields":
        return TableauUserFields("owner")

    @classmethod
    def parameters(
        cls,
        *,
        filter: Optional[Parameter_Filter] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ParameterFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Parameter_Filter", "value": filter},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParameterFields("parameters", arguments=cleared_arguments)

    @classmethod
    def parameters_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Parameter_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ParameterSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ParametersConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Parameter_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ParameterSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ParametersConnectionFields(
            "parameters_connection", arguments=cleared_arguments
        )

    project_luid: "WorkbookGraphQLField" = WorkbookGraphQLField("projectLuid")
    project_name: "WorkbookGraphQLField" = WorkbookGraphQLField("projectName")
    project_vizportal_url_id: "WorkbookGraphQLField" = WorkbookGraphQLField(
        "projectVizportalUrlId"
    )

    @classmethod
    def sheets(
        cls,
        *,
        filter: Optional[Sheet_Filter] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Sheet_Filter", "value": filter},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetFields("sheets", arguments=cleared_arguments)

    @classmethod
    def sheets_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Sheet_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[SheetSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "SheetsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Sheet_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "SheetSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SheetsConnectionFields("sheets_connection", arguments=cleared_arguments)

    @classmethod
    def site(cls) -> "TableauSiteFields":
        return TableauSiteFields("site")

    @classmethod
    def tags(
        cls,
        *,
        filter: Optional[Tag_Filter] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Tag_Filter", "value": filter},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagFields("tags", arguments=cleared_arguments)

    @classmethod
    def tags_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Tag_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[TagSortOrder] = None
    ) -> "TagsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Tag_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "TagSortOrder", "value": order_by},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TagsConnectionFields("tags_connection", arguments=cleared_arguments)

    updated_at: "WorkbookGraphQLField" = WorkbookGraphQLField("updatedAt")

    @classmethod
    def upstream_data_quality_warnings(
        cls,
        *,
        filter: Optional[DataQualityWarning_Filter] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningFields(
            "upstream_data_quality_warnings", arguments=cleared_arguments
        )

    @classmethod
    def upstream_data_quality_warnings_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DataQualityWarning_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DataQualityWarningSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DataQualityWarningsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DataQualityWarning_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DataQualityWarningSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DataQualityWarningsConnectionFields(
            "upstream_data_quality_warnings_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_databases(
        cls,
        *,
        filter: Optional[Database_Filter] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Database_Filter", "value": filter},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseInterface("upstream_databases", arguments=cleared_arguments)

    @classmethod
    def upstream_databases_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Database_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabasesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Database_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabasesConnectionFields(
            "upstream_databases_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources(
        cls,
        *,
        filter: Optional[PublishedDatasource_Filter] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourceFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourceFields(
            "upstream_datasources", arguments=cleared_arguments
        )

    @classmethod
    def upstream_datasources_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[PublishedDatasource_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[PublishedDatasourceSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "PublishedDatasourcesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "PublishedDatasource_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "PublishedDatasourceSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PublishedDatasourcesConnectionFields(
            "upstream_datasources_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_flows(
        cls,
        *,
        filter: Optional[Flow_Filter] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Flow_Filter", "value": filter},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowFields("upstream_flows", arguments=cleared_arguments)

    @classmethod
    def upstream_flows_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Flow_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[FlowSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "FlowsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Flow_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "FlowSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FlowsConnectionFields(
            "upstream_flows_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_labels(
        cls,
        *,
        filter: Optional[Label_Filter] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Label_Filter", "value": filter},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelInterface("upstream_labels", arguments=cleared_arguments)

    @classmethod
    def upstream_labels_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Label_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LabelSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LabelsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Label_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LabelSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelsConnectionFields(
            "upstream_labels_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_lenses(
        cls,
        *,
        filter: Optional[Lens_Filter] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "Lens_Filter", "value": filter},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensFields("upstream_lenses", arguments=cleared_arguments)

    @classmethod
    def upstream_lenses_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[Lens_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[LensSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "LensesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "Lens_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "LensSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LensesConnectionFields(
            "upstream_lenses_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_tables(
        cls,
        *,
        filter: Optional[DatabaseTable_Filter] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTableFields("upstream_tables", arguments=cleared_arguments)

    @classmethod
    def upstream_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[DatabaseTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[DatabaseTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "DatabaseTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "DatabaseTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "DatabaseTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatabaseTablesConnectionFields(
            "upstream_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables(
        cls,
        *,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTableFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTableFields(
            "upstream_virtual_connection_tables", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connection_tables_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnectionTable_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionTableSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionTablesConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnectionTable_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionTableSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionTablesConnectionFields(
            "upstream_virtual_connection_tables_connection", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections(
        cls,
        *,
        filter: Optional[VirtualConnection_Filter] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionFields(
            "upstream_virtual_connections", arguments=cleared_arguments
        )

    @classmethod
    def upstream_virtual_connections_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[VirtualConnection_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[VirtualConnectionSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "VirtualConnectionsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "VirtualConnection_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "VirtualConnectionSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VirtualConnectionsConnectionFields(
            "upstream_virtual_connections_connection", arguments=cleared_arguments
        )

    uri: "WorkbookGraphQLField" = WorkbookGraphQLField("uri")

    @classmethod
    def views(
        cls,
        *,
        filter: Optional[View_Filter] = None,
        order_by: Optional[ViewSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ViewInterface":
        arguments: Dict[str, Dict[str, Any]] = {
            "filter": {"type": "View_Filter", "value": filter},
            "orderBy": {"type": "ViewSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ViewInterface("views", arguments=cleared_arguments)

    @classmethod
    def views_connection(
        cls,
        *,
        after: Optional[str] = None,
        filter: Optional[View_Filter] = None,
        first: Optional[int] = None,
        offset: Optional[int] = None,
        order_by: Optional[ViewSortOrder] = None,
        permission_mode: Optional[PermissionMode] = None
    ) -> "ViewsConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "after": {"type": "String", "value": after},
            "filter": {"type": "View_Filter", "value": filter},
            "first": {"type": "Int", "value": first},
            "offset": {"type": "Int", "value": offset},
            "orderBy": {"type": "ViewSortOrder", "value": order_by},
            "permissionMode": {"type": "PermissionMode", "value": permission_mode},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ViewsConnectionFields("views_connection", arguments=cleared_arguments)

    vizportal_url_id: "WorkbookGraphQLField" = WorkbookGraphQLField("vizportalUrlId")

    def fields(
        self,
        *subfields: Union[
            WorkbookGraphQLField,
            "DashboardFields",
            "DashboardsConnectionFields",
            "DataQualityWarningFields",
            "DataQualityWarningsConnectionFields",
            "DatabaseInterface",
            "DatabaseTableFields",
            "DatabaseTablesConnectionFields",
            "DatabasesConnectionFields",
            "EmbeddedDatasourceFields",
            "EmbeddedDatasourcesConnectionFields",
            "FlowFields",
            "FlowsConnectionFields",
            "LabelInterface",
            "LabelsConnectionFields",
            "LensFields",
            "LensesConnectionFields",
            "MetricFields",
            "MetricsConnectionFields",
            "ParameterFields",
            "ParametersConnectionFields",
            "PublishedDatasourceFields",
            "PublishedDatasourcesConnectionFields",
            "SheetFields",
            "SheetsConnectionFields",
            "TableauSiteFields",
            "TableauUserFields",
            "TableauUsersConnectionFields",
            "TagFields",
            "TagsConnectionFields",
            "ViewInterface",
            "ViewsConnectionFields",
            "VirtualConnectionFields",
            "VirtualConnectionTableFields",
            "VirtualConnectionTablesConnectionFields",
            "VirtualConnectionsConnectionFields",
        ]
    ) -> "WorkbookFields":
        """Subfields should come from the WorkbookFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkbookFields":
        self._alias = alias
        return self


class WorkbooksConnectionFields(GraphQLField):
    @classmethod
    def nodes(cls) -> "WorkbookFields":
        return WorkbookFields("nodes")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "WorkbooksConnectionGraphQLField" = WorkbooksConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            WorkbooksConnectionGraphQLField, "PageInfoFields", "WorkbookFields"
        ]
    ) -> "WorkbooksConnectionFields":
        """Subfields should come from the WorkbooksConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkbooksConnectionFields":
        self._alias = alias
        return self


class __DirectiveFields(GraphQLField):
    name: "__DirectiveGraphQLField" = __DirectiveGraphQLField("name")
    description: "__DirectiveGraphQLField" = __DirectiveGraphQLField("description")
    is_repeatable: "__DirectiveGraphQLField" = __DirectiveGraphQLField("isRepeatable")
    locations: "__DirectiveGraphQLField" = __DirectiveGraphQLField("locations")

    @classmethod
    def args(cls, *, include_deprecated: Optional[bool] = None) -> "__InputValueFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeprecated": {"type": "Boolean", "value": include_deprecated}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return __InputValueFields("args", arguments=cleared_arguments)

    def fields(
        self, *subfields: Union[__DirectiveGraphQLField, "__InputValueFields"]
    ) -> "__DirectiveFields":
        """Subfields should come from the __DirectiveFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "__DirectiveFields":
        self._alias = alias
        return self


class __EnumValueFields(GraphQLField):
    name: "__EnumValueGraphQLField" = __EnumValueGraphQLField("name")
    description: "__EnumValueGraphQLField" = __EnumValueGraphQLField("description")
    is_deprecated: "__EnumValueGraphQLField" = __EnumValueGraphQLField("isDeprecated")
    deprecation_reason: "__EnumValueGraphQLField" = __EnumValueGraphQLField(
        "deprecationReason"
    )

    def fields(self, *subfields: __EnumValueGraphQLField) -> "__EnumValueFields":
        """Subfields should come from the __EnumValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "__EnumValueFields":
        self._alias = alias
        return self


class __FieldFields(GraphQLField):
    name: "__FieldGraphQLField" = __FieldGraphQLField("name")
    description: "__FieldGraphQLField" = __FieldGraphQLField("description")

    @classmethod
    def args(cls, *, include_deprecated: Optional[bool] = None) -> "__InputValueFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeprecated": {"type": "Boolean", "value": include_deprecated}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return __InputValueFields("args", arguments=cleared_arguments)

    @classmethod
    def type(cls) -> "__TypeFields":
        return __TypeFields("type")

    is_deprecated: "__FieldGraphQLField" = __FieldGraphQLField("isDeprecated")
    deprecation_reason: "__FieldGraphQLField" = __FieldGraphQLField("deprecationReason")

    def fields(
        self,
        *subfields: Union[__FieldGraphQLField, "__InputValueFields", "__TypeFields"]
    ) -> "__FieldFields":
        """Subfields should come from the __FieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "__FieldFields":
        self._alias = alias
        return self


class __InputValueFields(GraphQLField):
    name: "__InputValueGraphQLField" = __InputValueGraphQLField("name")
    description: "__InputValueGraphQLField" = __InputValueGraphQLField("description")

    @classmethod
    def type(cls) -> "__TypeFields":
        return __TypeFields("type")

    default_value: "__InputValueGraphQLField" = __InputValueGraphQLField("defaultValue")
    is_deprecated: "__InputValueGraphQLField" = __InputValueGraphQLField("isDeprecated")
    deprecation_reason: "__InputValueGraphQLField" = __InputValueGraphQLField(
        "deprecationReason"
    )

    def fields(
        self, *subfields: Union[__InputValueGraphQLField, "__TypeFields"]
    ) -> "__InputValueFields":
        """Subfields should come from the __InputValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "__InputValueFields":
        self._alias = alias
        return self


class __SchemaFields(GraphQLField):
    description: "__SchemaGraphQLField" = __SchemaGraphQLField("description")

    @classmethod
    def types(cls) -> "__TypeFields":
        return __TypeFields("types")

    @classmethod
    def query_type(cls) -> "__TypeFields":
        return __TypeFields("query_type")

    @classmethod
    def mutation_type(cls) -> "__TypeFields":
        return __TypeFields("mutation_type")

    @classmethod
    def subscription_type(cls) -> "__TypeFields":
        return __TypeFields("subscription_type")

    @classmethod
    def directives(cls) -> "__DirectiveFields":
        return __DirectiveFields("directives")

    def fields(
        self,
        *subfields: Union[__SchemaGraphQLField, "__DirectiveFields", "__TypeFields"]
    ) -> "__SchemaFields":
        """Subfields should come from the __SchemaFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "__SchemaFields":
        self._alias = alias
        return self


class __TypeFields(GraphQLField):
    kind: "__TypeGraphQLField" = __TypeGraphQLField("kind")
    name: "__TypeGraphQLField" = __TypeGraphQLField("name")
    description: "__TypeGraphQLField" = __TypeGraphQLField("description")
    specified_by_url: "__TypeGraphQLField" = __TypeGraphQLField("specifiedByURL")

    @classmethod
    def fields(cls, *, include_deprecated: Optional[bool] = None) -> "__FieldFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeprecated": {"type": "Boolean", "value": include_deprecated}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return __FieldFields("fields", arguments=cleared_arguments)

    @classmethod
    def interfaces(cls) -> "__TypeFields":
        return __TypeFields("interfaces")

    @classmethod
    def possible_types(cls) -> "__TypeFields":
        return __TypeFields("possible_types")

    @classmethod
    def enum_values(
        cls, *, include_deprecated: Optional[bool] = None
    ) -> "__EnumValueFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeprecated": {"type": "Boolean", "value": include_deprecated}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return __EnumValueFields("enum_values", arguments=cleared_arguments)

    @classmethod
    def input_fields(
        cls, *, include_deprecated: Optional[bool] = None
    ) -> "__InputValueFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "includeDeprecated": {"type": "Boolean", "value": include_deprecated}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return __InputValueFields("input_fields", arguments=cleared_arguments)

    @classmethod
    def of_type(cls) -> "__TypeFields":
        return __TypeFields("of_type")

    def fields(
        self,
        *subfields: Union[
            __TypeGraphQLField,
            "__EnumValueFields",
            "__FieldFields",
            "__InputValueFields",
            "__TypeFields",
        ]
    ) -> "__TypeFields":
        """Subfields should come from the __TypeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "__TypeFields":
        self._alias = alias
        return self
